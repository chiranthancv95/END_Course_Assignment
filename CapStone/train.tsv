Description	Code
Concatenation of two List	"my_list1 = [4, 3, 2, 9, 10, 44, 1]
my_list2 = [5, 6, 2, 8, 15, 14, 12]
print(f""Sum of two list:,{my_list1+my_list2}"")
"
Calculate the length of dictionary	"thisdict = {
	""brand"": ""Ford"",
	""model"": ""Mustang"",
	""year"": 1964
}


print(f""Length of Dictionary:{len(thisdict)}"")
"
write a python function to calculate age given date of birth	"

from datetime import date


def calculateAge(birthDate):
	today = date.today()
	age = today.year - birthDate.year -        ((today.month, today.day) < (birthDate.month, birthDate.day))
	return age
"
write Python program to illustrate  enumerate function in loops	"l1 = [""eat"", ""sleep"", ""repeat""]


for count, ele in enumerate(l1, 100):
	print(count, ele)
"
is odd	"def add_even_odd_list(l1: list, l2: list) -> list:
	return [a + b for a, b in zip(l1, l2) if a % 2 == 0 and b % 2 != 0]
"
and velocity v	"def cal_ke(mass: float, velocity: float) -> float:
	return (mass * (velocity)**2) / 2
"
Write a Python function to strip vowels from a string	"

def vowel_stripping(string):
	
	return """".join([x for x in string if x not in ('a', 'e', 'i', 'o', 'u')])
"
write a program to Binary Right Shift a number	"c = a >> 2
print(""Binary Right Shift"", c)
"
otherwise False	"

def even(a): return True if a % 2 == 0 else False
"
write a Python function to convert number to english	"

def num_to_eng(n):
	if n == 0:
        return 'zero'

	unit = ('', 'one', 'two', 'three', 'four',
            'five', 'six', 'seven', 'eight', 'nine')
	tens = ('', '', 'twenty', 'thirty', 'forty', 'fifty',
            'sixty', 'seventy', 'eighty', 'ninety')
	teen = ('ten', 'eleven', 'twelve', 'thirteen', 'fourteen',
            'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen')
	h, t, u = '', '', ''

	if n // 100:
        h = unit[n // 100] + ' hundred'
        n = n % 100

	if n >= 20:
        t = tens[n // 10]
        n = n % 10
	elif n >= 10:
        t = teen[n - 10]
        n = 0

	u = unit[n]

	return ' '.join(filter(None, [h, t, u]))


print(num_to_eng(115))
"
Counting total Digits in a string	"str1 = ""abc4234AFde""
digitCount = 0
for i in range(0, len(str1)):
	char = str1[i]
	if(char.isdigit()):
        digitCount += 1
print('Number of digits: ', digitCount)
"
Write a function that returns the exponential value of the input	"def exp(x) -> float:
	import math
	return math.exp(x)
"
write a python function to generate SHA256 for given text	"def get_sha256(text):
	import hashlib
	return hashlib.sha256(text).hexdigest()
"
extension of that	"def filename_extension(file):
	f_extns = file.split(""."")
	return f""The extension of the file is :{repr(f_extns[-1])}""
"
write a program to remove odd numbers from a list using list comprehensions	"nums = [1, 2, 3, 4, 5, 6, 7, 8]
no_odd_nums = [i for i in nums if i % 2 == 0]
"
write a python function to append all elements of one list to another	"def extend_list(list1, list2):
	list1 = [1, 2]
	list2 = [3, 4]
	return list1.extend(list2)
"
"List slicing using indexes that are ""out of range"""	"my_list = [1, 2, 3, 4, 5]
print(my_list[5])
"
string	"txt = ""	 banana	 ""
x = txt.strip()
print(""of all fruits"", x, ""is my favorite"")
"
29. Python Program to Find HCF or GCD	"

def compute_hcf(x, y):
	if x > y:
        smaller = y
	else:
        smaller = x
	for i in range(1, smaller + 1):
        if((x % i == 0) and (y % i == 0)):
            hcf = i
	return hcf


num1 = 54
num2 = 24


print(""The H.C.F. is"", compute_hcf(num1, num2))
"
variable length of args	"import argparse


def create_parser(prog_name, prog_description, arg_name):
	parser = argparse.ArgumentParser(
        prog=prog_name, description=prog_description)
	parser.add_argument(arg_name, nargs='+')
	
	return parser
"
console and print the evaluation result.	"expression = input()
print(eval(expression))
"
Driver code	"dict1 = {'a': 10, 'b': 8}
dict2 = {'d': 6, 'c': 4}

print(Merge(dict1, dict2))
print(dict2)
"
string encoded by utf-8.	"s = raw_input()
u = unicode(s, ""utf-8"")
print(u)
"
numbers is even	"def is_prod_even(num1, num2):
	prod = num1 * num2
	return not prod % 2
"
Write a Python function to multiply all the numbers in a list	"def multiply(numbers):
	total = 1
	for x in numbers:
        total *= x
	return total


print(multiply((8, 2, 3, -1, 7)))
"
Write a Python program to convert a tuple to a dictionary.	"tuplex = ((2, ""w""), (3, ""r""))
print(dict((y, x) for x, y in tuplex))
"
Generate a list by list comprehension	"list = [x for x in range(10)]
print(f""List Generated by list comprehension:{list}"")
"
68 write a program to remove punctuation from a string	"

punctuations = '''!()-[]{};:'""\\,<>./?@#$%^&*_~'''


my_str = ""Hello!!!, he said ---and went.""


no_punct = """"
for char in my_str:
	if char not in punctuations:
        no_punct = no_punct + char


print(no_punct)
"
3x4 matrix	"Y = [[5, 8, 1, 2],
     [6, 7, 3, 0],
     [4, 5, 9, 1]]
"
"object is in [""Baseball"",""cricket""]"	"

subjects = [""Americans"", ""Indians""]
verbs = [""play"", ""watch""]
objects = [""Baseball"", ""Cricket""]
sentence_list = [
	subject + "" "" + verb + "" "" + object + "".""
	for subject in subjects for verb in verbs for object in objects]
for sentence in sentence_list:
	print(sentence)
"
write a python program to print the number of letters and digits in sentence	"sentence = 'The Quick 123 Fox'
digits = 0
letters = 0
for c in sentence:
	if c.isdigit():
        digits += 1
	elif c.isalpha():
        letters += 1
	else:
        pass
print(f'Digits: {digits}, Letters: {letters}')
"
Calculate number of days between two given dates	"from datetime import datetime


date_1 = datetime(2020, 2, 25).date()
date_2 = datetime(2020, 9, 17).date()
delta = None
if date_1 > date_2:
	delta = date_1 - date_2
else:
	delta = date_2 - date_1
print(""Difference is"", delta.days, ""days"")
"
number or not	"def perfect_number_checker(num):
	i = 2
	sum = 1
	while(i <= num // 2):
        if (num % i == 0):
            sum += i
        i += 1
	if sum == num:
        return f'{num} is a perfect number'

	else:
        return f'{num} is not a perfect number'
"
write a python program to Get the maximum and minimum value in a dictionary	"

my_dict = {'x': 500, 'y': 5874, 'z': 560}


key_max = max(my_dict.keys(), key=(lambda k: my_dict[k]))
key_min = min(my_dict.keys(), key=(lambda k: my_dict[k]))


print('Maximum Value in a dictionary: ', my_dict[key_max])
print('Minimum Value in a dictionary: ', my_dict[key_min])
"
19 capitalize first letter in python in list	"my_list = ['apple pie', 'orange jam']
my_list[0].capitalize()
"
progression or not	"def is_geometric(li):
	if len(li) <= 1:
        return True
	
	ratio = li[1] / float(li[0])
	
	for i in range(1, len(li)):
        if li[i] / float(li[i - 1]) != ratio:
            return False
	return True
"
Write a function to multiplies two lists element wise only if numbers are odd	"def adds_listoddelements(l1: list, l2: list):
	return [i * j for i, j in zip(l1, l2) if i * j % 2 == 1]
"
Choose given number of elements from the list with different probability	"import random
num1 = 5
numberList = [111, 222, 333, 444, 555]
print(random.choices(numberList, weights=(10, 20, 30, 40, 50), k=num1))
"
Write a python function that Print all the Numbers Present in the Text File	"

def print_number(fname):
	with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            for i in words:
                for letter in i:
                    if(letter.isdigit()):
                        print(letter)
"
49 write a python funvtion to print the merge sort algorithm in python	"def mergeSort(myList):
	if len(myList) > 1:
        mid = len(myList) // 2
        left = myList[:mid]
        right = myList[mid:]

        
        mergeSort(left)
        mergeSort(right)

        
        i = 0
        j = 0

        
        k = 0

        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                
                myList[k] = left[i]
                
                i += 1
            else:
                myList[k] = right[j]
                j += 1
            
            k += 1

        
        while i < len(left):
            myList[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            myList[k] = right[j]
            j += 1
            k += 1


myList = [54, 26, 93, 17, 77, 31, 44, 55, 20]
mergeSort(myList)
"
write a function that converts a integer dictionary into a list of tuples.	"def dict_to_tuple(input_dict):
	out_tuple = [(a, b) for a, b in input_dict.items()]
	return out_tuple
"
Replacing a string with another string	"word = ""Hello World""
replace = ""Bye""
input = ""Hello""
after_replace = word.replace(input, replace)
print(f""String ater replacement: {after_replace}"")
"
52 zip two tuple	"def zip_to_tuple(tup1, tup2):
	return zip(tup1, tup2)
"
comma separated sequence.	"value = []
items = [x for x in raw_input().split(',')]
for p in items:
	intp = int(p, 2)
	if not intp % 5:
        value.append(p)
print(','.join(value))
"
n+nn+nnn.	"

def custom(n):
	a = n
	n1 = int(""%s"" % a)
	n2 = int(""%s%s"" % (a, a))
	n3 = int(""%s%s%s"" % (a, a, a))
	return n1 + n2 + n3


print(custom(20))
"
from a sequence of integer values.	"def odd_product(nums):
	for i in range(len(nums)):
        for j in range(len(nums)):
            if i != j:
                product = nums[i] * nums[j]
                if product & 1:
                    return True
                    return False


dt1 = [2, 4, 6, 8]
dt2 = [1, 6, 4, 7, 8]
print(dt1, odd_product(dt1))
print(dt2, odd_product(dt2))
"
upto 1. Returns False otherwise	"

def sum_upto_one(arr):
	arr_sum = sum(arr)
	try:
        assert float(arr_sum) == 1.0
        return True
	except AssertionError:
        return False
"
string	"

str1 = ""python1234""

total_digits = 0
total_letters = 0

for s in str1:

	if s.isnumeric():
        total_digits += 1
	else:
        total_letters += 1

print(""Total letters found : "", total_letters)
print(""Total digits found : "", total_digits)
"
and print it	"string = 'The quick brown fox jumps over the lazy dog'
print(string.title())
"
Write a python Class to calculate area of a rectangle and print the area	"

class rectangle():
	def __init__(self, breadth, length):
        self.breadth = breadth
        self.length = length

	def area(self):
        return self.breadth * self.length


a = 6
b = 4
obj = rectangle(a, b)
print(""Area of rectangle:"", obj.area())
"
3 add 1 to all elements in list python	"lst = [1, 2, 3]
list(map(lambda x: x + 1, lst))
"
and write to a user input file	"import re


def extract_mailid(my_string, outfile):
	regex = re.compile(r'[\w]+@[\w]+\.[\w]+', re.UNICODE)
	mailids = regex.findall(my_string)
	if(len(mailids) > 0):
        with open(outfile, 'w') as mailfile:
            for mailid in mailids:
                mailfile.write(mailid + ""\n"")
        mailfile.close()
"
arithmetic progression or not.	"

def is_arithmetic(l):
	delta = l[1] - l[0]
	for index in range(len(l) - 1):
        if not (l[index + 1] - l[index] == delta):
            return False
	return True
"
nested dictionary and return it	"def lists_to_dict(test_list1, test_list2, test_list3):
	res = [{a: {b: c}}
           for (a, b, c) in zip(test_list1, test_list2, test_list3)]
	return res
"
selling price	"def find_profit_or_loss(cp, sp):
	if cp > sp:
        return 'loss', cp - sp
	elif cp < sp:
        return 'profit', sp - cp
	else:
        return 'no profit or loss', 0
"
68 Write a Python function to find the length of the last word.	"def length_of_last_word(s):
	words = s.split()
	if len(words) == 0:
        return 0
	return len(words[-1])
"
write a Python function to Remove all duplicates from a given string	"def removeDuplicate(str):
	s = set(str)
	s = """".join(s)
	print(""Without Order:"", s)
	t = """"
	for i in str:
        if(i in t):
            pass
        else:
            t = t + i
	print(""With Order:"", t)


str1 = ""geeksforgeeks""
removeDuplicate(str1)
"
16. Python program to find the factorial of a number.	"num = 7
factorial = 1


if num < 0:
	print(""Sorry, factorial does not exist for negative numbers"")
elif num == 0:
	print(""The factorial of 0 is 1"")
else:
	for i in range(1, num + 1):
        factorial = factorial * i
	print(""The factorial of"", num, ""is"", factorial)
"
18. python program to compare strings	"def compare_using_equals(n):
	a = 'a long string that is not intered' * 200
	b = 'a long string that is not intered' * 200
	for i in range(n):
        if a == b:
            pass
"
first half values in one line and the last half values in one line.	"tp = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
tp1 = tp[:5]
tp2 = tp[5:]
print(tp1)
print(tp2)
"
Write a Python program to find the first repeated character in a given string	"def first_repeated_char(str1):
	for index, c in enumerate(str1):
        if str1[:index + 1].count(c) > 1:
            return c
	return ""None""
"
write a python function to find the factors of a number	"

def print_factors(x):
	print(""The factors of"", x, ""are:"")
	for i in range(1, x + 1):
        if x % i == 0:
            print(i)


num = 63
print_factors(num)
"
Write a function to merge dictionaries	"def merge1():
	test_list1 = [{""a"": 1, ""b"": 4}, {""c"": 10, ""d"": 15},
                  {""f"": ""gfg""}]
	test_list2 = [{""e"": 6}, {""f"": 3, ""fg"": 10, ""h"": 1},
                  {""i"": 10}]
	print(""The original list 1 is : "" + str(test_list1))
	print(""The original list 2 is : "" + str(test_list2))
	for idx in range(0, len(test_list1)):
        id_keys = list(test_list1[idx].keys())
        for key in test_list2[idx]:

            if key not in id_keys:
                test_list1[idx][key] = test_list2[idx][key]

	print(""The Merged Dictionary list : "" + str(test_list1))
"
dictionary input	"def flatten_dict(dd, separator='_', prefix=''):
	flattened = {prefix + separator + k if prefix else k: v
                 for kk, vv in dd.items()
                 for k, v in flatten_dict(vv, separator, kk).items()
                 } if isinstance(dd, dict) else {prefix: dd}
	return flattened
"
Write a  python program to print the last element of a list	"list1 = ['p', 'r', 'o', 'b', 'e']


print(list1[-1])
"
list or tuple or string and returns the new sorted sequence	"def sort_and_merge(l1, l2):
	new_list = []
	i = 0
	j = 0
	l1_len = len(l1)
	l2_len = len(l2)
	while (i <= l1_len - 1) and (j <= l2_len - 1):
        if l1[i] < l2[j]:
            new_list.append(l1[i])
            i += 1
        else:
            new_list.append(l2[j])
            j += 1
	if i <= (l1_len - 1):
        new_list += l1[i:]
	if j <= (l2_len - 1):
        new_list += l2[j:]
	return new_list


def recursive_merge_sort(list_to_be_sorted):
	final_list = []
	first = 0
	last = len(list_to_be_sorted)
	if last <= 1:
        final_list.extend(list_to_be_sorted)
	else:
        mid = last // 2
        l1 = recursive_merge_sort(list_to_be_sorted[:mid])
        l2 = recursive_merge_sort(list_to_be_sorted[mid:])
        final_list.extend(sort_and_merge(l1, l2))
	return final_list
"
second one into the first	"a = {""a"": 1, ""b"": 3}
b = {""c"": 1, ""d"": 3}
a.update(b)
"
keep only the items that are present in both sets	"x = {""apple"", ""banana"", ""cherry""}
y = {""google"", ""microsoft"", ""apple""}


x.intersection_update(y)
print(f""Duplicate Value in Two set:{x}"")
"
value using any() + map() + lambda	"test_tup = (10, 4, 5, 6, None)
res = any(map(lambda ele: ele is None, test_tup))
print(""Does tuple contain any None value ? : "" + str(res))
"
"""name tag"":"	"my_tup = (1,)
print(id(my_tup))
my_tup += (4,)
print(id(my_tup))
my_tup = my_tup + (5,)
print(id(my_tup))
"
write a python program to print binary ones complement on a variable	"a = 60
ones_complement_a = ~a
print(ones_complement_a)
"
Write a Python program to sort (ascending) a dictionary by value.	"d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}


print({k: v for k, v in sorted(d.items(), key=lambda x: x[1])})
"
write a python program to print a list in reverse	"a = [1, 2, 3]
print(a[::-1])
"
Write a function to return the median of numbers in a list	"def cal_median(num_list: list) -> float:
	if num_list:
        if len(num_list) % 2 != 0:
            return sorted(num_list)[int(len(num_list) / 2) - 1]
        else:
            return (sorted(num_list)[int(len(num_list) / 2) - 1] + sorted(num_list)[int(len(num_list) / 2)]) / 2
	else:
        return None
"
write a Python function to print even length words in a string	"

def printWords(s):
	s = s.split(' ')

	for word in s:
        if len(word) % 2 == 0:
            print(word)


s = ""i am muskan""
printWords(s)
"
set2, but not both	"set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
print(set1.symmetric_difference(set2))
"
11 print how many keys are in a dictionary python	"a = {'foo': 42, 'bar': 69}
print(len(a))
"
distance of object and distance of image from lense	"def cal_focal_length_of_lense(u: float, v: float) -> float:
	return (u * v) / (u + v)
"
Generate  random String of length 5	"import random
import string


def randomString(stringLength):
	
	letters = string.ascii_letters
	return ''.join(random.choice(letters) for i in range(stringLength))


print(""Random String is "", randomString(5))
"
46. Python Program to Remove Punctuations From a String	"

punctuations = '''!()-[]{};:'""\\,<>./?@#$%^&*_~'''


my_str = ""Hello!!!, he said ---and went.""
"
Convert decimal number to octal	"print('%o,' % (8))
"
write a python function that joins strings in a list and returns the result	"def join_string_parts(str_list):
	return "" "".join(str_list)
"
4 write a python function to print the factorial of a number	"

def factorial(x):
	prod = 1
	for i in range(1, x + 1):
        prod *= i

	return prod
"
removed item	"my_list1 = [4, 3, 2, 9, 10, 44, 1, 9, 12]
index = 4
print(f""Sum of two list:,{my_list1.pop(index)}"")
"
76 Write a Python function to converting an integer to a string in any base.	"def to_string(n, base):
	conver_tString = ""0123456789ABCDEF""
	if n < base:
        return conver_tString[n]
	else:
        return to_string(n // base, base) + conver_tString[n % base]
"
numbers in [5,6,77,45,22,12,24].	"li = [5, 6, 77, 45, 22, 12, 24]
li = [x for x in li if x % 2 != 0]
print(li)
"
Write a python function that Counts the Number of Blank Spaces in a Text File	"

def count_blank_space(fname):
	k = 0
	with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            for i in words:
                for letter in i:
                    if(letter.isspace):
                        k = k + 1
	return k
"
Generate weighted random numbers	"import random
randomList = random.choices(
	range(
        10, 40, 5), cum_weights=(
        5, 15, 10, 25, 40, 65), k=6)
print(randomList)
"
of two user provided positive integers.	"

def gcd(num1, num2):
	gcd = 1
	if num1 % num2 == 0:
        return num2
	for k in range(int(num2 / 2), 0, -1):
        if num1 % k == 0 and num2 % k == 0:
            gcd = k
            break
	return gcd
"
Define a class which has at least two methods:	"class InputOutString(object):
	def __init__(self):
        self.s = """"

	def getString(self):
        self.s = input()

	def printString(self):
        print(self.s.upper())


strObj = InputOutString()
strObj.getString()
strObj.printString()
"
Generate a random n-dimensional array of float numbers	"import numpy
random_float_array = numpy.random.rand(2, 2)
print(""2 X 2 random float array in [0.0, 1.0] \n"", random_float_array, ""\n"")
"
Write python program to find whether-number-power-two	"def is_power_of_two(n):
	
	if n <= 0:
        return False
	else:
        return n & (n - 1) == 0


n = int(input('Enter a number: '))


if is_power_of_two(n):
	print('{} is a power of two.'.format(n))
else:
	print('{} is not a power of two.'.format(n))
"
Bubble Sort	"

a = [2, 3, 8, 9, 2, 4, 6]
for i in range(0, len(a)):
	for j in range(0, len(a) - i - 1):
        if(a[j] > a[j + 1]):
            temp = a[j]
            a[j] = a[j + 1]
            a[j + 1] = temp
"
write a Python Program to Find the Square Root	"

num = 8


num_sqrt = num ** 0.5
print('The square root of %0.3f is %0.3f' % (num, num_sqrt))
"
"write a python program using ""all"" function"	"print(all([False, True, False, False]))
"
using cmath.polar() method	"num = cmath.polar(1)
print(num)
"
python program for vertical concatenating of mqatrix	"def vertical_concatenation():
	test_list = [
        [""this"", ""is""],
        [""program"", ""for""],
        [""vertical"", ""concatenation""]]
	print(""The original list : "" + str(test_list))
	res = []
	N = 0
	while N != len(test_list):
        temp = ''
        for idx in test_list:
            try:
                temp = temp + idx[N]
            except IndexError:
                pass
        res.append(temp)
        N = N + 1
	res = [ele for ele in res if ele]
	print(""List after column Concatenation : "" + str(res))


vertical_concatenation()
"
time in this cosmos.	"

def get_uuid():
	return uuid.uuid4()
"
times.	"from timeit import Timer
t = Timer(""for i in range(100):1+1"")
print(t.timeit())
"
the string, ignoring all other characters	"import re


inputStr = ""English = 78 Science = 83 Math = 68 History = 65""
markList = [int(num) for num in re.findall(r'\b\d+\b', inputStr)]
totalMarks = 0
for mark in markList:
	totalMarks += mark


percentage = totalMarks / len(markList)
print(""Total Marks is:"", totalMarks, ""Percentage is "", percentage)
"
list of numbers until the list becomes empty.	"num = [10, 20, 30, 40, 50, 60, 70, 80, 90]
len_list = len(num)
position = 3 - 1
idx = 0
while len_list > 0:
	idx = (idx + position) % len_list
	print(num.pop(idx))
	len_list -= 1
"
write a python program to implement Queue	"from collections import deque


class Queue():
	

	def __init__(self, max_size=10):
        

        self._queue = deque(maxlen=max_size)

	def enqueue(self, item):
        

        self._queue.append(item)

	def dequeue(self):
        

        return self._queue.pop()
"
write Python code to convert radian to degree	"def Convert(radian):
	pi = 3.14159
	degree = radian * (180 / pi)
	return degree


radian = 5
print(""degree ="", (Convert(radian)))
"
letters in a string	"sentence = 'The Quick Brown Fox'
lowercase = 0
uppercase = 0
for c in sentence:
	if c.isupper():
        uppercase += 1
	elif c.islower():
        lowercase += 1
	else:
        pass
print(f'Lowercase: {lowercase}, Uppercase: {uppercase}')
"
write a program to shuffle and print the list [3,6,7,8].	"from random import shuffle
li = [3, 6, 7, 8]
shuffle(li)
print(li)
"
a new list	"list1 = [1, 2, 3, 4, 5]
list2 = [5, 4, 3, 2, 1]
sum_list = [a + b for (a, b) in zip(list1, list2)]
print(sum_list)
"
81 Write a Python program to convert a given Bytearray to Hexadecimal string.	"def bytearray_to_hexadecimal(list_val):
	result = ''.join('{:02x}'.format(x) for x in list_val)
	return(result)
"
List using list comprehension + list slicing	"

test_list = ['Manjeets', 'Akashs', 'Akshats', 'Nikhils']


print(""The original list : "" + str(test_list))


K = 4


res = [sub[: len(sub) - K] for sub in test_list]


print(""The list after removing last characters : "" + str(res))
"
occurrence of an input from the list	"list1 = [5, 20, 15, 20, 25, 50, 20]


def removeValue(sampleList, val):
	return [value for value in sampleList if value != val]


resList = removeValue(list1, 20)
print(resList)
"
is input by a sequence of comma-separated numbers.	"values = input()
numbers = [x for x in values.split("","") if int(x) % 2 != 0]
print("","".join(numbers))
"
series in a given list	"def cal_total_res_in_series(res_list: list) -> float:
	return sum(res_list)
"
three-digit number and print the result.	"

import random


n = random() * 900 + 100
n = int(n)
print(n)


a = n // 100
b = (n // 10) % 10
c = n % 10


print(a + b + c)
"
41 how to sort a list in python using lambda	"data = [(""Apples"", 5, ""20""), (""Pears"", 1, ""5""), (""Oranges"", 6, ""10"")]


data.sort(key=lambda x: x[0])
"
write a program to extract string of N size and having K distict characters	"

str1 = 'GoodisalwaysGoood'

N = 3

K = 2

res = []


for idx in range(0, len(str1) - N + 1):

	if (len(set(str1[idx: idx + N])) == K):
        res.append(str1[idx: idx + N])

print(""Extracted Strings : "" + str(res))
"
the sum and average	"
L = [4, 5, 1, 2, 9, 7, 10, 8]

count = 0

for i in L:
	count += i


avg = count / len(L)

print(""sum = "", count)
print(""average = "", avg)
"
33 write a python function to flatten nested lists	"

def flatten(lis):
	for item in lis:
        if isinstance(item, Iterable) and not isinstance(item, str):
            for x in flatten(item):
                yield x
        else:
            yield item
"
write a Python function To Calculate Volume OF Cylinder	"pi = 22 / 7


def volume(r, h):
	vol = pi * r * r * h
	return vol


r = 5
h = 8


print(""Volume Of Cylinder = "", volume(r, h))
"
write a program to find length of list	"l = [1, 2, 3, 4, 5]
print(len(l))
"
write a python functionto test the equality of the float numbers	"def float_equality_testing(a, b):

	rel_tol = 1e-12
	abs_tol = 1e-05
	return abs(a - b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)
"
print it	"
test_dict = {""Gfg"": 5, ""is"": 8, ""Best"": 10, ""for"": 8, ""Geeks"": 9}

print(""The original dictionary is : "" + str(test_dict))

updict = {""Gfg"": 10, ""Best"": 17}
d = {}
for key in test_dict.keys():
	if key in updict:
        d.update({key: updict[key]})
	else:
        d.update({key: test_dict[key]})
print(d)
"
22 function to print marsh code equivalent from string.	"def encode_marsh(sen: str):
	char_to_dots = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',
                    'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',
                    'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',
                    'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',
                    'Y': '-.--', 'Z': '--..', ' ': ' ', '0': '-----',
                                      '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....',
                                      '6': '-....', '7': '--...', '8': '---..', '9': '----.',
                                      '&': '.-...', ""'"": '.----.', '@': '.--.-.', ')': '-.--.-', '(': '-.--.',
                                      ':': '---...', ',': '--..--', '=': '-...-', '!': '-.-.--', '.': '.-.-.-',
                                      '-': '-....-', '+': '.-.-.', '""': '.-..-.', '?': '..--..', '/': '-..-.'
                    }
	for i in sen:
        print(char_to_dots[i.upper()])
"
and print it	"

test_str = '5x6, 9x10, 7x8'
"
write a python program to drop microseconds from datetime.	"

import datetime
dt = datetime.datetime.today().replace(microsecond=0)
dt
"
Subtract a week from a given date	"from datetime import datetime, timedelta
given_date = datetime(2020, 2, 25)
days_to_subtract = 7
res_date = given_date - timedelta(days=days_to_subtract)
print(res_date)
"
check if all char in the string are alphabetic	"word = ""Hello World""
check = word.isalpha()
print(f""All char are alphabetic?:{check}"")
"
order	"def sort_descending(list_to_be_sorted):
	return sorted(list_to_be_sorted, reverse=True)
"
write python function to detect if a number is even number	"def is_even(num):
	return((num % 2) == 0)
"
are inputs to this function.	"def filter_with_key_value(list_of_dicts, key, value):
	return list(filter(lambda x: x.get(key) == value, list_of_dicts))
"
insensitive )	"def palindrome_str_check(value: str):
	
	if isinstance(value, str):
        print(value.lower() == value[::-1].lower())
	else:
        raise ValueError('Invalid Input')
"
lists of the same size	"

def rss(lst1, lst2):
	diff = [lst1[x] - lst2[x] for x in range(len(lst1))]
	return sum(list(map(lambda x: x ** 2, diff)))
"
string in lexicographic sorted order.	"def get_ordered_permutations(word, k):
	[print(''.join(x)) for x in sorted(list(permutations(word, int(k))))]
"
rate r and time in years y	"def get_ci(p: float, r: float, t: float, n: float) -> float:
	return round(p * ((1 + (r / (n * 100)))**(n * t)) - p, 2)
"
write a python program to print the difference in days between two dates	"from datetime import date
date1 = date(2020, 10, 25)
date2 = date(2020, 12, 25)
print(f'Difference between dates: {(date2 - date1).days}')
"
62 custom counter function	"def custom_counter():
	
	x = 0

	def inner():
        nonlocal x
        x += 1
        print(f' Switch or button is called {x} times')
	return inner
"
combined path string	"import os


def path_join(PARENT_DIR, DIR):
	joined_path = os.path.join(PARENT_DIR, DIR)
	return joined_path


path_join(""C:/"", ""DATA"")
"
Write a Python program to sort a tuple of tuples by 2nd item	"tuple1 = (('a', 23), ('b', 37), ('c', 11), ('d', 29))
tuple1 = tuple(sorted(list(tuple1), key=lambda x: x[1]))
print(tuple1)
"
Write a function to return the lateral surface area of a cylinder	"def cal_cylinder_lat_surf_area(height, radius):
	pi = 3.14
	return 2 * pi * radius * height
"
Write a Python program to access a function inside a function	"def test(a):
	def add(b):
        nonlocal a
        a += 1
        return a + b
	return add


func = test(4)
print(func(4))
"
write a function to check if a upper case letter exists in a given string	"

def check_upper(str1):

	for char in str1:
        k = char.isupper()
        if k == True:
            return True
	if(k != 1):
        return False
"
Python function to check whether a number is divisible by another number	"def multiple(m, n):
	return True if m % n == 0 else False


print(multiple(20, 5))
print(multiple(7, 2))
"
Write a function to return the cartisian distance between two points	"def cal_cart_distance(x1: float, y1: float, x2: float, y2: float) -> float:
	return ((x1 - x2)**2 + (y1 - y2)**2)**(1 / 2)
"
write a python program to print a list in sorted order	"basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
print(sorted(basket))
"
"write a python program that would print ""Hello World"""	"print(""Hello World"")
"
lines after making all characters in the sentence capitalized.	"lines = []
while True:
	s = raw_input()
	if s:
        lines.append(s.upper())
	else:
        break
for sentence in lines:
	print(sentence)
"
element is a Tuple  and print it	"
li = [4, 5, 6, 10, (1, 2, 3), 11, 2, 4]
count = 0
for i in li:
	if isinstance(i, tuple):
        break
	count = count + 1
print(f'count of element till tuple is encountered {count}')
"
write a python program to make use of regular expression for matching	"

print(
	'Find the characters in the given string:',
	re.findall(
        r'[a-z]+',
        '123FOO456',
        flags=re.IGNORECASE))
"
Write a python function to remove spaces from a given string	"def remove_spaces_from_string(string):
	return string.replace(' ', '')
"
88 write a python program to print Dissimilar Elements in Tuples	"
test_tup1 = (3, 4, 5, 6)
test_tup2 = (5, 7, 4, 10)

print(""The original tuple 1 : "" + str(test_tup1))
print(""The original tuple 2 : "" + str(test_tup2))
c = tuple()
c = tuple(set(test_tup1) ^ set(test_tup2))
print(f'Dissimilar element tuple is {c}')
"
Find the middle element of a random number list	"my_list = [4, 3, 2, 9, 10, 44, 1]
print(""mid value is "", my_list[int(len(my_list) / 2)])
"
needs to print all values except the first 5 elements in the list.	"import requests


def get_encoding(url):
	data = requests.get(url)
	return data.encoding
"
Butterfly on Jun 14 2020 Donate	"data = [7, 7, 7, 7]
print(*data, sep='')
"
write a python function to Calculate the date of n days from the given date.	"

from datetime import datetime, timedelta


def add_days(n, d=datetime.today()):
	return d + timedelta(n)
"
Write a python function to find Area Of Rectangle	"def areaRectangle(a, b):
	return (a * b)
"
Circle class has a method which can compute the area.	"class Circle(object):
	def __init__(self, r):
        self.radius = r

	def area(self):
        return self.radius**2 * 3.14


aCircle = Circle(2)
print(aCircle.area())
"
44. python function for finding the derivative of sine angle	"def dsine(angle):
	

	return math.cos(angle)
"
given stocks for yesterday	"

def get_max_profit(stock_prices):
	max_profit = 0

	for outer_time in range(len(stock_prices)):

        for inner_time in range(len(stock_prices)):
            earlier_time = min(outer_time, inner_time)
            later_time = max(outer_time, inner_time)

            earlier_price = stock_prices[earlier_time]
            later_price = stock_prices[later_time]

            potential_profit = later_price - earlier_price

            max_profit = max(max_profit, potential_profit)

	return max_profit
"
write a function that return space count	"
def count_space(str1):

	count = 0

	for i in range(0, len(str1)):

        if str1[i] == "" "":
            count += 1

	return count
"
write a python function to repeat calls to function with specified arguments	"def repeatfunc(func, times=None, *args):
	from itertools import starmap, repeat
	if times is None:
        return starmap(func, repeat(args))
	return starmap(func, repeat(args, times))
"
Python program to compute distance between two points	"def points(x1, x2):
	import math
	p1 = list(x1)
	p2 = list(x2)
	distance = math.sqrt(((p1[0] - p2[0]) ** 2) + ((p1[1] - p2[1]) ** 2))
	print(distance)


points((2, 3), (4, 5))
"
strings. Print the original and final lists.	"
test_list = ['gfg', '	', ' ', 'is', '			', 'best']

print(""The original list is : "" + str(test_list))

res = [ele for ele in test_list if ele.strip()]

print(""List after filtering non-empty strings : "" + str(res))
"
into a dictioinary	"def list_to_dict(list1, list2):
	return dict(zip(list1, list2))
"
write a python program to print transpose a matrix and print	"X = [[12, 7],
     [4, 5],
     [3, 8]]


result = [[0, 0, 0],
          [0, 0, 0]]


for i in range(len(X)):
	for j in range(len(X[0])):
        result[j][i] = X[i][j]


for r in result:
	print(r)
"
write a python program to print the sum of first n numbers	"n = 10
sum = 0
while n > 0:
	sum += n
	n -= 1
print(sum)
"
list using square brackets	"a = [[2, 4, 6, 8],
     [1, 3, 5, 7],
     [8, 6, 4, 2],
     [7, 5, 3, 1]]


for i in range(len(a)):
	for j in range(len(a[i])):
        print(a[i][j], end="" "")
	print()
"
write a Python3 program to demonstrate the use of replace() method	"

string = ""geeks for geeks geeks geeks geeks""


print(string.replace(""geeks"", ""Geeks""))


print(string.replace(""geeks"", ""GeeksforGeeks"", 3))
"
calculate and return the area of a triangle	"

def triangle_area(a, b, c):
	s = (a + b + c) / 2
	area = (s(s - a) * (s - b) * (s - c)) ** 0.5
	return(area)
"
40 write a function to return the nth fibonacci in python	"def Fibonacci(n):
	if n < 0:
        print(""Incorrect input"")
	elif n == 1:
        return 0
	elif n == 2:
        return 1
	else:
        return Fibonacci(n - 1) + Fibonacci(n - 2)
"
write a program to remove all duplicate characters from a string	"

str1 = ""what a great day!""
print("""".join(set(str1)))
"
they will turn 100 years old.	"

import datetime


name = input('Type your name:')


age = input('Type your age:')


now = datetime.datetime.now()


diff = 100 - int(age)




print('Hi ' + name + "" you will complete 100 years in "", (now.year + diff))
"
common keys	"dict1 = {'a': 12, 'for': 25, 'c': 9}
dict2 = {'Geeks': 100, 'geek': 200, 'for': 300}
for key in dict2:
	if key in dict1:
        dict2[key] = dict2[key] + dict1[key]
	else:
        pass
"
removed item	"my_list1 = [4, 3, 2, 9, 10, 44, 1, 9, 12]
index = 4
print(f""Sum of two list:,{my_list1.pop(index)}"")
"
2020-12	"def get_stock_prices(tickerSymbol='TSLA'):
	import yfinance as yf

	tickerData = yf.Ticker(tickerSymbol)

	tickerDf = tickerData.history(
        period='1d', start='2015-1-1', end='2020-12-20')

	print(tickerDf)
"
Convert string into a datetime object	"from datetime import datetime
date_string = ""Feb 25 2020  4:20PM""
datetime_object = datetime.strptime(date_string, '%b %d %Y %I:%M%p')
print(datetime_object)
"
divisible by 7, between a given range 0 and n.	"

def putNumbers(n):
	i = 0
	while i < n:
        j = i
        i = i + 1
        if j % 7 == 0:
            yield j


for i in reverse(100):
	print(i)
"
write a python function that returns every nth element in a list	"

def every_nth(lst, nth):
	return lst[nth - 1::nth]
"
27. Python Program to Convert Decimal to Hexadecimal	"dec = 344
print(""The decimal value of"", dec, ""is:"")
print(hex(dec), ""in hexadecimal."")
"
write a program to remove the leading and trailing characters	"txt = "",,,,,rrttgg.....banana....rrr""
x = txt.strip("",.grt"")
print(x)
"
write a list comprehension for number and its cube	"

l = [1, 2, 3, 4, 5, 6, 7, 8, 9]
print([x**3 for x in l])
"
make it suitable for caseless comparison	"my_str = my_str.casefold()
"
Write a function to calculate volume of Square Pyramid	"def volumeSquare(b, h):
	return (0.33) * b * b * h
"
string in single traversal.	"def moveSpaces(str1):
	no_spaces = [char for char in str1 if char != ' ']
	space = len(str1) - len(no_spaces)
	result = ' ' * space
	return result + ''.join(no_spaces)
"
Variable	"

x = 5
y = 10


x, y = y, x
print(""x ="", x)
print(""y ="", y)
"
Convert two lists into a dictionary	"ItemId = [54, 65, 76]
names = [""Hard Disk"", ""Laptop"", ""RAM""]
itemDictionary = dict(zip(ItemId, names))
print(itemDictionary)
"
print the number	"class Number:
	def __init__(self, num):
        self.num = num

	def inputNum(self):
        self.num = int(input(""Enter an integer number: ""))

	def printNum(self):
        print(self.num)
"
Write Python function to check if a string is palindrome or not	"def isPalindrome(s):
	return s == s[::-1]
"
write a Python program to demonstrate working of Convert String to tuple list	"

test_str = ""(1, 3, 4), (5, 6, 4), (1, 3, 6)""


print(""The original string is : "" + test_str)


res = []
temp = []
for token in test_str.split("", ""):
	num = int(token.replace(""("", """").replace("")"", """"))
	temp.append(num)
	if "")"" in token:
        res.append(tuple(temp))
        temp = []


print(f""List after conversion from string : {res}"")
"
Pick a random character from a given String	"import random


name = 'pynative'
char = random.choice(name)
print(""random char is "", char)
"
list for the below list	"

def selection_sort(alist):
	for i in range(0, len(alist) - 1):
        smallest = i
        for j in range(i + 1, len(alist)):
            if alist[j] < alist[smallest]:
                smallest = j
        alist[i], alist[smallest] = alist[smallest], alist[i]


alist = [2, 3, 5, 6, 4, 5]
selection_sort(alist)
print('Sorted list: ', end='')
print(alist)
"
return the modified text	"def caesar_cipher(text, shift=1):
	alphabet = string.ascii_lowercase
	shifted_alphabet = alphabet[shift:] + alphabet[:shift]
	table = str.maketrans(alphabet, shifted_alphabet)
	return text.translate(table)
"
returns the list and the deleted element	"def delete_last_element(list_to_be_processed):
	deleted_element = list_to_be_processed.pop()
	return list_to_be_processed, deleted_element
"
write a python program to check if the number is an Armstrong number or not	"

num = 663
sum = 0


temp = num
while temp > 0:
	digit = temp % 10
	sum += digit ** 3
	temp //= 10


if num == sum:
	print(num, ""is an Armstrong number"")
else:
	print(num, ""is not an Armstrong number"")
"
result is 3x4	"result = [[0, 0, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]]
"
93 write a python function to find One's compliment of a number	"

import math


def OnesComplement(num):
	bits = int(math.floor(math.log(num) / math.log(2)) + 1)
	return ((1 << bits) - 1) ^ num
"
index 1 to 4	"

list1 = [11, 5, 17, 18, 23, 50]

del list1[1:5]

print(*list1)
"
their Values and print it	"

test_list = [{1: 3, 4: 5, 3: 5}, {1: 7, 10: 1, 3: 10}, {1: 100}, {8: 9, 7: 3}]


def func(test_list):
	return sum(list(test_list.values()))


for i in test_list:
	test_list.sort(key=func)
print(test_list)
"
Write a python program to print all pair combinations of 2 tuples.	"

test_tuple1 = (4, 5)
test_tuple2 = (7, 8)

res = [(a, b) for a in test_tuple1 for b in test_tuple2]
res = res + [(a, b) for a in test_tuple2 for b in test_tuple1]

print(""The filtered tuple : "" + str(res))
"
53 write a python function which checks if a number is a perfect square	"import math


def is_perfect_square(num):
	sq_root = round(math.sqrt(num))
	if num == sq_root ** 2:
        return True
	else:
        return False
"
write a python program to print common elements in two lists	"list_a = [1, 2, 3, 4, 5, 6, 7]
list_b = [2, 4, 6, 8, 10]
print(f'Common elements: { set(list_a).intersection(set(list_b)) }')
"
of Tuple and print it	"
test_list = [(""GF ! g !"", 5), (""! i ! s"", 4), (""best !!"", 10)]
print(""The original list is : "" + str(test_list))

K = ""!""
res = [(sub[0].replace(K, ''), sub[1]) for sub in test_list]
print(""The filtered tuples : "" + str(res))
"
write a python function to advance the iterator n-steps ahead	"def consume(iterator, n=None):
	import itertools
	from collections import deque
	
	
	if n is None:
        
        deque(iterator, maxlen=0)
	else:
        
        next(itertools.islice(iterator, n, n), None)
"
86 Write a Python program to find the second smallest number in a list.	"def second_smallest(numbers):
	if (len(numbers) < 2):
        return
	if ((len(numbers) == 2) and (numbers[0] == numbers[1])):
        return
	dup_items = set()
	uniq_items = []
	for x in numbers:
        if x not in dup_items:
            uniq_items.append(x)
            dup_items.add(x)
	uniq_items.sort()
	return uniq_items[1]
"
Sort the list in ascending order	"my_list = [4, 3, 2, 9, 10, 44, 1]
my_list.sort()
print(f""Ascending Order list:,{my_list}"")
"
"""roundrobin('ABC', 'D', 'EF') --> A D E B F C"""	"def roundrobin(*iterables):
	from itertools import islice, cycle
	
	num_active = len(iterables)
	nexts = cycle(iter(it).__next__ for it in iterables)
	while num_active:
        try:
            for next in nexts:
                yield next()
        except StopIteration:
            
            num_active -= 1
            nexts = cycle(islice(nexts, num_active))
"
write s python program to print the difference of two sets	"A = {1, 2, 3, 4, 5}
B = {4, 5, 6, 7, 8}
print(A - B)
"
Write a Python Program to Check If Two Numbers are Amicable Numbers	"

def amicable_no_check(x, y):
	sum1 = 0
	sum2 = 0
	for i in range(1, x):
        if x % i == 0:
            sum1 += i
	for j in range(1, y):
        if y % j == 0:
            sum2 += j
	if(sum1 == y and sum2 == x):
        return True
	else:
        return False
"
Write a Python Program to Find the Intersection of Two Lists	"

def main(alist, blist):
	def intersection(a, b):
        return list(set(a) & set(b))
	return intersection(alist, blist)
"
37 Write a python program to calculate the LCM and HCF of two given numbers	"def hcf(x1, x2):
	if x1 == 0:
        return x2
	else:
        return hcf(x2 % x1, x1)


def lcm_hcf(x1, x2):
	h_c_f = hcf(x1, x2)
	lcm = x1 * x2 / h_c_f
	return lcm, h_c_f


l, h = lcm_hcf(18, 12)


print(f""LCM : {l}, HCF: {h}"")
"
Write a python program to print sum of number digits in List	"test_list = [12, 67, 98, 34]
res = []
for ele in test_list:
	sum = 0
	for digit in str(ele):
        sum += int(digit)
	res.append(sum)
print(""List Integer Summation : "" + str(res))
"
print it	"

def get_max(sub):
	return max(sub)


test_list = [(4, 5, 5, 7), (1, 3, 7, 4), (19, 4, 5, 3), (1, 2)]

print(""The original list is : "" + str(test_list))
test_list.sort(key=get_max, reverse=True)
print(""Sorted Tuples : "" + str(test_list))
"
based of distance travelled in given time	"def cal_time(distance: float, speed: float) -> float:
	return distance / speed
"
30 write a program to check whether the string is a palindrome or not	"def isPalindrome(s):
	return s == s[::-1]


s = ""malayalam""
ans = isPalindrome(s)

if ans:
	print(""Yes"")
else:
	print(""No"")
"
number	"def dlog(x):

	return 1 / x
"
using +	"print('str1 + str2 = ', str1 + str2)
"
94 write a program to print double quotes with the string variable	"str1 = ""Hello world""


print(""\""%s\"""" % str1)
print('""%s""' % str1)
print('""{}""'.format(str1))
"
from the same	"foo = input(""Enter String : "")
print(""Duplicates Removed"", """".join(set(foo)))
"
45. Python Program to Check Whether a String is Palindrome or Not	"

my_str = 'aIbohPhoBiA'
my_str = my_str.casefold()
rev_str = reversed(my_str)

if list(my_str) == list(rev_str):
	print(""The string is a palindrome."")
else:
	print(""The string is not a palindrome."")
"
Bubble sort in python	"list1 = [1, 5, 3, 4]


for i in range(len(list1) - 1):
	for j in range(i + 1, len(list1)):
        if(list1[i] > list1[j]):
            temp = list1[i]
            list1[i] = list1[j]
            list1[j] = temp
print(""Bubble Sorted list: "", list1)
"
5. write a program to find and print the largest among three numbers	"

num1 = 10
num2 = 12
num3 = 14
if (num1 >= num2) and (num1 >= num3):
	largest = num1
elif (num2 >= num1) and (num2 >= num3):
	largest = num2
else:
	largest = num3
print(f'largest:{largest}')
"
elements and print the final list	"given_list = [8, 6, 0, 4, 1, 6, 7, 8, 9, 10, 4, 5]
if len(given_list) % 2 == 0:
	res_list = []
	for i in range(len(given_list) - 2):
        res_list.append(given_list[i] + given_list[i + 2])
	print(f'Resultant list is {res_list}')
"
write a function to rotate string right by a given length	"

def rotate_right(input, d):

	Rfirst = input[0: len(input) - d]
	Rsecond = input[len(input) - d:]
	return (Rsecond + Rfirst)
"
write a python program to add whitespaces both sides of a string	"

s = 'The Little Price'


width = 20
s3 = s.center(width)


print(s3)
"
values and prints this list.	"test_dict = {'Geeks': 2, 'for': 1, 'CS': 3}
res = list(sum(sorted(test_dict.items(), key=lambda x: x[1]), ()))
print(""List after conversion from dictionary : "", res)
"
Write a Python program to convert two equal length sets to dictionary	"keys = {'Ten', 'Twenty', 'Thirty'}
values = {10, 20, 30}
sampleDict = dict(zip(keys, values))
print(sampleDict)
"
9. Python Program to Convert Celsius To Fahrenheit	"celsius = 37.5
fahrenheit = (celsius * 1.8) + 32
print(
	'%0.1f degree Celsius is equal to %0.1f degree Fahrenheit' %
	(celsius, fahrenheit))
"
write a function to reverse words of string	"

def rev_sentence(sentence):

	words = sentence.split(' ')

	reverse_sentence = ' '.join(reversed(words))

	return reverse_sentence
"
write a python program to swaps keys and values in a dict	"

_dict = {""one"": 1, ""two"": 2}
"
or fahrenheit to celsius	"def temp_converter(temp, temp_given_in='f'):
	if temp_given_in.lower() == 'f':
        return (temp - 32) * (5 / 9)
	else:
        return (temp * 9 / 5) + 32
"
the list.	"import math


def bin_search(li, element):
	bottom = 0
	top = len(li) - 1
	index = -1
	while top >= bottom and index == -1:
        mid = int(math.floor((top + bottom) / 2.0))
        if li[mid] == element:
            index = mid
        elif li[mid] > element:
            top = mid - 1
        else:
            bottom = mid + 1

	return index
"
Write a Python function to return star numbers	"def star_number(n):
	return 6 * n * (n - 1) + 1
"
34 write a python function to convert a string  into xml	"import xml.etree.ElementTree as ET


root = ET.fromstring(country_data_as_string)
"
in comma separated form with a given n input by console.	"def f(n):
	if n == 0:
        return 0
	elif n == 1:
        return 1
	else:
        return f(n - 1) + f(n - 2)


n = int(raw_input())
values = [str(f(x)) for x in range(0, n + 1)]
print("","".join(values))
"
write a python program to print unique numbers in a list	"numbers = [1, 2, 2, 3, 4, 4, 5, 6]
unique = set(numbers)
print(f'Unique numbers: {list(unique)}')
"
Write a python program to Check and print if string is palindrome using Stack	"

class Stack:
	def __init__(self):
        self.items = []

	def is_empty(self):
        return self.items == []

	def push(self, data):
        self.items.append(data)

	def pop(self):
        return self.items.pop()


s = Stack()
text = ""ABA""

for character in text:
	s.push(character)

reversed_text = ''
while not s.is_empty():
	reversed_text = reversed_text + s.pop()

if text == reversed_text:
	print('The string is a palindrome.')
else:
	print('The string is not a palindrome.')
"
the Longest One	"

a = ['the', 'tsai', 'python']
max1 = len(a[0])
temp = a[0]
for i in a:
	if(len(i) > max1):
        max1 = len(i)
        temp = i
print(""The word with the longest length is:"")
print(temp)
"
29. Python Program to Concatenate Strings	"

str1 = input(""Please Enter the First  String : "")
str2 = input(""Please Enter the Second String : "")


concat1 = str1 + str2
print(""The Final String After Python String Concatenation = "", concat1)


concat2 = str1 + ' ' + str2
print(""The Final After String Concatenation with Space = "", concat2)
"
Write a Python function to Check Whether a Given Year is a Leap Year	"

def leapyear_check(year):
	if(year % 4 == 0 and year % 100 != 0 or year % 400 == 0):
        return True
	else:
        return False
"
write a python function to repeat a given string n times	"def repeat_string(string, frequency):
	return string * frequency
"
write a python program to handle exception when a given value is less than 10	"

def check(x):
	if x < 10:
        raise ValueError('x should not be less than 10!')
	else:
        return x


check(9)
"
write a python function to convert a number from octal to decimal	"
def octalToDecimal(n):
	num = n
	dec_value = 0
	base = 1
	temp = num
	while (temp):
        last_digit = temp % 10
        temp = int(temp / 10)
        dec_value += last_digit * base
        base = base * 8

	return dec_value
"
two integers.	"def Recurgcd(a, b):
	low = min(a, b)
	high = max(a, b)

	if low == 0:
        return high
	elif low == 1:
        return 1
	else:
        return Recurgcd(low, high % low)
"
Write a Python function to reverse words in a string.	"def reverse_string_words(text):
	for line in text.split('\n'):
        return(' '.join(line.split()[::-1]))
"
possible number of intersection	"def countMaxIntersect(n):
	return int(n * (n - 1) / 2)
"
write a program for floating pointwrite a program	"print(f""Round off value : {round(51.6)}"")
"
Write a function to return the perimeter of a triangle	"def cal_perimeter_triangle(s1, s2, s3):
	return s1 + s2 + s3
"
write a python function to convert list of strings to list of integers	"def stringlist_to_intlist(sList):
	return(list(map(int, sList)))
"
Matrix Using loop + pop()	"

test_dict = {'gfg': [4, 5, 6],
             'is': [8, 8, 9],
             'CS': [1, 3, 8],
             'Maths': [1, 2]}

print(""The original dictionary : "" + str(test_dict))


que_list = ['gfg', 'CS', 'Maths']


new_data = [test_dict.pop(ele) for ele in que_list]
test_dict[""merge_key""] = new_data

print(""The dictionary after merging : "" + str(test_dict))
"
Write a Python function to sum all the numbers in a list	"def sum(numbers):
	total = 0
	for x in numbers:
        total += x
	return total


print(sum((8, 2, 3, 0, 7)))
"
40. Python Program to Add Two Matrices	"X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]


Y = [[5, 8, 1],
     [6, 7, 3],
     [4, 5, 9]]


result = [[0, 0, 0],
          [0, 0, 0],
          [0, 0, 0]]


for i in range(len(X)):
	for j in range(len(X[0])):
        result[i][j] = X[i][j] + Y[i][j]


for r in result:
	print(r)
"
Python program to test whether passed letter is vowel or not	"

def is_vowel(char):
	all_vowels = 'aeiou'
	return char in all_vowels


print(is_vowel('c'))
print(is_vowel('e'))
"
13 write a program to convert into dictionary	"def Convert(tup, di):
	for a, b in tup:
        di.setdefault(a, []).append(b)
	return di


tups = [(""A"", 10), (""B"", 20), (""C"", 30),
        (""D"", 40), (""E"", 50), (""F"", 60)]
dictionary = {}
print(Convert(tups, dictionary))
"
s=''	"for i in test_list:
	s = ''
	for j in i:
        s += j + ' '
	l.append(s)
print(l)
"
parallel in a given list	"def cal_total_cap_in_parallel(cap_list: list) -> float:
	return sum(cap_list)
"
Different Lists	"

a = [2, 3, 8, 9, 2, 4, 6]
even = []
odd = []
for j in a:
	if(j % 2 == 0):
        even.append(j)
	else:
        odd.append(j)
print(""The even list"", even)
print(""The odd list"", odd)
"
40. Python Program to Add Two Matrices	"X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]


Y = [[5, 8, 1],
     [6, 7, 3],
     [4, 5, 9]]


result = [[0, 0, 0],
          [0, 0, 0],
          [0, 0, 0]]
"
print only those numbers which are divisible of 5	"def findDivisible(numberList):
	for num in numberList:
        if (num % 5 == 0):
            print(num)
"
write a python program to print the difference in days between two dates	"from datetime import date
date1 = date(2020, 10, 25)
date2 = date(2020, 12, 25)
print(f'Difference between dates: {(date2 - date1).days}')
"
comprehension and returns the result	"def square_numbers(nums):
	return [i * i for i in nums]
"
19. Python Program to Check Armstrong Number (for 3 digits)	"

num = int(input(""Enter a number: ""))
sum = 0
temp = num
while temp > 0:
	digit = temp % 10
	sum += digit ** 3
	temp //= 10
if num == sum:
	print(num, ""is an Armstrong number"")
else:
	print(num, ""is not an Armstrong number"")
"
write a python function to find leftmost item greater than or equal to x	"def find_ge(a, x):
	from bisect import bisect_left
	i = bisect_left(a, x)
	if i != len(a):
        return a[i]
	raise ValueError
"
23. Python Program To Display Powers of 2 Using Anonymous Function	"
terms = 10
result = list(map(lambda x: 2 ** x, range(terms)))
print(""The total terms are:"", terms)
for i in range(terms):
	print(""2 raised to power"", i, ""is"", result[i])
"
Write a python program to check if a number is positive or negative	"num = 15
if num > 0:
	print(f""Positive number"")
elif num == 0:
	print(f""Zero"")
else:
	print(f""Negative number"")
"
write a python program to find the biggest character in a string	"def bigChar(word): return reduce(
	lambda x, y: x if ord(x) > ord(y) else y, word)
"
and values	"def create_deck_of_cards(values: list, suits: list):
	card_deck = []
	for i in range(52):
        tup = (values[i], suits[i])
        card_deck.append(tup)
	return card_deck
"
write a python program to print the factors of a number	"num = 320
for i in range(1, num + 1):
	if num % i == 0:
        print(i)
"
write a function to find common words from two strings	"

def commonWords(str1, str2):

	count = {}

	for word in str1.split():
        count[word] = count.get(word, 0) + 1

	for word in str2.split():
        count[word] = count.get(word, 0) + 1

	return [word for word in count if count[word] > 1]
"
Write a function that returns tan value of the input	"def tan(x: float) -> float:
	import math
	return math.tan(x)
"
print the last 5 elements in the list.	"def printList():
	li = list()
	for i in range(1, 21):
        li.append(i**2)
	print(li[-5:])
"
Evaluate a string and a number	"print(bool(""Hello""))
print(bool(15))
"
given string using re library	"import re


def extract_not_alpha(my_string):
	return re.sub('[^a-zA-Z\\s]+', """", my_string)
	
"
77 Write a Python function to calculate the geometric sum of n-1.	"def geometric_sum(n):
	if n < 0:
        return 0
	else:
        return 1 / (pow(2, n)) + geometric_sum(n - 1)
"
Write a recursive function to calculate the sum of numbers from 0 to 10	"def calculateSum(num):
	if num:
        return num + calculateSum(num - 1)
	else:
        return 0


res = calculateSum(10)
print(res)
"
driver code	"a = [1, 2, 3, 4, 5]
b = [5, 6, 7, 8, 9]
print(common_data(a, b))

a = [1, 2, 3, 4, 5]
b = [6, 7, 8, 9]
print(common_data(a, b))
"
Write a Python program to Find the day of week of a given date	"from datetime import datetime
given_date = datetime(2020, 7, 26)
print(given_date.strftime('%A'))
"
Write a function to Filter String with substring at specific position	"def f_substring():
	test_list = ['program ', 'to', 'filter', 'for', 'substring']
	print(""The original list is : "" + str(test_list))
	sub_str = 'geeks'
	i, j = 0, 5
	res = list(filter(lambda ele: ele[i: j] == sub_str, test_list))
	print(""Filtered list : "" + str(res))
"
prints a new list	"list1 = [1, 2, 3, 4, 5]
list2 = [5, 4, 3, 2, 1]
prod_list = [a * b for (a, b) in zip(list1, list2)]
print(prod_list)
"
Write a function that returns log of a function	"def log(x: float) -> float:
	import math
	return math.log(x)
"
14 how to add element at first position in array python	"x = [1, 3, 4]
a = 2
x.insert(1, a)
"
and prints it.	"test_list = [{'END': [5, 6, 5]}, {'is': [10, 2, 3]}, {'best': [4, 3, 1]}]
res = [{} for idx in range(len(test_list))]
idx = 0
for sub in test_list:
	for key, val in sub.items():
        for ele in val:
            res[idx][key] = ele
            idx += 1
        idx = 0
print(""Records after conversion : "" + str(res))
"
Subtract a week from a given date	"from datetime import datetime, timedelta
given_date = datetime(2020, 2, 25)
days_to_subtract = 7
res_date = given_date - timedelta(days=days_to_subtract)
print(res_date)
"
transaction over Repetations	"def time_it(fn, *args, repetitons=1, **kwargs):
	import time
	total_time = []

	for _ in range(repetitons):
        start_time = time.perf_counter()
        fn(*args, **kwargs)
        end_time = time.perf_counter()
        ins_time = end_time - start_time
        total_time.append(ins_time)
	return sum(total_time) / len(total_time)
"
Pascal case	"

test_str = 'geeksforgeeks_is_best'
print(""The original string is : "" + test_str)


res = test_str.replace(""_"", "" "").title().replace("" "", """")
print(""The String after changing case : "" + str(res))
"
valid or not	"def date_validation(inputdate: str):
	
	import datetime
	dd, mm, year = inputdate.split('/')
	isValidDate = True
	try:
        datetime.datetime(int(year), int(mm), int(dd))
	except ValueError:
        isValidDate = False
	if(isValidDate):
        print(""Input Date is Valid"")
	else:
        print(""Input Date is invalid"")
"
Write a Python function to convert a string list to a normal list type	"import ast


def convert_string_to_list(str_lst):
	return ast.literal_eval(str_lst)
"
write a python program to print equal length of string	"

print('ab'.zfill(5))
"
write a python function to check if a given string is a palindrome	"

def isPalindrome(s):
	return s == s[::-1]
"
ideal gas equation Pressure P and Volume V given	"

def find_temp_of_ideal_gas(pressure: float, volume: float, n: float) -> float:
	r = 8.3145  
	return (pressure * volume) / n * r
"
12 function to check leap year	"def check_leap_year(year: int):
	if not year % 4:
        print('Leap Year')
	else:
        print('Not a leap year')
"
22. python program to find if given co-ordinates are inside circle	"from random import uniform
from math import sqrt


def random_shot(rad):
	r_x = uniform(-rad, rad)
	r_y = uniform(-rad, rad)

	if sqrt(r_x**2 + r_y**2) <= rad:
        is_in_circle = True
	else:
        is_in_circle = False

	return r_x, r_y, is_in_circle
"
than a given input.	"test_dict = {'tsai': 4, 'random_key': 2, 'foo': 3, 'bar': 'END'}
K = 3
res = {key: val for key, val in test_dict.items()
       if type(val) != int or val > K}
print(""Values greater than K : "", res.keys())
"
Write a python function to get the volume of a sphere with radius as input	"def sphere_volume(radius):
	volume = 4.0 / 3.0 * 3.14 * radius ** 3
	return volume
"
write a python function to collect data into fixed-length chunks or blocks	"def grouper(iterable, n, fillvalue=None):
	from itertools import zip_longest
	
	args = [iter(iterable)] * n
	return zip_longest(*args, fillvalue=fillvalue)
"
Write a Python function to print the root of the quadratic equation	"def quadratic_root(A, B, C):
	import math
	d = ((B**2) - 4 * A * C)

	if d >= 0:
        s = (-B + (d)**0.5) / (2 * A)
        p = (-B - (d)**0.5) / (2 * A)
        print(math.floor(s), math.floor(p))
	else:
        print('The roots are imaginary')
"
write a python function to calculate the volume of ellipsoid	"

def volumeOfEllipsoid(r1, r2, r3):
	return 1.33 * 22 * r1 * r2 * r3 / 7
"
numbers is even	"def is_prod_even(num1, num2):
	sum = num1 + num2
	return not sum % 2
"
and prints a dictionary value list where each key is a category.	"test_list = [(1, 3), (1, 4), (2, 3), (3, 2), (5, 3), (6, 4)]
res = {}
for i, j in test_list:
	res.setdefault(j, []).append(i)
print(""The dictionary converted from tuple list : "" + str(res))
"
Python program to find the digits which are absent in a given mobile number.	"def absent_digits(n):
	all_nums = set([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
	n = set([int(i) for i in n])
	n = n.symmetric_difference(all_nums)
	n = sorted(n)
	return n


print(absent_digits([9, 8, 3, 2, 2, 0, 9, 7, 6, 3]))
"
String Using a Dictionary	"def countword(test_string):
	l = []
	l = test_string.split()
	wordfreq = [l.count(p) for p in l]
	return(dict(zip(l, wordfreq)))
"
87 write a python program to Count the elements till first tuple and print it	"

test_tup = (1, 5, 7, (4, 6), 10)
print(""The original tuple : "" + str(test_tup))
count = 0
for i in test_tup:
	if isinstance(i, tuple):

        break
	count = count + 1
print(f'count of element till first tuple is {count}')
"
string and numbers	"test_list = [5, 8, ""gfg"", 8, (5, 7), 'is', 2]
res = 1
for ele in test_list:
	try:
        res *= int(ele)
	except:
        pass
print(""Product of integers in list : "" + str(res))
"
Write a function that returns cosine value of the input	"def derivative_cos(x: float) -> float:
	import math
	return -(math.sin(x))
"
Write a lambda function to add two numbers	"

def add(a, b): return a + b
"
write a python function to print N-bonacci series	"
def bonacciseries(n, m):
	a = [0] * m
	a[n - 1] = 1
	for i in range(n, m):
        for j in range(i - n, i):
            a[i] = a[i] + a[j]
	for i in range(0, m):
        print(a[i], end="" "")
"
Write a Python Program to Check if a Number is a Strong Number	"

def strong_no_check(num):
	sum1 = 0
	temp = num
	while(num):
        i = 1
        f = 1
        r = num % 10
        while(i <= r):
            f = f * i
            i = i + 1
        sum1 = sum1 + f
        num = num // 10
	if(sum1 == temp):
        return True
	else:
        return False
"
of digits only	"Text = input(""Enter Text: "")
Digits = """"
for i in Text:
	if i.isnumeric():
        Digits += i + "" ""
print(""Digits used in given strings are: {}"".format(Digits))
"
check if the number of terms is valid	"if nterms <= 0:
	print(""Please enter a positive integer"")
elif nterms == 1:
	print(""Fibonacci sequence upto"", nterms, "":"")
	print(n1)
else:
	print(""Fibonacci sequence:"")
	while count < nterms:
        print(n1)
        nth = n1 + n2
        
        n1 = n2
        n2 = nth
        count += 1
"
write a python program to print todays date	"tday = datetime.date.today()
print(tday)
"
write a python function to return only odd numbers in a list	"def filter_odd(nums):
	return list(filter(lambda num: num % 2 == 1, nums))
"
write a python function to convert bcd to decimal	"
def bcdToDecimal(s):
	length = len(s)
	check = 0
	check0 = 0
	num = 0
	sum = 0
	mul = 1
	rev = 0
	for i in range(length - 1, -1, -1):
        sum += (ord(s[i]) - ord('0')) * mul
        mul *= 2
        check += 1
        if (check == 4 or i == 0):
            if (sum == 0 and check0 == 0):
                num = 1
                check0 = 1
            else:
                num = num * 10 + sum
            check = 0
            sum = 0
            mul = 1
	while (num > 0):
        rev = rev * 10 + (num % 10)
        num //= 10
	if (check0 == 1):
        return rev - 1
	return rev

 


def sexyprime(l, r):
	prime = [True] * (r + 1)
	p = 2
	while(p * p <= r):
        if (prime[p] == True):
            for i in range(p * 2, r + 1, p):
                prime[i] = False
        p = p + 1
	for i in range(l, r - 6 + 1):
        if (prime[i] and prime[i + 6]):
            print(""("", i, "","", i + 6, "")"", end="""")

 


def check_duck(num):
	n = len(num)
	i = 0
	while (i < n and num[i] == '0'):
        i = i + 1
	while (i < n):
        if (num[i] == ""0""):
            return True
        i = i + 1
	return False

 
 


def isBuzz(num):

	return (num % 10 == 7 or num % 7 == 0)
"
"Print a unicode string ""hello world""."	"unicodeString = u""hello world!""
print(unicodeString)
"
write a python function to return the area of a circle with given radius	"import math


def area_circle(radius):
	return math.pi * radius * radius
"
Write a Python Program to Check if a Number is a Prime Number	"

def prime_no_check(a):
	k = 0
	for i in range(2, a // 2 + 1):
        if(a % i == 0):
            k = k + 1
	if(k <= 0):
        return True
	else:
        return False
"
and returns it	"def make_negative_zero(items):
	return [0 if item < 0 else item for item in items]
"
write a python program which prints a random number	"n = random.random()
print(n)
"
This function divides two numbers	"def divide(x, y):
	return x / y


print(""Select operation."")
print(""1.Add"")
print(""2.Subtract"")
print(""3.Multiply"")
print(""4.Divide"")


while True:
	
	choice = input(""Enter choice(1/2/3/4): "")

	
	if choice in ('1', '2', '3', '4'):
        num1 = float(input(""Enter first number: ""))
        num2 = float(input(""Enter second number: ""))

        if choice == '1':
            print(num1, ""+"", num2, ""="", add(num1, num2))

        elif choice == '2':
            print(num1, ""-"", num2, ""="", subtract(num1, num2))

        elif choice == '3':
            print(num1, ""*"", num2, ""="", multiply(num1, num2))

        elif choice == '4':
            print(num1, ""/"", num2, ""="", divide(num1, num2))
        break
	else:
        print(""Invalid Input"")
"
write a program to count characters surrounding vowels	"

str1 = 'week after week the numbers are increasing'

res = 0
vow_list = ['a', 'e', 'i', 'o', 'u']


for idx in range(1, len(str1) - 1):

	if str1[idx] not in vow_list and (
            str1[idx - 1] in vow_list or str1[idx + 1] in vow_list):
        res += 1

if str1[0] not in vow_list and str1[1] in vow_list:
	res += 1

if str1[-1] not in vow_list and str1[-2] in vow_list:
	res += 1


print(""Characters around vowels count : "" + str(res))
"
29 print current day in python	"from datetime import date
today = date.today()
print(""Today's date:"", today)
"
write a python program to calculate the average	"

list1 = [1, 3, 4, 5]
average = (sum(list1)) / len(list1)
print(f""the average score is:  {average} "")
"
write a python program that prints the circumference of a circle	"import math
radius = 10
print(f'Area: {2 * math.pi * radius}')
"
of birth	"

from datetime import date


def calculate_age(dtob):
	today = date.today()
	return today.year - dtob.year - ((today.month, today.day)
                                     < (dtob.month, dtob.day))
"
23 how to check nth prime in python	"x = int(input())
n, c = 1, 0
while(c < x):
	n += 1
	for i in range(2, n + 1):
        if(n % i == 0):
            break
	if(i == n):
        c = c + 1
"
31 get the most common number in python	"mode((1, 2, 4, 4, 5, 4, 4, 2, 3, 8, 4, 4, 4))
"
Removal all the characters other than integers from string	"str1 = 'I am 25 years and 10 months old'
res = """".join([item for item in str1 if item.isdigit()])
print(res)
"
Write a function to Subtracts two lists element wise	"def sub_listelements(l1: list, l2: list):
	return [i - j for i, j in zip(l1, l2)]
"
Write a Python Program to print the Sum of First N Natural Numbers	"

n = 7
sum1 = 0
while(n > 0):
	sum1 = sum1 + n
	n = n - 1
print(""The sum of first n natural numbers is"", sum1)
"
write a python program to delete an dictionary element	"

a = {1: 5, 2: 3, 3: 4}
a.pop(3)
print(a)
"
write a program to print 5 odd random numbers between 100 and 200	"import random
print(random.sample([i for i in range(10, 100) if i % 2 == 1], 5))
"
whitespace as input to print the words composed of digits only.	"import re
s = raw_input()
print(re.findall(""\\d+"", s))
"
list or tuple or string and returns the new sorted sequence	"def sort_and_merge(l1, l2):
	new_list = []
	i = 0
	j = 0
	l1_len = len(l1)
	l2_len = len(l2)
	while (i <= l1_len - 1) and (j <= l2_len - 1):
        if l1[i] < l2[j]:
            new_list.append(l1[i])
            i += 1
        else:
            new_list.append(l2[j])
            j += 1
	if i <= (l1_len - 1):
        new_list += l1[i:]
	if j <= (l2_len - 1):
        new_list += l2[j:]
	return new_list


def recursive_merge_sort(list_to_be_sorted):
	final_list = []
	first = 0
	last = len(list_to_be_sorted)
	if last <= 1:
        final_list.extend(list_to_be_sorted)
	else:
        mid = last // 2
        l1 = recursive_merge_sort(list_to_be_sorted[:mid])
        l2 = recursive_merge_sort(list_to_be_sorted[mid:])
        final_list.extend(sort_and_merge(l1, l2))
	return final_list
"
write a python program that reverses an integer and prints it	"num = 12345
reversed = int(str(num)[::-1])
print(reversed)
"
write a python program to check is all are alphanumeric	"print('ab'.isalpha())
"
into an equivalent decimal number	"

def bin2dec(num):
	return int(num, 2)
"
Write a program to merge two python dictionaries	"x = {'key1': 'val1', 'key2': 'val2'}
y = {'key3': 'val3', 'key4': 'val4'}
z = {**x, **y}  
"
equation ax**2 + bx + c = 0	"def prod_of_roots(a: float, b: float):
	if a:
        return -b / a
	else:
        return None
"
write a python program to print the factorial of number	"num = int(input(""Please enter a number ""))
fact = 1
a = 1
while a <= num:
	fact *= a
	a += 1
print(""The factorial of "", num, "" is "", fact)
"
character as separator	"myTuple = (""John"", ""Peter"", ""Vicky"")
x = ""#"".join(myTuple)
print(x)
"
python program to find power of number using recursion	"def power(N, P):
	if (P == 0 or P == 1):
        return N
	else:
        return (N * power(N, P - 1))


print(power(5, 2))
"
Write Python Program to Convert Celsius To Fahrenheit	"celsius = 37.5
fahrenheit = (celsius * 1.8) + 32
print(
	'%0.1f degree Celsius is equal to %0.1f degree Fahrenheit' %
	(celsius, fahrenheit))
"
Every Word in the File	"fname = input(""Enter file name: "")
with open(fname, 'r') as f:
	for line in f:
        l = line.title()
        print(l)
"
write a python program to transpose a matrix using a nested loop	"

X = [[12, 7],
     [4, 5],
     [3, 8]]


result = [[0, 0, 0],
          [0, 0, 0]]


for i in range(len(X)):
	for j in range(len(X[0])):
        result[j][i] = X[i][j]


for r in result:
	print(r)
"
Driver program	"if __name__ == ""__main__"":
	input = 'Hello World'
	heterogram(input)
"
write a list comprehension for printing rows into columns and vv	"

l = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
print([[row[i] for row in l] for i in range(3)])
"
objects of mass m1 and m2 and distance of r between them	"def cal_gforce(mass1: float, mass2: float, distance: float) -> float:
	g = 6.674 * (10)**(-11)
	return (g * mass1 * mass2) / (distance**2)
"
write a python function for Named Entity Recognizer using NLTK	"def ner_checker(texts):
	all_set = set()

	def nltk_ner_check(texts):
        for i, text in texts:
            for entity in nltk.ne_chunk(nltk.pos_tag(nltk.word_tokenize(text))):
                if isinstance(entity, nltk.tree.Tree):
                    etext = "" "".join([word for word, tag in entity.leaves()])
                    
                    all_set.add(etext)

	nltk_ner_check(texts=texts)
	return all_set
"
write a python function to calculate compound interest	"

def compound_interest(principle, rate, time):
	Amount = principle * (pow((1 + rate / 100), time))
	CI = Amount - principle
	print(f""Compound interest is {CI}"")
"
and multiple of 5, between 1500 and 2700 and print the result.	"

nl = []
for x in range(1500, 2700):
	if (x % 7 == 0) and (x % 5 == 0):
        nl.append(str(x))
print(""\n"".join(nl))
"
list for the below list	"

def insertion_sort(alist):
	for i in range(1, len(alist)):
        temp = alist[i]
        j = i - 1
        while (j >= 0 and temp < alist[j]):
            alist[j + 1] = alist[j]
            j = j - 1
        alist[j + 1] = temp


alist = [2, 3, 5, 6, 4, 5]
insertion_sort(alist)
print('Sorted list: ', end='')
print(alist)
"
write a program to print 5 even random numbers between 10 and 100	"import random
print(random.sample([i for i in range(10, 100) if i % 2 == 0], 5))
"
write a python program to check it contains any space	"print(''''''.isspace())
"
"with a hyphen ""-"""	"def replacetext(string):
	string = string.replace("" "", ""-"")
	return string
"
collection of distinct numbers	"def permute(nums):
	result_perms = [[]]
	for n in nums:
        new_perms = []
        for perm in result_perms:
            for i in range(len(perm) + 1):
                new_perms.append(perm[:i] + [n] + perm[i:])
                result_perms = new_perms
	return result_perms
"
Write a python class to welcome	"

class Welcome(object):

	
	def __init__(self, name):
        self.name = name  

	

	def welcome(self, up=False):
        if up:
            print('Hi, %s!' % self.name.upper())
        else:
            print('Hey, %s' % self.name)


w = Welcome('Geeta')
w.welcome(up=True)
"
write a python function to read a text file and return the result	"def read_file(filepath='test.txt'):
	with open(filepath, 'r') as file_reader:
        f_read = file_reader.read()
	return f_read


read_file()
"
Write a program to swap two variables inplace	"a, b = b, a
"
Write a Python function that returns biggest character in a string	"

def biggest_char(string):
	
	def biggest_chr(x, y): return x if ord(x) > ord(y) else y
	return reduce(biggest_chr, string)
"
numbers and display the sum in reversed form.	"def reverse_sum(n1, n2):
	return int(str(int(str(n1)[::-1]) + int(str(n2)[::-1]))[::-1])
"
Write a function to get list of profanity words from Google profanity URL	"def profanitytextfile():
	url = ""https://github.com/RobertJGabriel/Google-profanity-words/blob/master/list.txt""
	html = urlopen(url).read()
	soup = BeautifulSoup(html, features=""html.parser"")

	textlist = []
	table = soup.find('table')
	trs = table.find_all('tr')
	for tr in trs:
        tds = tr.find_all('td')
        for td in tds:
            textlist.append(td.text)
	return textlist
"
number is palindrome	"

def binaryPallindrome(num):
	binary = bin(num)
	binary = binary[2:]
	return binary == binary[-1::-1]
"
Sort the string list alphabetically	"

thislist = [""orange"", ""mango"", ""kiwi"", ""pineapple"", ""banana""]
thislist.sort()
print(f""Sorted List:{thislist}"")
"
of all elements in list	"lst = eval(input(""Enter list : ""))
mean = 0
sum = 0
for i in lst:
	sum = sum + i
print("" The mean of given list is :"", sum)
"
those alphabetically	"def SortTuple(tup):

	n = len(tup)

	for i in range(n):
        for j in range(n - i - 1):

            if tup[j][0] > tup[j + 1][0]:
                tup[j], tup[j + 1] = tup[j + 1], tup[j]

	return tup
"
write a python function to check if a given string is a palindrome	"def is_palindrome(string):
	return string == string[::-1]
"
Write a function to determine the bits used by any number	"

def totalBits(n):
	return f'total number of bits used in {n} is : {len(bin(n)[2: ])}'
"
1. write a python program to add two numbers	"num1 = 1.5
num2 = 6.3
sum = num1 + num2
print(f'Sum: {sum}')
"
Write a python function to Count the Number of Lines in a Text File	"def check_lines():
	fname = input(""file name: "")
	num_lines = 0
	with open(fname, 'r') as f:
        for line in f:
            num_lines += 1
	print(""Number of lines = "", num_lines)
"
iterate through rows	"for i in range(len(X)):
	
	for j in range(len(X[0])):
        result[j][i] = X[i][j]


for r in result:
	print(r)
"
Write a function to return the area of an ellipse	"def cal_area_ellipse(minor, major):
	pi = 3.14
	return pi * (minor * major)
"
write a python function to return the cube of a number	"

def cube(num):
	return num * num * num
"
write a python program to do lstrip on string	"

print('xyyzxxyxyy'.lstrip('xyy'))
"
Write a python program to print square matrix in Z form	"

arr = [[4, 5, 6, 8],
       [1, 2, 3, 1],
       [7, 8, 9, 4],
       [1, 8, 7, 5]]

n = len(arr[0])

i = 0
for j in range(0, n - 1):
	print(arr[i][j], end="" "")

k = 1
for i in range(0, n):
	for j in range(n, 0, -1):
        if(j == n - k):
            print(arr[i][j], end="" "")
            break
	k += 1


i = n - 1
for j in range(0, n):
	print(arr[i][j], end="" "")
"
logger provided by the user.	"def exception_simulator(logger):
	try:
        raise ValueError
	except ValueError:
        logger.exception(""ValueError occured in the function"")
"
Write a python function to extract even length words in String	"def findevenlenthwords(test_str):
	res = []
	for ele in test_str.split():
        if len(ele) % 2 == 0:
            res.append(ele)
	return res
"
dictionaries.	"list_of_dicts = [{""key1"": ""val1"", ""Country"": ""India""},
                 {""Country"": ""USA"", ""foo"": ""bar""},
                 {""foo"": ""bar"", ""foo2"": ""bar2""}]
unique_keys = []
for d in list_of_dicts:
	for key in d:
        if key not in unique_keys:
            unique_keys.append(key)
print(f""Number of unique keys: {len(unique_keys)}"")
"
the given list and return None if the list is empty	"def largest_and_smallest(list_of_nums):
	if list_of_nums:
        return max(list_of_nums), min(list_of_nums)
	else:
        return
"
write a program to strips every vowel from a string provided	"

vowels = ('a', 'e', 'i', 'o', 'u')
input_string = ""awesome""
.join([x for x in input_string.lower() if x not in vowels])
"
87 clone of orginal list with two functionality i. iterating and sequence	"class CustomListIter:
	

	def __init__(self):
        self.list_ = [1, 2, 3, 4]

	def __len__(self):
        return len(self.list_)

	def __getitem__(self, i):
        if isinstance(i, int):
            if i < 0:
                i = len(self.list_) + i

            if i < 0 or i >= len(self.list_):
                raise IndexError('Invalid Input')
            else:
                return self.list_[i]

	def __iter__(self):
        return self.CustomListIterator(self)

	class CustomListIterator:
        def __init__(self, other):
            self.count = 0
            self.other = other

        def __iter__(self):
            return self

        def __next__(self):
            if self.count < len(self.other.list_):
                self.count += 1
                return self.other.list_[self.count]
            else:
                raise StopIteration
"
integer in binary	"

num = int(input(""Enter an integer number: ""))


bits = num.bit_length()


print(""bits required to store "", num, "" = "", bits)
print(""binary value of "", num, "" is = "", bin(num))
"
write a python function to convert list of strings to list of integers	"def stringlist_to_intlist(sList):
	return(list(map(int, sList)))
"
removing the 0th, 2nd, 4th,6th numbers in [12,24,35,70,88,120,155].	"li = [12, 24, 35, 70, 88, 120, 155]
li = [x for (i, x) in enumerate(li) if i % 2 != 0]
print(li)
"
write a Python function to check if a string is binary or not	"

def check2(string):

	t = '01'

	count = 0
	for char in string:

        if char not in t:
            count = 1
            break
        else:
            pass
	if count:
        print(""No, string is not binary"")
	else:
        print(""Yes, string is binary"")


string = ""001021010001010""


check2(string)
"
is the index and the value is the item in the list	"my_list = [1, 8, 1, 2, 2, 9]
my_dict = {key: value for key, value in enumerate(my_list)}
"
write a python program to multiply three numbers	"num1 = 1.5
num2 = 6.3
num3 = -2.3
product = num1 * num2 * num3
print(f'Product: {product}')
"
3x4 matrix	"Y = [[5, 8, 1, 2],
     [6, 7, 3, 0],
     [4, 5, 9, 1]]
"
write a python function to list all unique elements, preserving order	"def unique_everseen(iterable, key=None):
	from itertools import filterfalse
	
	
	seen = set()
	seen_add = seen.add
	if key is None:
        for element in filterfalse(seen.__contains__, iterable):
            seen_add(element)
            yield element
	else:
        for element in iterable:
            k = key(element)
            if k not in seen:
                seen_add(k)
                yield element
"
Generate  random String of length 5	"import random
import string


def randomString(stringLength):
	
	letters = string.ascii_letters
	return ''.join(random.choice(letters) for i in range(stringLength))


print(""Random String is "", randomString(5))
"
Write a function to return the area of a square	"def cal_area_square(side):
	return side**2
"
write a python function to calculate factorial of a given number	"

def factorial(n):
	fact = 1
	for num in range(2, n + 1):
        fact = fact * num
	return(fact)
"
memory it consumes	"import sys
string_var = 'string variable'
print(sys.getsizeof(string_var))
"
Write a Python Program to Concatenate Two Dictionaries Into One	"

def concat_dic(d1, d2):
	return d1.update(d2)
"
order	"def sort_descending(list_to_be_sorted):
	return sorted(list_to_be_sorted, reverse=True)
"
for the below list	"

def comb_sort(alist):
	def swap(i, j):
        alist[i], alist[j] = alist[j], alist[i]

	gap = len(alist)
	shrink = 1.3

	no_swap = False
	while not no_swap:
        gap = int(gap / shrink)

        if gap < 1:
            gap = 1
            no_swap = True
        else:
            no_swap = False

        i = 0
        while i + gap < len(alist):
            if alist[i] > alist[i + gap]:
                swap(i, i + gap)
                no_swap = False
            i = i + 1


alist = [2, 3, 5, 6, 4, 5]
comb_sort(alist)
print('Sorted list: ', end='')
print(alist)
"
38 write a python program to extract digits from Tuple list and print it	"

test_list = [(15, 3), (3, 9), (1, 10), (99, 2)]

print(""The original list is : "" + str(test_list))
s = []
k = ''
for i in test_list:
	for j in i:
        k += str(j)
print(list(set(k)))
"
check if the number of terms is valid	"if nterms <= 0:
	print(""Plese enter a positive integer"")
else:
	print(""Fibonacci sequence:"")
	for i in range(nterms):
        print(recur_fibo(i))
"
mathematic	"

E = {0, 2, 4, 6, 8}
N = {1, 2, 3, 4, 5}


print(""Union of E and N is"", E | N)
"
Write a python program to print all pair combinations of 2 tuples.	"

test_tuple1 = (4, 5)
test_tuple2 = (7, 8)

res = [(a, b) for a in test_tuple1 for b in test_tuple2]
res = res + [(a, b) for a in test_tuple2 for b in test_tuple1]

print(""The filtered tuple : "" + str(res))
"
number or not	"def power_checker(a, b):
	import math
	s = math.log(a, b)
	p = round(s)
	if (b**p) == a:
        return f'{a} is the power of {b}.'
	else:
        return f'{a} is NOT the power of {b}.'
"
50: 2, 30: 1}	"import collections
my_list = [10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]
print(""Original List : "", my_list)
ctr = collections.Counter(my_list)
print(""Frequency of the elements in the List : "", ctr)
"
20. Python Program to Check Armstrong Number (for 3 digits)	"num = 1634
order = len(str(num))
sum = 0
temp = num
while temp > 0:
	digit = temp % 10
	sum += digit ** order
	temp //= 10
if num == sum:
	print(num, ""is an Armstrong number"")
else:
	print(num, ""is not an Armstrong number"")
"
Create a list comprehension	"def listcompr(n=100000):
	my_list = [i for i in range(n) if i % 5 == 0]
	return my_list
"
of Tuple Values	"test_dict = {'END Program': (5, 6, 1), 'is': (8, 3, 2), 'best': (1, 4, 9)}
prod_list = []
for x in zip(*test_dict.values()):
	res = 1
	for ele in x:
        res *= ele
	prod_list.append(res)
	res = tuple(prod_list)
print(""The product from each index is : "" + str(res))
"
in a pair of strings	"

str1 = ""ababccd12@""
str2 = ""bb123cca1@""


matched_chars = set(str1) & set(str2)
print(""No. of matching characters are : "" + str(len(matched_chars)))
"
Write a Python function to return stella octangula numbers	"def stella_octangula_number(n):
	if n >= 0:
        return n * (2**n - 1)
"
both user provided lists.	"

def similarity(a, b):
	return [item for item in a if item in b]
"
Write a python program to check if a number is a Perfect number.	"n = int(input(""Enter any number: ""))
sum1 = 0
for i in range(1, n):
	if(n % i == 0):
        sum1 = sum1 + i
	if (sum1 == n):
        print(""The number is a Perfect number!"")
	else:
        print(""The number is not a Perfect number!"")
"
write a python function to find rightmost value less than or equal to x	"def find_le(a, x):
	from bisect import bisect_right
	i = bisect_right(a, x)
	if i:
        return a[i - 1]
	raise ValueError
"
Returns an integer value for the given character	"str = ""A""
val = ord(str)
print(f""Integer value for the given character?:{val}"")
"
write a python function to convert a list of characters to a string	"

def convert(s):
	str1 = """"
	return(str1.join(s))
"
11. python program to find whether a number is prime	"def test_prime(n):
	if (n == 1):
        return False
	elif (n == 2):
        return True
	else:
        for x in range(2, n):
            if(n % x == 0):
                return False
        return True
"
"remembering only the element just seen."""	"def unique_justseen(iterable, key=None):
	import operator
	from itertools import groupby
	return map(next, map(operator.itemgetter(1), groupby(iterable, key)))
"
1 write a program to get numbers = 1,3,11,42,12,4001	"from collections import Iterable
highestnumber = -999
for i in numbers:
	if i > highestnumber:
        highestnumber = i
print(numbers.index(highestnumber))
"
write a Python function to find sum of all items in a Dictionary	"

def returnSum(dict):

	sum = 0
	for i in dict.values():
        sum = sum + i

	return sum


dict = {'a': 100, 'b': 200, 'c': 300}
print(""Sum :"", returnSum(dict))
"
write a python program to add two matrices	"

X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]
Y = [[5, 8, 1],
     [6, 7, 3],
     [4, 5, 9]]
result = [[0, 0, 0],
          [0, 0, 0],
          [0, 0, 0]]
for i in range(len(X)):
	for j in range(len(X[0])):
        result[i][j] = X[i][j] + Y[i][j]
for r in result:
	print(r)
"
between 2000 and 3200 (both included).	"l = []
for i in range(2000, 3201):
	if (i % 7 == 0) and (i % 5 != 0):
        l.append(str(i))


print(','.join(l))
"
write a python function to return the factors of a number	"def get_factors(num):
	factors = []
	for i in range(1, num + 1):
        if num % i == 0:
            factors.append(i)
	return factors
"
write a program to print words frequncy in a given string	"

test_str = ""It is a great meal at a great restaurant on a great day""
print(""Original String: "" + str(test_str))
res = {key: test_str.count(key) for key in test_str.split()}
print(""The words frequency: "" + str(res))
"
90 show generator is faster than list	"def show_gen_fast():
	from timeit import timeit
	dt = timeit(""[num for num in fib(100) ]"", globals=globals(), number=1)
	return dt
"
write a python function to return powerset of iterable	"def powerset(iterable):
	
	from itertools import chain, combinations
	s = list(iterable)
	return chain.from_iterable(combinations(s, r) for r in range(len(s) + 1))


list(powerset([1, 2, 3]))
"
resistance is R and voltage is V	"def cal_current(resistance: float, voltage: float) -> float:
	return voltage / resistance
"
write a python program to print the minimum integer in a list of integers	"lst = [23, 10, 55, 43]
lst.sort()
min = lst[0]
"
write Python code to demonstrate to remove the tuples if certain criteria met	"

ini_tuple = [('b', 100), ('c', 200), ('c', 45),
             ('d', 876), ('e', 75)]


print(""intial_list"", str(ini_tuple))
result = [i for i in ini_tuple if i[1] <= 100]
print(""Resultant tuple list: "", str(result))
"
write a python function to load pickle data from a file	"def load_pickle_data(pickle_file):
	import pickle
	with open(pickle_file, 'rb') as f:
        data = pickle.load(f)
	return data
"
numbers	"

def median(list):
	list.sort()
	list_length = len(list)
	if list_length % 2 == 0:
        return (list[int(list_length / 2) - 1] + list[int(list_length / 2)]) / 2
	return float(list[int(list_length / 2)])
"
string and return the resultant list	"def nchar(list1, no):
	return [items[:no] + items[-no:] for items in list1]


list1 = [""ROHAN"", ""END""]
nchar(list1, 3)
"
driver code	"print(checkString('helloworld'))
print(checkString('helloworld2020'))
"
9 write a function to remove empty tuples from a list and print	"def remove_empty_tuple(num1: list):
	if isinstance(num1, list):
        modified = list(filter(None, num1))
        print(modified)
"
Write a Python function to count occurrence of a word in the given text	"def text_searcher(text, word):
	count = 0
	for w in text.split():
        if w == word:
            count = count + 1
	return count
"
28 write a program that return the first n numbers from a list	"

def sub_list(lst, ind):
	return lst[:ind]


print(sub_list([1, 2, 3, 4, 5, 56], 3))
"
either 2 or 3 and lies between 1 and 50.	"for i in range(0, 50):
	if((i % 2 != 0) & (i % 3 != 0)):
        print(i)
"
print it	"

string = ' asdga \t\r'
print(string.strip())
"
Write a function that returns length of the list	"

def list_length(l):
	return len(l)
"
Python program to create histogram from given list	"def histogram(items):
	for n in items:
        output = ''
        times = n
        while times > 0:
            output += '*'
            times = times - 1
        print(output)


histogram([2, 3, 6, 5])
"
97 write a program to copy odd lines of one file to another file	"

file1 = open('file1.txt', 'r')
file2 = open('file2.txt', 'w')


lines = file1.readlines()
type(lines)
for i in range(0, len(lines)):
	if(i % 2 != 0):
        file2.write(lines[i])


file1.close()
file2.close()


file1 = open('file1.txt', 'r')
file2 = open('file2.txt', 'r')


str1 = file1.read()
str2 = file2.read()


print(""file1 content..."")
print(str1)


print()  


print(""file2 content..."")
print(str2)


file1.close()
file2.close()
"
numbers until the list becomes empty	"def remove_nums(int_list):
	position = 3 - 1
	idx = 0
	len_list = (len(int_list))
	while len_list > 0:
        idx = (position + idx) % len_list
        print(int_list.pop(idx))
        len_list -= 1
"
33 write a python function to flatten nested lists	"from collections import Iterable


def flatten(lis):
	for item in lis:
        if isinstance(item, Iterable) and not isinstance(item, str):
            for x in flatten(item):
                yield x
        else:
            yield item
"
write a Python program to find Least Frequent Character in String	"

test_str = ""GeeksforGeeks""
print(""The original string is : "" + test_str)


all_freq = {}
for i in test_str:
	if i in all_freq:
        all_freq[i] += 1
	else:
        all_freq[i] = 1
res = min(all_freq, key=all_freq.get)


print(""The minimum of all characters in GeeksforGeeks is : "" + res)
"
write a function to execute a string containing Python code	"def execute_python_code(a_string):
	return exec(a_string)
"
write a python program to convert raw string integer inputs to integers	"

str_input = ""1 2 3 4 5 6""


int_input = map(int, str_input.split())


print(list(int_input))
"
write a python program to delete an element from a list	"

list = ['a', 'bc', 'd', 'e']
element = 'bc'
list.remove(element)
"
write a python function to print pyramid pattern	"def pyramid_pattern(symbol='*', count=4):
	for i in range(1, count + 1):
        print(' ' * (count - i) + symbol * i, end='')
        print(symbol * (i - 1) + ' ' * (count - i))
"
prints the set	"my_set = {1, 2, 3}
my_list = [4, 5, 6]
my_set.update(my_list)
print(my_set)
"
Write a function that returns sum of all odd elements in the list	"def sum_odd_elements(l: list):
	return sum([i for i in l if i % 2 == 1])
"
13 how to add a blank line in python	"print("""")
"
gas equation - Volume V, and Temperatue T are given	"def find_pressure_of_ideal_gas(volume: float, temp: float, n: float) -> float:
	r = 8.3145  
	return (n * r * temp) / volume
"
73 write a program to print a pattern of stars (*)	"

for row in range(0, 5):
	for column in range(0, row + 1):
        print(""*"", end="""")

	
	print('\r')
"
19. Python Program to Check Armstrong Number (for 3 digits)	"

num = int(input(""Enter a number: ""))
"
Test if string starts with H	"word = ""Hello World""
check = word.startswith('H')
print(f""String starts with H?:{check}"")
"
write a python function to return first n items of the iterable as a list	"def take(n, iterable):
	import itertools
	return list(itertools.islice(iterable, n))
"
write a python function to check if all elements in a list are unique.	"

def all_unique(lst):
	return len(lst) == len(set(lst))
"
[12,24,35,70,88,120,155].	"li = [12, 24, 35, 70, 88, 120, 155]
li = [x for x in li if x % 5 != 0 and x % 7 != 0]
print(li)
"
for identity	"a = 1
b = 1
print('a is b', bool(a is b))
c = 999
d = 999
print('c is d', bool(c is d))
"
write a program to add two matrix	"A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
B = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]


rowsA = len(A)
colsA = len(A[0])
rowsB = len(B)
colsB = len(B[0])
if rowsA != rowsB or colsA != colsB:
	raise ArithmeticError('Matrices are NOT the same size.')


C = []
while len(C) < rowsA:
	C.append([])
	while len(C[-1]) < colsB:
        C[-1].append(0.0)


for i in range(rowsA):
	for j in range(colsB):
        C[i][j] = A[i][j] + B[i][j]


print(""Added Array"")
for i in range(rowsA):
	row = '|'
	for b in range(colsA):
        row = row + ' ' + str(C[i][b])
	print(row + ' ' + '|')
"
from the following list.	"

datalist = [1452, 11.23, 1 + 2j, True, 'w3resource', (0, -1), [5, 12],
            {""class"": 'V', ""section"": 'A'}]
for item in datalist:
	print(""Type of "", item, "" is "", type(item))
"
Write a function that returns Gets the derivative of exponential of x	"def derivative_exp(x: float) -> float:
	import math
	return math.exp(x)
"
write a python function to return dictionary of two lists using zip	"def dict_using_comp(list1, list2):
	dict_using_comp = {key: value for (key, value) in zip(list1, list2)}
	return dict_using_comp
"
Returns the number of times the specified element appears in the list	"vowels = ['a', 'e', 'i', 'o', 'i', 'u']
count = vowels.count('i')
print('The count of i is:', count)
"
tuple and print it	"

test_tup1 = (10, 4, 5, 6)
test_tup2 = (5, 6, 7, 5)
s = tuple()
print(""The original tuple 1 : "" + str(test_tup1))
print(""The original tuple 2 : "" + str(test_tup2))

for i in range(0, len(test_tup1)):
	s += (test_tup1[i] ** test_tup2[i],)
print(s)
"
write a python program to strip all the vowels in a string	"string = ""Remove Vowel""
vowel = ['a', 'e', 'i', 'o', 'u']
.join([i for i in string if i not in vowel])
"
20 how to check if a list is a subset of another list	"if(all(x in test_list for x in sub_list)):
	flag = True
"
write a python program to print python version using sys	"import sys


print(f""{sys.version}"")
"
for 100 times.	"from timeit import Timer
t = Timer(""for i in range(100):1+1"")
print(t.timeit())
"
Write a python program to make a recursive function to get the sum	"def rec(n):
	if n == 0:
        return n
	return rec(n - 1) + n


n = int(input())
sum = rec(n)
print(sum)
"
a series of numbers and print the result	"

x = (1, 2, 3, 4, 5, 6, 7, 8, 9)
odd = even = 0
for i in x:
	if i % 2 == 0:
        even = even + 1
	else:
        odd = odd + 1

print(""Even Numbers are: "", even)
print(""Odd Numbers are: "", odd)
"
write a python program to convert two lists into dictionary	"

column_names = ['id', 'color', 'style']
column_values = [1, 'red', 'bold']
name_to_value_dict = dict(zip(column_names, column_values))
name_to_value_dict = {
	key: value for key,
	value in zip(
        column_names,
        column_values)}
name_value_tuples = zip(column_names, column_values)
name_to_value_dict = {}
for key, value in name_value_tuples:
	if key in name_to_value_dict:
        pass
	else:
        name_to_value_dict[key] = value
print(name_to_value_dict)
"
logical or logical and	"result = (2 or 3) * (5 and 7)
print('2 * 7 =', result)
"
list of sentence	"

def check(sentence, words):
	res = [all([k in s for k in words]) for s in sentence]
	return [sentence[i] for i in range(0, len(res)) if res[i]]
"
write a Python function to find the Area of Icosahedron	"

def findArea(a):

	area = 5 * 3 ** 0.5 * a * a
	return area


a = 5
print(""Area: "", findArea(a))
"
write a python function to pickle data to a file	"def pickle_data(data, pickle_file):
	import pickle
	with open(pickle_file, 'wb') as f:
        pickle.dump(data, f, pickle.HIGHEST_PROTOCOL)
	return None
"
printNationality.	"class American(object):
	@ staticmethod
	def printNationality():
        print(""America"")


anAmerican = American()
anAmerican.printNationality()
American.printNationality()
"
prints a new list	"list1 = [1, 2, 3, 4, 5]
list2 = [5, 4, 3, 2, 1]
prod_list = [a * b for (a, b) in zip(list1, list2)]
print(prod_list)
"
write a program to print the sine value of a number	"import math
num = 3
print(math.sin(num))
"
make a dictionary with each vowel a key and value 0	"count = {}.fromkeys(vowels, 0)
for char in ip_str:
	if char in count:
        count[char] += 1


print(count)
"
in console.	"def convert_to_str(n):
	print(str(n))
"
write a program to increment number which is at end of string	"

import re

str1 = 'count001'


res = re.sub(r'[0-9]+$',
             lambda x: f""{str(int(x.group())+1).zfill(len(x.group()))}"",
             str1)

print(""Incremented numeric String : "" + str(res))
"
and return height in feet and inches	"cm = int(input(""Enter the height in centimeters:""))
inches = 0.394 * cm
feet = 0.0328 * cm
print(""The length in inches"", round(inches, 2))
print(""The length in feet"", round(feet, 2))
"
calculating compound interest	"ci = p * (pow((1 + r / 100), t))
"
inclusive.	"import random
print(random.randrange(7, 16))
"
removing the 0th, 2nd, 4th,6th numbers in [12,24,35,70,88,120,155].	"li = [12, 24, 35, 70, 88, 120, 155]
li = [x for (i, x) in enumerate(li) if i % 2 != 0]
print(li)
"
write a python function that returns the input list sorted in ascending order	"def sort_ascending(list_to_be_sorted):
	return sorted(list_to_be_sorted)
"
length at the start and prints the modified list	"

def pad_arr_start(arr, pad_len):
	pad_arr = [0] * (pad_len - len(arr))
	pad_arr.extend(arr)
	return pad_arr


tmp = [1, 2, 3, 4, 5]
x = pad_arr_start(tmp, 10)
print(x)
"
Team Members: Santu Hazra, Manu Chauhan, Ammar Adil and Prakash Nishtala	"

import os
import nltk
import string
from collections import Counter
from itertools import permutations, combinations, combinations_with_replacement


letters = string.ascii_lowercase
"
Write a Python function to Find the Intersection of Two Lists	"def intersection(a, b):
	return list(set(a) & set(b))
"
write a python program to add two numbers	"num1 = 5465461
num2 = 8765468
sum = num1 + num2
print(f'Sum: {sum}')
"
using list comprehension	"

test_list1 = [{""HpY"": 22}, {""BirthdaY"": 2}, ]
test_list2 = [{""HpY"": 22}, {""BirthdaY"": 2}, {""Shambhavi"": 2019}]


print(""The original list 1 is : "" + str(test_list1))
print(""The original list 2 is : "" + str(test_list2))


res = [i for i in test_list1 if i not in test_list2] + [j for j in test_list2
                                                        if j not in test_list1]


print(""The set difference of list is : "" + str(res))
"
write a python function to check if a given string is symmetrical	"

def symmetry(a):

	n = len(a)
	flag = 0

	if n % 2:
        mid = n // 2 + 1
	else:
        mid = n // 2

	start1 = 0
	start2 = mid

	while(start1 < mid and start2 < n):

        if (a[start1] == a[start2]):
            start1 = start1 + 1
            start2 = start2 + 1
        else:
            flag = 1
            break

	return flag
"
write Python function to Clear the Rightmost Set Bit of a Number	"def clear_rightmost_set_bit(n):
	return n & (n - 1)
"
a range is given	"N = 20
number_list = [x for x in range(N) if x % 2 == 0]
print(f'List of Even Numbers:', number_list)
"
write a python program to print all prime numbers in a given interval	"lower = 900
upper = 1000
for num in range(lower, upper + 1):
	if num > 1:
        for i in range(2, num):
            if (num % i) == 0:
                break
	else:
        print(num)
"
Write a function to return the perimeter of a triangle	"def cal_perimeter_triangle(s1, s2, s3):
	return s1 + s2 + s3
"
Write a function to adds two lists element wise	"def adds_listelements(l1: list, l2: list):
	return [i + j for i, j in zip(l1, l2)]
"
write a python program to do selection sort	"

A = [64, 25, 12, 22, 11]


for i in range(len(A)):

	min_idx = i
	for j in range(i + 1, len(A)):
        if A[min_idx] > A[j]:
            min_idx = j

	A[i], A[min_idx] = A[min_idx], A[i]


print(""Sorted array"")
for i in range(len(A)):
	print(""%d"" % A[i])
"
write a python program to round up a number and print it	"

import math
x = 2.3
y = math.ceil(x)
print(y)
"
like in mathematic	"

E = {0, 2, 4, 6, 8}
N = {1, 2, 3, 4, 5}


print(""Intersection of E and N is"", E & N)
"
98 write a python function that calculates the midpoint between two numbers	"

def midpoint(a, b):
	lar = b if b > a else a
	sm = a if b > a else b

	return float(lar + sm) / 2
"
Write a function which can compute the factorial of a given numbers.	"def fact(x):
	if x == 0:
        return 1
	return x * fact(x - 1)


x = int(input())
print(fact(x))
"
	"num1 = 1.5
num2 = 6.3
sum = num1 + num2
print(f'Sum: {sum}')
"
Write a program to print bit wise AND of two numbers	"a = 60   
b = 13   


c = a & b  
print(""AND"", c)
"
write a python program to find the smallest multiple of the first n numbers.	"

def smallest_multiple(n):
	if (n <= 2):
        return n
	i = n * 2
	factors = [number for number in range(n, 1, -1) if number * 2 > n]
	print(factors)
	while True:
        for a in factors:
            if i % a != 0:
                i += n
                break
            if (a == factors[-1] and i % a == 0):
                return i
"
write a function to rotate string left by a given length	"
def rotate_left(input, d):

	Lfirst = input[0: d]
	Lsecond = input[d:]
	return (Lsecond + Lfirst)
"
65 write a program to add two matrices using nested loop	"

X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]


Y = [[5, 8, 1],
     [6, 7, 3],
     [4, 5, 9]]


result = [[0, 0, 0],
          [0, 0, 0],
          [0, 0, 0]]
"
given 4 points represented as a list	"def bilinear_interpolation(x, y, points):
	points = sorted(points)
	(x1, y1, q11), (_x1, y2, q12), (x2, _y1, q21), (_x2, _y2, q22) = points

	if x1 != _x1 or x2 != _x2 or y1 != _y1 or y2 != _y2:
        raise ValueError('points do not form a rectangle')
	if not x1 <= x <= x2 or not y1 <= y <= y2:
        raise ValueError('(x, y) not within the rectangle')

	return (q11 * (x2 - x) * (y2 - y)
                    + q21 * (x - x1) * (y2 - y)
                    + q12 * (x2 - x) * (y - y1)
            + q22 * (x - x1) * (y - y1)
            ) / ((x2 - x1) * (y2 - y1) + 0.0)
"
environment	"import os


def get_env_path(key):
	return os.getenv(key)
"
write a python program to check and print if a number is prime	"num = 407
if num > 1:
	for i in range(2, num):
        if (num % i) == 0:
            print(num, ""is not a prime number"")
            break
        else:
            print(num, ""is a prime number"")
else:
	print(num, ""is not a prime number"")
"
write a python program to replace blank space to 1	"print([i + j for i in ""abc"" for j in ""def""])
"
93 write a program to find sum of all digits of a number	"

def sumDigits(num):
	if num == 0:
        return 0
	else:
        return num % 10 + sumDigits(int(num / 10))


x = 0
print(""Number: "", x)
print(""Sum of digits: "", sumDigits(x))
print()
"
write a program to print number of characters in a string	"

str1 = 'It is a glorious day'


res = len(str1)


print(""The number of characters in string are : "", str(res))
"
write a python program to print the factorial of a number	"num = 5
fact = 1
while num > 0:
	fact *= num
	num -= 1
print(fact)
"
7 write a python function to return every nth number from a list	"

def every_nth_number(lst, n):
	return lst[::n]
"
lists) with zeros and print the output.	"nums = []


for i in range(3):

	nums.append([])

	for j in range(2):

        nums[i].append(0)
print(""Multidimensional list:"")
print(nums)
"
write a python function to remove all punctuation from a string	"def remove_punctuations(sentence):
	punctuations = '''!()-[]{};:'""\\,<>./?@#$%^&*_~'''
	no_punct = ''
	for char in sentence:
        if char not in punctuations:
            no_punct = no_punct + char
	return no_punct
"
write a python program to count how many times each letter occurs in a string	"string = 'The quick brown fox jumps over the lazy dog'
countmap = {}
for letter in string:
	if letter in countmap:
        countmap[letter] += 1
	else:
        countmap[letter] = 1
print(f'Count of letters: {countmap}')
"
principle amount, rate of interest and time is given	"def compound_interest(p, r, t):
	ci = p * (pow((1 + r / 100), t))
	return ci
"
using for loop to iterate multiplication 10 times	"for i in range(1, 11):
	print(num, 'x', i, '=', num * i)
"
write a python function for bitwise division with given number of shifts	"def bit_div(n, shift):
	return n >> shift
"
write a program to convert tuple to list	"t = (1, 2, 4, 5, 6)
print(f'list:{list(t)}')
"
Write a Python function to find the median among three given numbers	"def find_the_median(x, y, z):
	list_ = sorted([x, y, z])
	return list_[1]
"
a dictionary	"def count_value(d: dict, value) -> bool:
	return list(v == value for v in dict.values()).count(True)
"
l, bredth b and height h	"def cal_surface_area_cuboid(l, b, h):
	return 2 * (l * b + b * h + h * l)
"
write a python function to map multiple lists using zip	"def map_values(*args):
	return set(zip(*args))
"
Write a python program to implement Dequeue	"

class Dequeue:
	def __init__(self):
        self.items = []

	def is_empty(self):
        return self.items == []

	def append(self, data):
        self.items.append(data)

	def append_left(self, data):
        self.items.insert(0, data)

	def pop(self):
        return self.items.pop()

	def pop_left(self):
        return self.items.pop(0)


q = Dequeue()
print('Menu')
print('append <value>')
print('appendleft <value>')
print('pop')
print('popleft')
print('quit')

while True:
	do = input('What would you like to do? ').split()

	operation = do[0].strip().lower()
	if operation == 'append':
        q.append(int(do[1]))
	elif operation == 'appendleft':
        q.append_left(int(do[1]))
	elif operation == 'pop':
        if q.is_empty():
            print('Dequeue is empty.')
        else:
            print('Popped value from right: ', q.pop())
	elif operation == 'popleft':
        if q.is_empty():
            print('Dequeue is empty.')
        else:
            print('Popped value from left: ', q.pop_left())
	elif operation == 'quit':
        break
"
write a program to print the bitwise OR of two numbers	"

num1 = 5
num2 = 10
print(num1 | num2)
"
write a Python Program to Display the multiplication Table of given number	"num = 12
for i in range(1, 11):
	print(num, 'x', i, '=', num * i)
"
write a python function to check external IP address	"def check_ip():
	import re
	import urllib.request as ur
	url = ""http://checkip.dyndns.org""
	with ur.urlopen(url) as u:
        s = str(u.read())
        ip = re.findall(r""\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}"", s)
        print(""IP Address: "", ip[0])
        return ip[0]
"
write a python function to return mean of a list of numbers	"

def mean(list):
	sum = 0
	for num in list:
        sum += num
	return sum / len(list)
"
Write a python program to find and print the longest word in a sentence	"

string = ""python java c c++ javascript pascal php""


print(string)


words = string.split()


id_longest = 0


for i in range(1, len(words)):
	if len(words[id_longest]) < len(words[i]):
        id_longest = i


print(words[id_longest])
"
Write a function that returns a dictionary sorted descending by its values	"def descending_dict_valuesort(d: dict):
	return {
        key: val for key,
        val in sorted(
            d.items(),
            reverse=True,
            key=lambda ele: ele[1])}
"
40 function to print the ascii value of letter	"def show_ascii():
	import string
	letter = string.ascii_letters
	for i in letter:
        print(i + "":"" + str(ord(i)))
"
write a python function to Check if a given string is binary string or not	"def check(string):
	s = {'0', '1'}
	if s == p or p == {'0'} or p == {'1'}:
        return True
	else:
        return False
"
parameter.	"class Person:
	name = ""Person""

	def __init__(self, name=None):
        self.name = name
"
Write a python program for printing number of unique elements in a list	"input_list = [1, 2, 2, 5, 8, 4, 4, 8]

l1 = []

count = 0

for item in input_list:
	if item not in l1:
        count += 1
        l1.append(item)


print(""No of unique items are:"", count)
"
iterate through rows of X	"for i in range(len(X)):
	
	for j in range(len(Y[0])):
        
        for k in range(len(Y)):
            result[i][j] += X[i][k] * Y[k][j]


for r in result:
	print(r)
"
Counting total lower Case in a string	"str1 = ""abc4234AFdeaa""
digitCount = 0
for i in range(0, len(str1)):
	char = str1[i]
	if(char.lower()):
        digitCount += 1
print('Number total lower Case: ', digitCount)
"
write a python function to print the octal value of a decimal number	"def print_octal(dec):
	print(oct(dec))
"
function to Convert Binary to Gray Code	"def binary_to_gray(n):
	n = int(n, 2)
	n ^= (n >> 1)
	return bin(n)[2:]
"
the base using recursion.	"

def power(base, exp):
	if(exp == 1):
        return(base)
	if(exp != 1):
        return(base * power(base, exp - 1))


base = int(input(""Enter base: ""))
exp = int(input(""Enter exponential value: ""))
print(""Result:"", power(base, exp))
"
from 1 to 10 and values are squares of the key	"square_dict = {}
for i in range(1, 11):
	square_dict[i] = i * i
"
Write a function to return the perimeter of an equilateral triangle	"def cal_perimeter_eq_triangle(a):
	return 3 * a
"
23. python function to find the area of a circle	"def square_area(x):
	return x ** 2
"
write a python function to check whether the number is a Magic number or not	"def isMagic(n):
	sum = 0

	while (n > 0 or sum > 9):
        if (n == 0):
            n = sum
            sum = 0
        sum = sum + n % 10
        n = int(n / 10)

	return True if (sum == 1) else False
"
Merge two dictionaries in a single expression	"currentEmployee = {1: 'Scott', 2: ""Eric"", 3: ""Kelly""}
formerEmployee = {2: 'Eric', 4: ""Emma""}
allEmployee = {**currentEmployee, **formerEmployee}
print(allEmployee)
"
Write a python function to get the surface area of a cube with side as input	"def cube_surface_area(side):
	surface_area = 6 * side ** 2
	return surface_area
"
Find if all elements in a list are identical	"listOne = [20, 20, 20, 20]
print(""All element are duplicate in listOne:"",
      listOne.count(listOne[0]) == len(listOne))
"
check if the string is equal to its reverse	"if list(my_str) == list(rev_str):
	print(""The string is a palindrome."")
else:
	print(""The string is not a palindrome."")
"
Write a python function to get the Cumulative sum of a list	"def Cumulative(lists):
	cu_list = []
	length = len(lists)
	cu_list = [sum(lists[0:x:1]) for x in range(0, length + 1)]
	return cu_list[1:]


 
l = [1, 2.0, 'hello', 'have', 'a', 'good', 'day']

s = 'hello'

if s in l:
	print(f'{s} is present in the list')
else:
	print(f'{s} is not present in the list')
"
itertools.combinations(iterable, r)	"def random_combination(iterable, r):
	import random
	pool = tuple(iterable)
	n = len(pool)
	indices = sorted(random.sample(range(n), r))
	return tuple(pool[i] for i in indices)
"
Write a Python function that takes the age and return the age in days.	"def calc_age(age):
	calculation = age * 365
	return calculation
"
conditional usecase	"a_list = [1, 2]
if a_list[0] == 1:
	print('Hello, World!')
else:
	print('Bye, World!')
"
array of integers except the one at i.	"def product(nums):
	new_nums = []

	for i in nums:
        nums_product = 1

        for j in nums:
            if j != i:
                nums_product = nums_product * j
        new_nums.append(nums_product)

	return new_nums
"
return the average	"

def average(*args):
	return sum(args, 0.0) / len(args)
"
Insert a number at the beginning of the queue	"q = [1, 2, 3, 4]
q.insert(0, 5)
print(f""Revised List:{q}"")
"
write a Python function to Find HCF of two numbers	"def hcf(x, y):
	if x > y:
        smaller = y
	else:
        smaller = x
	for i in range(1, smaller + 1):
        if((x % i == 0) and (y % i == 0)):
            hcf = i
	return hcf
"
l, bredth b and height h	"def cal_surface_area_cuboid(l, b, h):
	return 2 * (l * b + b * h + h * l)
"
Program to cyclically rotate an array by one	"

def cyclicRotate(input):
	print([input[-1]] + input[0:-1])
"
15.Python program to display all the prime numbers within an interval	"

lower = 900
upper = 1000


print(""Prime numbers between"", lower, ""and"", upper, ""are:"")


for num in range(lower, upper + 1):
	
	if num > 1:
        for i in range(2, num):
            if (num % i) == 0:
                break
        else:
            print(num)
"
write a python program to add two list using python zip method	"

l1 = [10, 20, 30]
l2 = [-10, -20, -30]
l3 = [x + y for x, y in zip(l1, l2)]
print('added two list:', l3)
"
in the File	"

def capitalize(fname):
	with open(fname, 'r') as f:
        for line in f:
            l = line.title()
            print(l)
"
write a python program to multiple two list values	"

l1 = [1, 2, 3]
l2 = [4, 5, 6]
print('multiply two list values:', [x * y for x in l1 for y in l2])
"
in [5,6,77,45,22,12,24].	"li = [5, 6, 77, 45, 22, 12, 24]
li = [x for x in li if x % 2 != 0]
print(li)
"
Write a Python Program to Concatenate Two Dictionaries Into One	"

def concat_dic(d1, d2):
	return d1.update(d2)
"
This function adds two numbers	"def add(x, y):
	return x + y
"
and print it	"

test_dict = {'Gfg': 6, 'is': 7, 'best': 9, 'for': 8, 'geeks': 11}
temp = ""Pro""


d = {}
for key, value in test_dict.items():
	d.update({temp + key: value})
print(d)
"
for the below list	"

def heapsort(alist):
	build_max_heap(alist)
	for i in range(len(alist) - 1, 0, -1):
        alist[0], alist[i] = alist[i], alist[0]
        max_heapify(alist, index=0, size=i)


def parent(i):
	return (i - 1) // 2


def left(i):
	return 2 * i + 1


def right(i):
	return 2 * i + 2


def build_max_heap(alist):
	length = len(alist)
	start = parent(length - 1)
	while start >= 0:
        max_heapify(alist, index=start, size=length)
        start = start - 1


def max_heapify(alist, index, size):
	l = left(index)
	r = right(index)
	if (l < size and alist[l] > alist[index]):
        largest = l
	else:
        largest = index
	if (r < size and alist[r] > alist[largest]):
        largest = r
	if (largest != index):
        alist[largest], alist[index] = alist[index], alist[largest]
        max_heapify(alist, largest, size)


alist = [2, 3, 5, 6, 4, 5]
heapsort(alist)
print('Sorted list: ', end='')
print(alist)
"
write a python function to return nth item or a default value	"def nth(iterable, n, default=None):
	from itertools import islice
	return next(islice(iterable, n, None), default)
"
Return the largest item from the given list	"aList = [4, 6, 8, 24, 12, 2]
print(max(aList))
"
58 function to show boolean true / false is a number	"def bool_show(a=5):
	return True * a
"
number, merge all overlapping intervals.	"org_intervals = [[1, 3], [2, 6], [5, 10], [11, 16], [15, 18], [19, 22]]
i = 0
while i < len(org_intervals) - 1:
	if org_intervals[i + 1][0] < org_intervals[i][1]:
        org_intervals[i][1] = org_intervals[i + 1][1]
        del org_intervals[i + 1]
        i = i - 1
	i = i + 1
print(org_intervals)
"
write a python program to sort a list in descending order and print it	"

list = [3, 1, 5, 6]
result = sorted(list, reverse=True)
print(result)
"
36. Python funcction to Find the Factors of a Number	"def print_factors(x):
	print(""The factors of"", x, ""are:"")
	for i in range(1, x + 1):
        if x % i == 0:
            print(i)
"
hour hand coincide	"

def find_time(h1):

	theta = 30 * h1
	print(""("", end="""")
	print((theta * 2), ""/ 11) minutes"")


h1 = 3
find_time(h1)
"
Pretty print JSON	"import json
person_string = '{""name"": ""Bob"", ""languages"": ""English"", ""numbers"": [2, 1.6, null]}'
person_dict = json.loads(person_string)
print(json.dumps(person_dict, indent=4, sort_keys=True))
"
Write a program to get a list of locally installed Python modules	"import pkg_resources
installed_packages = pkg_resources.working_set
installed_packages_list = sorted(
	[""%s==%s"" % (i.key, i.version) for i in installed_packages])
for m in installed_packages_list:
	print(m)
"
write a program to print even length words in a string	"

str1 = ""I am doing fine""
s = str1.split(' ')
for word in s:
	if len(word) % 2 == 0:
        print(word)
"
61 write a program to sort Dictionary by Values and Keys and print it	"

test_dict = {""Gfg"": 1, ""is"": 3, ""Best"": 2, ""for"": 3, ""Geeks"": 2}
print(""The original dictionary is : "" + str(test_dict))

res = {val[0]: val[1]
       for val in sorted(test_dict.items(), key=lambda x: (-x[1], x[0]))}

print(""Sorted dictionary : "" + str(res))
"
case string	"

def string_test(s):
	d = {""UPPER_CASE"": 0, ""LOWER_CASE"": 0}
	for c in s:
        if c.isupper():
            d[""UPPER_CASE""] += 1
        elif c.islower():
            d[""LOWER_CASE""] += 1
        else:
            pass
	print(""Original String : "", s)
	print(""No. of Upper case characters : "", d[""UPPER_CASE""])
	print(""No. of Lower case Characters : "", d[""LOWER_CASE""])


string_test('The quick Brown Fox')
"
Convert string into a datetime object	"from datetime import datetime
date_string = ""Feb 25 2020  4:20PM""
datetime_object = datetime.strptime(date_string, '%b %d %Y %I:%M%p')
print(datetime_object)
"
Write a function to return the area of a equilateral triangle	"def cal_eq_triangle_area(a: float) -> float:
	if a:
        return (3**(1 / 2)) * (a**2) / 4
	else:
        return None
"
many times as its count.	"from collections import Counter
c = Counter(p=4, q=2, r=0, s=-2)
print(list(c.elements()))
"
each tuple element	"userInput = input(""Enter a tuple:"")
x = map(lambda x: len(x), tuple(x.strip() for x in userInput.split(',')))
print(list(x))
"
sequence on a single line.	"alues = []
for i in range(1000, 3001):
	s = str(i)
	if (int(s[0]) % 2 == 0) and (int(s[1]) % 2 == 0) and (int(s[2]) % 2 == 0) and (int(s[3]) % 2 == 0):
        values.append(s)
	print("","".join(values))
"
write a python function that takes in two numbers and returns their LCM	"def lcm(num1, num2):
	bigger = num1 if num1 > num2 else num2
	while True:
        if (bigger % num1 == 0) and (bigger % num2 == 0):
            break
        bigger += 1
	return bigger
"
return the modified data list	"def remove_duplicates(data):
	c = Counter(data)
	s = set(data)
	for item in s:
        count = c.get(item)
        while count > 1:
            data.pop(item)
            count -= 1
	return data
"
in console.	"def printValue(n):
	print(str(n))
"
between 0 and n in comma separated form while n is input by console.	"def EvenGenerator(n):
	i = 0
	while i <= n:
        if i % 2 == 0:
            yield i
        i += 1
"
from a sentence	"

sentence = input(""Enter a sentence : "")


def fn(sentence):
	vowels = 'aeiou'
	return ''.join([l for l in sentence if l not in vowels])
"
Write a Python program to remove duplicates from a list.	"a = [10, 20, 30, 20, 10, 50, 60, 40, 80, 50, 40]
dup_items = set()
uniq_items = []
for x in a:
	if x not in dup_items:
        uniq_items.append(x)
        dup_items.add(x)
	print(dup_items)
"
Write a python function to break a list into chunks of size N use generator	"my_list = ['one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight']


def divide_chunks(l, n):
	for i in range(0, len(l), n):
        yield l[i:i + n]
"
dictionary.	"test_dict = {6: 2, 8: 9, 3: 9, 10: 8}
N = 4
res = []
for key, val in sorted(
        test_dict.items(),
        key=lambda x: x[0],
        reverse=True)[
        : N]:
	res.append(key)
print(""Top N keys are: "" + str(res))
"
9 write a program to find the frequency of words present in a string	"
test_str = 'times of india times new india express'
print(""The original string is : "" + str(test_str))


res = {key: test_str.count(key) for key in test_str.split()}
print(""The words frequency : "" + str(res))
"
reverse order.	"s = raw_input()
s = s[::-1]
print(s)
"
"[""Hockey"",""Football""]."	"subjects = [""I"", ""You""]
verbs = [""Play"", ""Love""]
objects = [""Hockey"", ""Football""]
for i in range(len(subjects)):
	for j in range(len(verbs)):
        for k in range(len(objects)):
            sentence = ""%s %s %s."" % (subjects[i], verbs[j], objects[k])
            print(sentence)
"
write a python program to check if year is a leap year or not	"

year = 2004
if (year % 4) == 0:
	if (year % 100) == 0:
        if (year % 400) == 0:
            print(f""{year} is a leap year"")
        else:
            print(f""{year} is not a leap year"")
	else:
        print(f""{year} is a leap year"")
else:
	print(f""{year} is not a leap year"")
"
write a python function to print pyramid pattern	"def pyramid_pattern(symbol='*', count=4):
	for i in range(1, count + 1):
        print(' ' * (count - i) + symbol * i, end='')
        print(symbol * (i - 1) + ' ' * (count - i))
"
write a program to check if a string is binary or not	"

str1 = ""01110011 a""


set1 = set(str1)


if set1 == {'0', '1'} or set1 == {'0'} or set1 == {'1'}:
	print(""string is binary"")
else:
	print(""string is not binary"")
"
write a python program to find the biggest character in a string	"def bigChar(word): return reduce(
	lambda x, y: x if ord(x) > ord(y) else y, word)
"
52 Write a python program to calculate the slope of a line given two points	"

def slope_of_a_line(x1, x2, y1, y2):
	del_x = x2 - x1
	del_y = y2 - y1
	return float(del_y) / del_x


print(slope_of_a_line(0, 10, 0, 10))
"
Choose given number of elements from the list with different probability	"import random
num1 = 5
numberList = [111, 222, 333, 444, 555]
print(random.choices(numberList, weights=(10, 20, 30, 40, 50), k=num1))
"
area & vertical height as input	"def pyramid_surface_area(base_area, height):
	surface_area = 1 / 3 * base_area * height
	return surface_area
"
equal to the given number using a while loop	"input_num = 27
while input_num:
	print(input_num)
	input_num -= 1
"
27. Python Palindrome Program using Functions	"
reverse = 0


def integer_reverse(number):
	global reverse

	if(number > 0):
        Reminder = number % 10
        reverse = (reverse * 10) + Reminder
        integer_reverse(number // 10)
	return reverse


number = int(input(""Please Enter any Number: ""))


rev = integer_reverse(number)
print(""Reverse of a Given number is = %d"" % rev)


if(number == rev):
	print(""%d is a Palindrome Number"" % number)
else:
	print(""%d is not a Palindrome Number"" % number)
"
Given a list slice it into a 3 equal chunks and revert each list	"sampleList = [11, 45, 8, 23, 14, 12, 78, 45, 89]


length = len(sampleList)
chunkSize = int(length / 3)
start = 0
end = chunkSize
for i in range(1, 4, 1):
	indexes = slice(start, end, 1)
	listChunk = sampleList[indexes]
	mylist = [i for i in listChunk]
	print(""After reversing it "", mylist)
	start = end
	if(i != 2):
        end += chunkSize
	else:
        end += length - chunkSize
"
write a python program to subtract two numbers and print it	"num1 = 1.5
num2 = 6.3
difference = num1 - num2
print(f'Difference: {difference}')
"
write a python function to return nth item or a default value	"def nth(iterable, n, default=None):
	from itertools import islice
	return next(islice(iterable, n, None), default)
"
pattern of the desired size.	"n = int(input(""Enter number of rows: ""))
for i in range(n, 0, -1):
	print((n - i) * ' ' + i * '*')
"
Write a python program to print dimension in centimeter to inches	"cm = 50
inches = 0.394 * cm
print(""The dimension in inches "", round(inches, 2))
"
27 write a function to generate and print a random number between 0 and 22	"n = random.randint(0, 22)
print(n)
"
any duplicates and return the list	"def combine_lists(L1, L2):
	return L1 + [items for items in L2 if items not in L1]


L1 = [1, 2, 3]
L2 = [2, 4, 3]


combine_lists(L1, L2)
"
17. Python Program to Display the multiplication Table	"num = 12


for i in range(1, 11):
	print(num, 'x', i, '=', num * i)
"
is 0 by default.	"class Shape(object):
	def __init__(self):
        pass

	def area(self):
        return 0


class Square(Shape):
	def __init__(self, l):
        Shape.__init__(self)
        self.length = l

	def area(self):
        return self.length * self.length


aSquare = Square(3)
print(aSquare.area())
"
sum.	"r = range(1, 201)
a = sum(r)
print(a * a - sum(i * i for i in r))
"
thea and distance for axis of rotation to place force applied is r	"def cal_torque(force: float, theta: float, r: float) -> float:
	import math
	return force * r * math.sin(theta)
"
Write a function that returns sine value of the input	"def sin(x: float) -> float:
	import math
	return math.sin(x)
"
write a python class that defines a Tree and add child	"

class TreeNode:
	def __init__(self, data):
        self.data = data
        self.parent = None
        self.children = []

	def add_child(self, child):
        child.parent = self
        self.children.append(child)


t = TreeNode(""Arun"")
t.add_child(TreeNode(""Shruthi""))
"
write a Python Program to Replace all Occurrences of ‘a’ with $ in a String	"def replacestring(txt):
	return txt.replace('A', '$')
"
11 write a python function to return the length of an array plus 27	"

def return_length(arr):
	return len(arr) + 27
"
Using splitlines() + join() + strip()	"

test_str1 = """"""India
is""""""
test_str2 = """"""best
for everybody
""""""


print(""The original string 1 is : "" + test_str1)
print(""The original string 2 is : "" + test_str2)

test_str1 = test_str1.splitlines()
test_str2 = test_str2.splitlines()
res = []

for i, j in zip(test_str1, test_str2):
	res.append(""	"" + i.strip() + "" "" + j.strip())
res = '\n'.join(res)


print(""String after concatenation : "" + str(res))
"
39 write a program extract least frequency element	"

test_list = [1, 3, 4, 5, 1, 3, 5]
"
and velocity v	"def cal_ke(mass: float, velocity: float) -> float:
	return (mass * (velocity)**2) / 2
"
write a Function to convert the time from 12 hour format to 24 hour format	"def convert24(str1):

	if str1[-2:] == ""AM"" and str1[:2] == ""12"":
        return ""00"" + str1[2:-2]

	elif str1[-2:] == ""AM"":
        return str1[:-2]

	elif str1[-2:] == ""PM"" and str1[:2] == ""12"":
        return str1[:-2]

	else:

        return str(int(str1[:2]) + 12) + str1[2:8]
"
write a Python function to find time for a given angle.	"

def calcAngle(hh, mm):

	hour_angle = 0.5 * (hh * 60 + mm)
	minute_angle = 6 * mm

	angle = abs(hour_angle - minute_angle)

	angle = min(360 - angle, angle)

	return angle


def printTime(theta):

	for hh in range(0, 12):
        for mm in range(0, 60):
            if (calcAngle(hh, mm) == theta):
                print(hh, "":"", mm, sep="""")
                return

	print(""Input angle not valid."")
	return


theta = 90.0
printTime(theta)
"
initializing string	"test_str = ""HellowWorld""


print(""The original string is : "" + test_str)
res = ', '.join(test_str[i:i + 2] for i in range(0, len(test_str), 2))

print(""The string after inserting comma after every character pair : "" + res)
"
r and time in years y	"def get_si(p: float, r: float, t: float) -> float:
	return (p * r * t) / 100
"
write a Python program to demonstrate removal of dictionary pair	"

test_dict = {""Arushi"": 22, ""Anuradha"": 21, ""Mani"": 21, ""Haritha"": 21}


print(f""The dictionary before performing remove is : {test_dict}"")


del test_dict['Mani']


print(f""The dictionary after remove is : {test_dict}"")
"
Alternate cases in String	"test_str = ""geeksforgeeks""
res = """"
for idx in range(len(test_str)):
	if not idx % 2:
        res = res + test_str[idx].upper()
	else:
        res = res + test_str[idx].lower()
print(res)
"
gas equation Pressure P and Tempreature T given	"def find_volume_of_ideal_gas(pressure: float, temp: float, n: float) -> float:
	r = 8.3145  
	return (n * r * temp) / pressure
"
square of each number and return it in a list	"def square_num(mynumbers):
	return list(map(lambda num: num**2, mynumbers))


square_num([1, 2, 3])
"
Write a Python Program to print all the Divisors of an Integer	"

n = 60
print(""The divisors of the number are:"")
for i in range(1, n + 1):
	if(n % i == 0):
        print(i)
"
or zero	"

def check_pnz(num):
	if num > 0:
        print(""Positive number"")

	elif num == 0:
        print(""Zero"")

	else:
        print(""Negative number"")
"
write a program to find and print the smallest among three numbers	"num1 = 100
num2 = 200
num3 = 300
if (num1 <= num2) and (num1 <= num3):
	smallest = num1
elif (num2 <= num1) and (num2 <= num3):
	smallest = num2
else:
	smallest = num3
print(f'smallest:{smallest}')
"
30. Write a python function to find HCf or GCD and return the value	"def compute_hcf(x, y):

	if x > y:
        smaller = y
	else:
        smaller = x
	for i in range(1, smaller + 1):
        if((x % i == 0) and (y % i == 0)):
            hcf = i
	return hcf
"
99 Write a Python class to convert a roman numeral to an integer.	"class Solution:
	def roman_to_int(self, s):
        rom_val = {'I': 1, 'V': 5, 'X': 10,
                   'L': 50, 'C': 100, 'D': 500, 'M': 1000}
        int_val = 0
        for i in range(len(s)):
            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:
                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]
            else:
                int_val += rom_val[s[i]]
        return int_val
"
42. Python Program to Transpose a Matrix using Nested Loop	"

X = [[12, 7],
     [4, 5],
     [3, 8]]

result = [[0, 0, 0],
          [0, 0, 0]]

for i in range(len(X)):
	for j in range(len(X[0])):
        result[j][i] = X[i][j]


for r in result:
	print(r)
"
regardless of order	"

def have_same_contents(a, b):
	for v in set(a + b):
        if a.count(v) != b.count(v):
            return False
	return True
"
44 write a python program to  rotate dictionary by K	"
test_dict = {1: 6, 8: 1, 9: 3, 10: 8, 12: 6, 4: 9}

K = 2
test_dict = list(test_dict.items())
res = [test_dict[(i - K) % len(test_dict)]
       for i, x in enumerate(test_dict)]

res = {sub[0]: sub[1] for sub in res}
print(""The required result : "" + str(res))
"
Write a function to return the volume of a cuboid	"def cal_cuboid_volume(length: float, breadth: float, height: float) -> float:
	return length * breadth * height
"
repeating characters.	"str = ""piyushjain""


def longest_non_repeat(str):
	i = 0
	max_length = 1

	for i, c in enumerate(str):
        start_at = i
        sub_str = []
        while (start_at < len(str)) and (str[start_at] not in sub_str):
            sub_str.append(str[start_at])
            start_at = start_at + 1
        if len(sub_str) > max_length:
            max_length = len(sub_str)
        print(sub_str)
	return max_length


longest_non_repeat(str)
"
list [[2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8]]	"

start_num = 2
repeat_count = 4
max_offset = 4
list5 = [[start_num + i + j for j in range(max_offset)]
         for i in range(repeat_count)]
print(list5)
"
of a given string.	"def larger_string(string1, n):
	result = """"
	for i in range(n):
        result = result + string1
	return result


print(larger_string('abc', 2))
print(larger_string('.py', 3))
"
write a python function to find the factors of a number	"def print_factors(x):
	print(""The factors of"", x, ""are:"")
	for i in range(1, x + 1):
        if x % i == 0:
            print(i)
"
number (between 1 and n) in the form (x, x*x)	"n = int(input(""Input a number: ""))
d = dict()


for x in range(1, n + 1):
	d[x] = x * x


print(d)
"
Write a function to calculate median of a list of numbers given	"

def median(pool):
	copy = sorted(pool)
	size = len(copy)
	if size % 2 == 1:
        return copy[int((size - 1) / 2)]
	else:
        return (copy[int(size / 2 - 1)] + copy[int(size / 2)]) / 2
"
Write a function to repeat M characters of a string N times	"

def multTimes(str, m, n):
	front_len = m
	if front_len > len(str):
        front_len = len(str)
	front = str[:front_len]
	result = ''
	for i in range(n):
        result = result + front
	return result


print(multTimes('Hello', 3, 7))
"
Write a program to print the unique elements in a list	"my_list = [1, 2, 4, 5, 2, 3, 1, 5, 4, 7, 8, 2, 4, 5, 2, 7, 3]


print(set(my_list))
"
all three sides' length	"

def is_valid_triangle_length(a, b, c):
	if a > 0 and b > 0 and c > 0:
        if a + b > c and a + c > b and b + c > a:
            return True
	return False
"
Test if string starts with H	"word = ""Hello World""
check = word.startswith('H')
print(f""String starts with H?:{check}"")
"
54 str to list	"def str_to_list(sen):
	return list(sen)
"
numbers and other numbers occur even number.	"def odd_occurrence(arr):

	result = 0

	for element in arr:
        result = result ^ element

	return result
"
write a python function that returns binary representation of given number	"

def to_binary(n):
	return bin(n)
"
Write a function to return the area of a square	"def cal_area_square(side):
	return side**2
"
5. write a program to find and print the largest among three numbers	"

num1 = 10
num2 = 12
num3 = 14
if (num1 >= num2) and (num1 >= num3):
	largest = num1
elif (num2 >= num1) and (num2 >= num3):
	largest = num2
else:
	largest = num3
print(f'largest:{largest}')
"
Python	"from datetime import datetime, timedelta
given_date = datetime(2020, 2, 25)
days_to_subtract = 7
res_date = given_date - timedelta(days=days_to_subtract)
print(res_date)
"
write a python program to check if a number is positive, negative or zero.	"

num = 5
if num > 0:
	print(""It is positive number"")
elif num == 0:
	print(""It is Zero"")
else:
	print(""It is a negative number"")
"
write a python program to Remove the Given Key from a Dictionary	"d = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
key = 'd'
if key in d:
	del d[key]
else:
	print(""Key not found!"")
	exit(0)
"
write a python function to convert iterable to pairwise iterable	"def pairwise(iterable):
	from itertools import tee
	a, b = tee(iterable)
	next(b, None)
	return zip(a, b)
"
string and numbers	"test_list = [5, 8, ""gfg"", 8, (5, 7), 'is', 2]
res = 1
for ele in test_list:
	try:
        res *= int(ele)
	except:
        pass
print(""Product of integers in list : "" + str(res))
"
K-based notation.	"

def hasConsecutiveZeroes(N, K):
	z = toK(N, K)
	if (check(z)):
        print(""Yes"")
	else:
        print(""No"")


def toK(N, K):

	w = 1
	s = 0
	while (N != 0):
        r = N % K
        N = N // K
        s = r * w + s
        w *= 10
	return s


def check(N):

	fl = False
	while (N != 0):
        r = N % 10
        N = N // 10

        if (fl == True and r == 0):
            return False
        if (r > 0):
            fl = False
            continue
        fl = True
	return True
"
Write a python program to Count the Occurrences of a Word in a Text File	"

fname = input(""Enter file name: "")
word = 'the'
k = 0

with open(fname, 'r') as f:
	for line in f:
        words = line.split()
        for i in words:
            if(i == word):
                k = k + 1
print(f""Frequency of Occurrences of the word {a} is:"")
print(k)
"
result is 3x4	"result = [[0, 0, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]]
"
Write a Python function to strip vowels from a string	"

def vowel_stripping(string):
	
	return """".join([x for x in string if x not in ('a', 'e', 'i', 'o', 'u')])
"
write a program to find and print the largest among three numbers	"

num1 = 10
num2 = 12
num3 = 14
if (num1 >= num2) and (num1 >= num3):
	largest = num1
elif (num2 >= num1) and (num2 >= num3):
	largest = num2
else:
	largest = num3
print(f'largest:{largest}')
"
write a python function to map a numeric lookup using bisect	"def grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):
	from bisect import bisect
	i = bisect(breakpoints, score)
	return grades[i]
"
Write a function that returns derivative of tan value of the input	"def derivative_tan(x: float) -> float:
	import math
	return (1 / math.cos(x))**2
"
write a python Program to print the ASCII value of the given character	"c = 'p'
print(""The ASCII value of '"" + c + ""' is"", ord(c))
"
write a python program to check whether a person is eligible to vote or not	"

age = 23
if age >= 18:
	status = ""Eligible""
else:
	status = ""Not Eligible""
print(""You are "", status, "" for Vote."")
"
Write a function to return the area of a circle of raidus r	"def cal_area_circle(r):
	pi = 3.14
	return pi * r**2
"
write a python program to add two binary numbers	"
a = ""1101""
b = ""100""
sum = bin(int(a, 2) + int(b, 2))
print(sum[2:])
"
Return the largest item from the given list	"aList = [4, 6, 8, 24, 12, 2]
print(max(aList))
"
and guess it within 3 guesses	"print(""Please guess a number between 1 and 5 and I will guess within 3 chances!"")
guess1 = input(""Is it <= 3? enter y/n \n"")
if guess1 == ""y"":
	guess2 = input(""Is it <= 2? enter y/n \n"")
	if guess2 == ""y"":
        guess3 = input(""Is it 1? enter y/n \n"")
        if guess3 == ""y"":
            print(""Yay! found the number, its 1"")
        else:
            print(""Yay! found the number, its 2"")
	else:
        print(""Yay! found the number, its 3"")
else:
	guess2 = input(""Is it 4? enter y/n \n"")
	if guess2 == ""y"":
        print(""Yay! found the number, its 4"")
	else:
        print(""Yay! found the number, its 5"")
"
Write a program to rotate and print elements of a list	"

arr = [1, 2, 3, 4, 5]

n = 3

for i in range(0, n):
	last = arr[len(arr) - 1]

	for j in range(len(arr) - 1, -1, -1):
        arr[j] = arr[j - 1]

	arr[0] = last

print(arr)
"
and last characters of a given string.	"def no_of_substring_with_equalEnds(str1):
	result = 0
	n = len(str1)
	for i in range(n):
        for j in range(i, n):
            if (str1[i] == str1[j]):
                result = result + 1
	return result
"
32. Python Program to Convert String to Uppercase	"
string = input(""Please Enter your Own String : "")


string1 = string.upper()

print(""\nOriginal String in Lowercase  =  "", string)
print(""The Given String in Uppercase =  "", string1)
"
write a python program to print a random vowel	"import random
vowels = ['a', 'e', 'i', 'o', 'u']
print(random.choice(vowels))
"
Writing JSON to a file	"import json
person_dict = {""name"": ""Bob"",
               ""languages"": [""English"", ""Fench""],
               ""married"": True,
               ""age"": 32
               }
with open('person.txt', 'w') as json_file:
	json.dump(person_dict, json_file)
"
write a python program to print the first 5 items in a list	"my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(my_list[:5])
"
Write a function that returns derivative of tan value of the input	"def derivative_tan(x: float) -> float:
	import math
	return (1 / math.cos(x))**2
"
and print the new combined dictionary.	"test_dict1 = {'Gfg': 1, 'is': 2, 'best': 3}
test_dict2 = {'Gfg': 4, 'is': 10, 'for': 7, 'geeks': 12}
prio_dict = {1: test_dict2, 2: test_dict1}
res = prio_dict[2].copy()
for key, val in prio_dict[1].items():
	res[key] = val
print(""The dictionary after combination : "" + str(res))
"
or not based on their age	"def vote_eligibility(age):
	if age >= 18:
        status = ""Eligible""
	else:
        status = ""Not Eligible""
	return status
"
List are mutable	"a_list = []
print('ID:', id(a_list))
a_list += [1]
print('ID (+=):', id(a_list))
a_list = a_list + [2]
print('ID (list = list + ...):', id(a_list))
"
one number	"def checkString(str):
	flag_l = False
	flag_n = False
	for i in str:
        if i.isalpha():
            flag_l = True
        if i.isdigit():
            flag_n = True
	return flag_l and flag_n
"
prints the set	"my_set = {1, 2, 3}
my_list = [4, 5, 6]
my_set.update(my_list)
print(my_set)
"
72 class to show as how to make the class as callable	"class CallShow:
	

	def __init__(
            self,
            msg='Demo class to show how to make class object as callable'):
        self.msg = msg

	def __call__(self):
        
        return f""Code to be writen here above to act as per accling object of call""
"
write a python program to print all prime numbers in a given interval	"lower = 900
upper = 1000
for num in range(lower, upper + 1):
	if num > 1:
        for i in range(2, num):
            if (num % i) == 0:
                break
	else:
        print(num)
"
1. python function to return the nth fibonacci number	"def fib(n):
	if n <= 1:
        return n
	else:
        return (fib(n - 1) + fib(n - 2))
"
25 print binary of a decimal number	"a = 6
print(bin(a))
"
prints a new list	"list1 = [1, 2, 3, 4, 5]
list2 = [5, 4, 3, 2, 1]
quot_list = [a / b for (a, b) in zip(list1, list2)]
print(quot_list)
"
Write a program to to print the contents of a given file	"file_name = 'temp.txt'
with open(file_name, 'r') as f:
	print(f.read())
"
given number	"num = 16
sum = 0
while (num > 0):
	sum += num
	num -= 1
print(f'The sum is {sum}')
"
write  a python program to print element with maximum values from a list	"

list1 = [""gfg"", ""best"", ""for"", ""geeks""]

s = []
for i in list1:
	count = 0
	for j in i:
        if j in ('a', 'e', 'i', 'o', 'u'):
            count = count + 1
	s.append(count)
print(s)
if count == max(s):
	print(list1[s.index(max(s))])
"
and converts keys into values and vice versa	"

def flip_dict(d):
	tmp_dict = {}
	for pair in d.items():
        tmp_dict[pair[1]] = pair[0]
	return tmp_dict


print(flip_dict({""a"": 10, ""b"": 20, ""c"": 15}))
"
write a python function  to convert a list of string list to a string list	"def convert_to_string_list(list_of_string_list):
	res = [''.join(str(b) for b in eval(a)) for a in list_of_string_list]
	return res
"
write a python function to capitalize first letter of a string	"

def capitalize(s, lower_rest=False):
	return ''.join([s[:1].upper(), (s[1:].lower() if lower_rest else s[1:])])
"
Write a recursive function to calculate the sum of numbers from 0 to 10	"def calculateSum(num):
	if num:
        return num + calculateSum(num - 1)
	else:
        return 0


res = calculateSum(10)
print(res)
"
Write a python program to reverse a list and print it.	"def Reverse(lst):
	return [ele for ele in reversed(lst)]


lst = [10, 11, 12, 13, 14, 15]
print(Reverse(lst))
"
Write a function to return the perimeter of a isoscales triangle	"def cal_perimeter_iso_triangle(s1, s2):
	return 2 * s1 + s2
"
Write a Python function that shifts the character of strings	"

def char_shift(string, shift_count):
	
	return """".join([chr(ord(x) + shift_count) if (ord(x) + shift_count) <= 122 else chr(96 + (ord(x) + shift_count) - 122) for x in string])
"
Write a function that returns a list sorted descending	"def descending_sort(l: list):
	sorted(l, reverse=True)
"
distance travelled in radian unit and time taken	"def cal_angular_velocity(angular_dist: float, time: float) -> float:
	return angular_dist / time
"
write a program to sort the list in desending order	"data_list = [-5, -23, 5, 0, 23, -6, 23, 67]
new_list = []


while data_list:
	minimum = data_list[0]  
	for x in data_list:
        if x > minimum:
            minimum = x
	new_list.append(minimum)
	data_list.remove(minimum)


print(f'decending_order_list: {new_list}')
"
a number given	"

def grayCode(n):
	if n == 0:
        return [0]

	if n == 1:
        return [0, 1]

	res = []

	start = '0' * n
	visited = set()
	stk = [start]

	while stk:
        node = stk.pop()
        if node not in visited:
            res.append(int(node, 2))
            visited.add(node)
        if len(visited) == 2**n:
            break

        for i in range(n):
            newCh = '0' if node[i] == '1' else '1'
            newNode = node[:i] + newCh + node[i + 1:]

            if newNode not in visited:
                stk.append(newNode)
	return res
"
44. Python Program to Multiply Two Matrices using Nested List Comprehension	"X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]


Y = [[5, 8, 1, 2],
     [6, 7, 3, 0],
     [4, 5, 9, 1]]


result = [[sum(a * b for a, b in zip(X_row, Y_col))
           for Y_col in zip(*Y)] for X_row in X]


for r in result:
	print(r)
"
comprehension	"

l_range = 2
u_range = 5
a = [(x, x**2) for x in range(l_range, u_range + 1)]
"
write a python program to multiply a string n times	"

a = 'python'
print(a * 5)
"
Write a python function get unique value from tuple	"

def unique_values(v):
	return(list(set(v)))


t = [(1, 2), (3, 4), (4, 3), (1, 2)]


unique_values(t)
"
write a python function to emulate the behavior of built-in map() function	"def pad_none(iterable):
	
	from itertools import chain, repeat
	return chain(iterable, repeat(None))
"
transaction over Repetations	"def time_it(fn, *args, repetitons=1, **kwargs):
	import time
	total_time = []

	for _ in range(repetitons):
        start_time = time.perf_counter()
        fn(*args, **kwargs)
        end_time = time.perf_counter()
        ins_time = end_time - start_time
        total_time.append(ins_time)
	return sum(total_time) / len(total_time)
"
78 class to show implementation of static method	"class Mathematics:
	

	def __init__(self, msg=""Demo class of Mathematics""):
        self.msg = msg

	def __str__(self):
        return f' String representation of an object'

	def __repr__(self):
        return f' repr representation of an object with parameter {self.msg}'

	@staticmethod
	def addition(a: ""Variable1"", b: 'Variable2'):
        
        return a + b
"
Write a program to find the median among three given number	"x = 10
y = 20
z = 30
if y < x and x < z:
	print(x)
elif z < x and x < y:
	print(x)
elif z < y and y < x:
	print(y)
elif x < y and y < z:
	print(y)
elif y < z and z < x:
	print(z)
elif x < z and z < y:
	print(z)
"
write a python program to calculate and print square root of numbers 0 to 100	"i = 0
while i <= 100:
	print(i, ""\t\t"", i**0.5)
	i = i + 1
"
write a python program that reverses an integer and prints it	"num = 12345
reversed = int(str(num)[::-1])
print(reversed)
"
Elements.	"def sortlistwithlen(list):
	list.sort(key=len)
	return list
"
Write a function to adds two lists element wise only if numbers are even	"def adds_listevenelements(l1: list, l2: list):
	return [i + j for i, j in zip(l1, l2) if i * j % 2 == 0]
"
first two terms	"n1 = 0
n2 = 1
count = 2
"
Write a function to return the perimeter of a square	"def cal_perimeter_square(side):
	return 4 * side
"
MAP+LAMBDA	"midterms = [80, 91, 78]
finals = [98, 89, 53]
students = ['dan', 'ang', 'kate']
final_grades = dict(
	zip(students, map(lambda pair: max(pair), zip(midterms, finals))))
"
Calculate memory is being used by an list in Python	"import sys
list1 = ['Scott', 'Eric', 'Kelly', 'Emma', 'Smith']
print(""size of list = "", sys.getsizeof(list1))
"
Write a function to identify if value is present inside a dictionary or not	"def check_value(d: dict, value) -> bool:
	return any(v == value for v in dict.values())
"
33. Python Program to Find LCM	"def compute_lcm(x, y):
	if x > y:
        greater = x
	else:
        greater = y

	while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1

	return lcm


num1 = 54
num2 = 24


print(""The L.C.M. is"", compute_lcm(num1, num2))
"
Convert decimal number to octal	"print('%o,' % (8))
"
ideal gas equation Pressure P and Volume V given	"

def find_temp_of_ideal_gas(pressure: float, volume: float, n: float) -> float:
	r = 8.3145  
	return (pressure * volume) / n * r
"
63 custom logging along with counter	"def custom_counter_log():
	
	x = 0
	dt = datetime.now()

	def inner():
        nonlocal x
        x += 1
        print(f' Switch or button is called {x} at {dt}')
	return inner
"
Write a function that returns sum of all odd elements in the list	"def sum_even_elements(l: list):
	return sum([i for i in l if i % 2 == 0])
"
write a python program that prints the circumference of a circle	"import math
radius = 10
print(f'Area: {2 * math.pi * radius}')
"
write a python program to tokenise a string into words and print them	"

string = 'the sun is shining'


words = string.split()
print(words)
"
write a function to calculate factorial of number	"

def factorial(num):
	if num == 0:
        return 1
	return num * factorial(num - 1)
"
given file	"def check_word_count(word, file):
	if not os.path.isfile(file):
        raise FileNotFoundError
	if not isinstance(word, str):
        raise TypeError

	with open(file, 'r') as f:
        lines = f.readlines()
        words = [l.strip().split(' ') for l in lines]
        words = [word for sublist in words for word in sublist]
        c = Counter(words)
	return c.get(word, 0)
"
which this is possible, put 0 instead.	"

def dailyTemperatures(T):
	stack = []
	res = [0 for _ in range(len(T))]
	for i, t1 in enumerate(T):
        while stack and t1 > stack[-1][1]:
            j, t2 = stack.pop()
            res[j] = i - j
        stack.append((i, t1))
	return res
"
26 write a function to print other value with given base to int.	"def other_int(value, b):
	return int(value, b)
"
in the descending order	"def sort_by_len(arr):
	return sorted(arr, reverse=True, key=lambda x: len(x))
"
Write a Python Program to print the Reverse a Given Number	"

n = 1023
rev = 0
while(n > 0):
	dig = n % 10
	rev = rev * 10 + dig
	n = n // 10
print(""Reverse of the number:"", rev)
"
Write a program to print the sum of squares of first n natural numbers	"n = 21
sum_n = 0
for i in range(1, n + 1):
	sum_n += i**2
print(sum_n)
"
write a python function to generate 6 digit OTP	"

import math
import random


def generateOTP():
	digits = ""0123456789""
	OTP = """"
	for i in range(6):
        OTP += digits[math.floor(random.random() * 10)]
	return OTP
"
Shallow copy in python	"list1 = [1, 2]
list2 = list1  
list3 = list1[:]  
list4 = list1.copy()  
print('IDs:\nlist1: {}\nlist2: {}\nlist3: {}\nlist4: {}\n'
      .format(id(list1), id(list2), id(list3), id(list4)))
"
write a python function to find the volume of tetraheadron	"

def vol_tetra(side):
	volume = (side ** 3 / (6 * 1.414))
	return round(volume, 2)
"
a simple data-set	"sample = [1, 2, 3, 4, 5]
print(""variance of the sample is: "", variance(sample))
"
(both included). and then the program should print the dictionary.	"n = int(input())
d = dict()
for i in range(1, n + 1):
	d[i] = i * i


print(d)
"
write a python program to sort dictionary items	"

dict1 = {'car': [7, 6, 3],
         'bike': [2, 10, 3],
         'truck': [19, 4]}


print(f""The original dictionary is : {str(dict1)}"")


res = dict()
for key in sorted(dict1):
	res[key] = sorted(dict1[key])


print(f""The sorted dictionary : {str(res)}"")
"
Write a Python function to print the GSD of Two Numbers	"

def gcd(a, b):
	if(b == 0):
        return a
	else:
        return gcd(b, a % b)
"
Add tuples like numerics	"my_tup = (1,)
my_tup += (4,)
my_tup = my_tup + (5,)
print(my_tup)
"
in user input text	"text = input(""Enter a string: "")
for m in re.finditer(r""\w+ly"", text):
	print('%02d-%02d: %s' % (m.start(), m.end(), m.group(0)))
"
write a python program to pop element form dictionary	"squares = {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}
print(squares.pop(4))
"
the string in lexicographic sorted order.	"def get_ordered_combinations(string, k):
	[print(''.join(x)) for i in range(1, int(k) + 1)
     for x in combinations(sorted(string), i)]
"
unsigned).	"def reverse_Bits(n):
	result = 0
	for i in range(32):
        result <<= 1
        result |= n & 1
        n >>= 1
	return result
"
Rotate an array of n elements to the right by k steps.	"org = [1, 2, 3, 4, 5, 6, 7]
result = org[:]
steps = 3


for idx, num in enumerate(org):
	if idx + steps < len(org):
        result[idx + steps] = org[idx]
	else:
        result[idx + steps - len(org)] = org[idx]


print(result)
"
write a python program to sort and print a list	"given_list -= [6, 0, 4, 1]
sorted_list = sorted(given_list)
print(f'sorted list is {sorted_list}')
"
write a python function for a string to swap the case of all letters.	"def swap_case(s):
	return ''.join(x for x in (i.lower() if i.isupper() else i.upper()
                               for i in s))
"
write  a python program to find Cumulative sum of a list	"list = [10, 20, 30, 40, 50]
new_list = []
j = 0
for i in range(0, len(list)):
	j += list[i]
	new_list.append(j)

print(new_list)
"
list comprehension	"

s1 = eval(input(""Enter list ""))
print([i**3 for i in s1])
"
67 Write a Python function to the push the first number to the end of a list.	"def move_last(num_list):
	a = [num_list[0] for i in range(num_list.count(num_list[0]))]
	x = [i for i in num_list if i != num_list[0]]
	x.extend(a)
	return(x)
"
numbers until the list becomes empty	"def remove_nums(int_list):
	position = 3 - 1
	idx = 0
	len_list = (len(int_list))
	while len_list > 0:
        idx = (position + idx) % len_list
        print(int_list.pop(idx))
        len_list -= 1
"
digit as the value of a.	"a = input()
n1 = int(""%s"" % a)
n2 = int(""%s%s"" % (a, a))
n3 = int(""%s%s%s"" % (a, a, a))
n4 = int(""%s%s%s%s"" % (a, a, a, a))
print(n1 + n2 + n3 + n4)
"
Write a function to return the total surface area of a cylinder	"def cal_cylinder_surf_area(height, radius):
	pi = 3.14
	return 2 * pi * radius**2 * +2 * pi * radius * height
"
of the key number	"
square_dict = {num: num * num for num in range(1, 11)}
print(square_dict)
"
write a Python function to Determine all Pythagorean Triplets in the Range	"def findpythagoreantriplets(limit):
	c = 0
	m = 2
	while(c < limit):
        for n in range(1, m + 1):
            a = m * m - n * n
            b = 2 * m * n
            c = m * m + n * n
            if(c > limit):
                break
            if(a == 0 or b == 0 or c == 0):
                break
            print(a, b, c)
        m = m + 1
"
Given a Python list, remove all occurrence of a given number from the list	"num1 = 20
list1 = [5, 20, 15, 20, 25, 50, 20]


def removeValue(sampleList, val):
	return [value for value in sampleList if value != val]


resList = removeValue(list1, num1)
print(resList)
"
first and last number of a list is same	"def isFirst_And_Last_Same(numberList):
	firstElement = numberList[0]
	lastElement = numberList[-1]
	if (firstElement == lastElement):
        return True
	else:
        return False
"
either 2 or 3 and lies between 1 and 25.	"for i in range(0, 25):
	if(i % 2 != 0 and i % 3 != 0):
        print(i)
"
write python code to merge two dictionaries	"def merge_dict(dict1, dict2):
	return(dict2.update(dict1))


dict1 = {'a': 10, 'b': 8}
dict2 = {'d': 6, 'c': 4}
merge_dict(dict1, dict2)
print(dict2)
"
62 write a python function to return mode of the data	"

import statistics


def mode(arr):
	return statistics.mode(arr)
"
write a python program to define a decorator to cache property	"

class PropertyCache(object):
	

	def __init__(self, func):
        self.func = func

	def __get__(self, obj, cls):
        if not obj:
            return self
        value = self.func(obj)
        setattr(obj, self.func.__name__, value)
        return value


class Foo:
	def __init__(self):
        self._property_to_be_cached = 'result'

	@ PropertyCache
	def property_to_be_cached(self):
        print('compute')
        return self._property_to_be_cached


test = Foo()


print(test.property_to_be_cached)
print(test.property_to_be_cached)
"
Write a program to delete a 3rd character from a given string	"

String = 'welcome'


new_str = """"

for i in range(len(String)):
	if i != 2:
        new_str = new_str + String[i]


print(new_str)
"
write a python program to print even numbers in a list	"

list1 = [2, 7, 5, 64, 14]


for i in list1:
	if i % 2 == 0:
        print(i, end="" "")
"
Deepcopy in python	"

list1 = [[1], [2]]
list2 = list1.copy()  
list3 = deepcopy(list1)  
print('IDs:\nlist1: {}\nlist2: {}\nlist3: {}\n'
      .format(id(list1), id(list2), id(list3)))
"
check if all char are alphanumeric	"word = ""Hello World""
check = word.isalnum()
print(f""All char are alphanumeric?:{check}"")
"
write a python function to flatten one level of nesting	"def flatten(list_of_lists):
	from itertools import chain
	return chain.from_iterable(list_of_lists)
"
pseudo-random data	"

def get_cryptographically_secure_data(n=101):
	return secrets.token_bytes(n), secrets.token_hex(n)
"
l, bredth b and height h	"def cal_surface_area_cuboid(l, b, h):
	return 2 * (l * b + b * h + h * l)
"
write a program to print number of words in a string	"

str1 = 'It is a glorious day'


res = len(str1.split())

print(""The number of words in string are : "" + str(res))
"
Write a function that strips every vowel from a string provided	"def strip_vowels(input_str: str) -> str:

	vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']
	return ''.join(list(filter(lambda x: x not in vowels, input_str)))
"
a series of numbers.	"numbers = (1, 2, 3, 4, 5, 6, 7, 8, 9)  
count_odd = 0
count_even = 0
for x in numbers:
	if not x % 2:
        count_even += 1
	else:
        count_odd += 1
print(""Number of even numbers :"", count_even)
print(""Number of odd numbers :"", count_odd)
"
for the below list	"

def gnome_sort(alist):
	for pos in range(1, len(alist)):
        while (pos != 0 and alist[pos] < alist[pos - 1]):
            alist[pos], alist[pos - 1] = alist[pos - 1], alist[pos]
            pos = pos - 1


alist = [2, 3, 5, 6, 4, 5]
gnome_sort(alist)
print('Sorted list: ', end='')
print(alist)
"
Write a python program for implementation of Bubble Sort	"def bubbleSort(arr):
	n = len(arr)


for i in range(n - 1):
	for j in range(0, n - i - 1):
        if arr[j] > arr[j + 1]:
            arr[j], arr[j + 1] = arr[j + 1], arr[j]


arr = [64, 34, 25, 12, 22, 11, 90]
bubbleSort(arr)
"
Write a Python function for Program to find area of a circle	"def findArea(r):
	PI = 3.142
	return PI * (r * r)
"
Write a function to print all possible subarrays using recursion	"def printSubArrays(arr, start, end):
	if end == len(arr):
        return
	elif start > end:
        return printSubArrays(arr, 0, end + 1)
	else:
        print(arr[start:end + 1])
        return printSubArrays(arr, start + 1, end)


arr = [1, 2, 3]
printSubArrays(arr, 0, 0)
"
write a function to check if a number is positive or not	"

def check(num):
	if num > 0:
        return True
	return False
"
inclusive using random module and list comprehension.	"import random
print(random.choice([i for i in range(11) if i % 2 == 0]))
"
Write a Python program to convert a string to datetime.	"from datetime import datetime
date_object = datetime.strptime('Jul 1 2014 2:43PM', '%b %d %Y %I:%M%p')
print(date_object)
"
extracting the mobile number	"Phonenumber = re.compile(r'\d\d\d\d\d\d\d\d\d\d\d\d')
m = Phonenumber.search(string)
"
Write a function to calculate simple interest, given p, r, t	"

def simp_int(p, r, t):
	interest = (p * r * t) / 100
	return interest
"
target	"

from collections import defaultdict


def minSumOfLengths(arr, target):
	hashTable = defaultdict(int)
	hashTable[0] = -1
	summation = 0
	for i in range(len(arr)):
        summation = summation + arr[i]
        hashTable[summation] = i

	summation = 0
	minimumLeft = float('inf')
	result = float('inf')
	for i in range(len(arr)):
        ctr = 0
	if(x == 0 and y == 0):
        return 0
	z = 0
	for i in reversed(range(10)):
        z = x % 10 + y % 10 + z
        if z > 9:
            z = 1
        else:
            z = 0
        ctr += z
        x //= 10
        y //= 10
	if ctr == 0:
        return ""No carry operation.""
	elif ctr == 1:
        return ctr
	else:
        return ctr
        summation = summation + arr[i]
        if summation - target in hashTable:
            leftLength = i - hashTable[summation - target]
            minimumLeft = min(minimumLeft, leftLength)
        if summation + target in hashTable and minimumLeft < float('inf'):
            rightLength = hashTable[summation + target] - i
            result = min(
                result, hashTable[summation + target] - i + minimumLeft)

	if result == float('inf'):
        return -1
	return result
"
write a  program to get th ematched elemnets from two list	"a = [1, 2, 3, 4, 5]
b = [9, 8, 7, 6, 5]
[i for i, j in zip(a, b) if i == j]
"
Write a Python function to calculate factorial of a given no using closer	"

def fact():
	cache = {0: 1, 1: 1}

	def calc_fib(n):
        if n not in cache:
            print(f'Calculating fact({n})')
            cache[n] = calc_fib(n - 1) * n
        return cache[n]
	return calc_fib
"
parallel in a given list	"def cal_total_res_in_parallel(res_list: list) -> float:
	return sum([1 / r for r in res_list])
"
48. Python Program to Illustrate Different Set Operations	"E = {0, 2, 4, 6, 8}
N = {1, 2, 3, 4, 5}

print(""Union of E and N is"", E | N)
print(""Intersection of E and N is"", E & N)
print(""Difference of E and N is"", E - N)
print(""Symmetric difference of E and N is"", E ^ N)
"
String Shorthands	"

test_str = 'Gfg is best . Geeks are good and Geeks like Gfg'


print(""The original string is : "" + str(test_str))
res = {key: test_str.count(key) for key in test_str.split()}
print(""The words frequency : "" + str(res))
"
Write a program to generate the Fibonacci sequence up to n-th term	"

nterms = int(10000)
"
a series of numbers.	"

numbers = (1, 2, 3, 4, 5, 6, 7, 8, 9)  
count_odd = 0
count_even = 0
for x in numbers:
	if not x % 2:
        count_even += 1
	else:
        count_odd += 1
"
write a python program to print the command line arguements given to a file	"

import sys
args = sys.argv
print(args)
"
write a python function to return the absolute difference between two numbers	"

def abs_diff(num1, num2):
	return abs(num1 - num2)
"
write a function to check if a number is perfect square or not	"import math


def checksquare(num):
	x = int(math.sqrt(num))
	if x * x == num:
        return True
	return False
"
write a python function that returns the gcd of two numbers	"def gcd(x, y):
	if x > y:
        smaller = y
	else:
        smaller = x

	for i in range(1, smaller + 1):
        if((x % i == 0) and (y % i == 0)):
            gcd = i

	return gcd
"
write a Function to convert the time from 12 hour format to 24 hour format	"def convert24(str1):

	if str1[-2:] == ""AM"" and str1[:2] == ""12"":
        return ""00"" + str1[2:-2]

	elif str1[-2:] == ""AM"":
        return str1[:-2]

	elif str1[-2:] == ""PM"" and str1[:2] == ""12"":
        return str1[:-2]

	else:

        return str(int(str1[:2]) + 12) + str1[2:8]
"
Write a function to implement stooge sort	"def stoogesort(arr, l, h):
	if l >= h:
        return
	if arr[l] > arr[h]:
        t = arr[l]
        arr[l] = arr[h]
        arr[h] = t
	if h - l + 1 > 2:
        t = (int)((h - l + 1) / 3)
        stoogesort(arr, l, (h - t))
        stoogesort(arr, l + t, (h))
        stoogesort(arr, l, (h - t))


arr = [2, 4, 5, 3, 1]
n = len(arr)
stoogesort(arr, 0, n - 1)
for i in range(0, n):
	print(arr[i], end='')
"
Write a function to find power of number using recursion	"def power(N, P):
	if (P == 0 or P == 1):
        return N
	else:
        return (N * power(N, P - 1))


print(power(5, 2))
"
46 write Python Function to print leaders in array	"def printLeaders(arr, size):

	for i in range(0, size):
        for j in range(i + 1, size):
            if arr[i] < arr[j]:
                break
        if j == size - 1:
            print(arr[i])


arr = [16, 17, 4, 3, 5, 2]
printLeaders(arr, len(arr))
"
write a function to rotate string left by a given length	"
def rotate_left(input, d):

	Lfirst = input[0: d]
	Lsecond = input[d:]
	return (Lsecond + Lfirst)
"
write a program Creating a Dictionary  with dict() method	"Dict = dict({1: 'Geeks', 2: 'For', 3: 'Geeks'})
print(""\nDictionary with the use of dict(): "")
print(Dict)
"
write a function to reverse words of string	"

def rev_sentence(sentence):

	words = sentence.split(' ')

	reverse_sentence = ' '.join(reversed(words))

	return reverse_sentence
"
Write a Python function to remove leading zeros from an IP address	"import re
regex = '\\.[0]*'


def remove_leading_zeros(ip):
	modified_ip = re.sub(regex, '.', ip)
	return modified_ip
"
"[""Hockey"",""Football""]."	"subjects = [""I"", ""You""]
verbs = [""Play"", ""Love""]
objects = [""Hockey"", ""Football""]
for i in range(len(subjects)):
	for j in range(len(verbs)):
        for k in range(len(objects)):
            sentence = ""%s %s %s."" % (subjects[i], verbs[j], objects[k])
            print(sentence)
"
write a python program to replace blank space to 1	"def f12(x):
	yield x + 1
	print(""test"")
	yield x + 2


g = f12(9)
print(next(g))
"
strings. Print the original and final lists.	"
test_list = ['gfg', '	', ' ', 'is', '			', 'best']

print(""The original list is : "" + str(test_list))

res = [ele for ele in test_list if ele.strip()]

print(""List after filtering non-empty strings : "" + str(res))
"
Write a Python Program to Check If Two Numbers are Amicable Numbers	"

def amicable_no_check(x, y):
	sum1 = 0
	sum2 = 0
	for i in range(1, x):
        if x % i == 0:
            sum1 += i
	for j in range(1, y):
        if y % j == 0:
            sum2 += j
	if(sum1 == y and sum2 == x):
        return True
	else:
        return False
"
Write a python program to implement a Stack using One Queue	"

class Stack:
	def __init__(self):
        self.q = Queue()

	def is_empty(self):
        return self.q.is_empty()

	def push(self, data):
        self.q.enqueue(data)

	def pop(self):
        for _ in range(self.q.get_size() - 1):
            dequeued = self.q.dequeue()
            self.q.enqueue(dequeued)
        return self.q.dequeue()


class Queue:
	def __init__(self):
        self.items = []
        self.size = 0

	def is_empty(self):
        return self.items == []

	def enqueue(self, data):
        self.size += 1
        self.items.append(data)

	def dequeue(self):
        self.size -= 1
        return self.items.pop(0)

	def get_size(self):
        return self.size


s = Stack()

print('Menu')
print('push <value>')
print('pop')
print('quit')

while True:
	do = input('What would you like to do? ').split()

	operation = do[0].strip().lower()
	if operation == 'push':
        s.push(int(do[1]))
	elif operation == 'pop':
        if s.is_empty():
            print('Stack is empty.')
        else:
            print('Popped value: ', s.pop())
	elif operation == 'quit':
        break
"
after removing the 0th,4th,5th numbers in [12,24,35,70,88,120,155].	"li = [12, 24, 35, 70, 88, 120, 155]
li = [x for (i, x) in enumerate(li) if i not in (0, 4, 5)]
print(li)
"
write a python program to print binary left shift on a variable	"a = 60
binary_left_shift = a << 2
print(binary_left_shift)
"
print the first 5 elements in the list.	"def printList():
	li = list()
	for i in range(1, 21):
        li.append(i**2)
	print(li[:5])
"
Write a function to return the volume of a cube	"def cal_cube_volume(side: float) -> float:
	return side**3
"
equation ax**2 + bx + c = 0	"def prod_of_roots(a: float, b: float):
	if a:
        return -b / a
	else:
        return None
"
9 write a python function to update a dictionary with a new key, value pair	"

def update_dictionary(dict, key, value):
	dict[str(key)] = value
	return dict
"
resistance is R and voltage is V	"def cal_current(resistance: float, voltage: float) -> float:
	return voltage / resistance
"
write a function to print if a number is even or odd	"

def oddeven(num):
	if num % 2 == 0:
        print('even')
	else:
        print('odd')
"
write a python program that prints the area of a rectangle	"length = 10
width = 5
print(f'Area: {length * width}')
"
write a python function to print the hexadecimal value of a decimal number	"def print_hexadecimal(dec):
	print(hex(dec))
"
39. Python Program to Find Factorial of Number Using Recursion	"def recur_factorial(n):
	if n == 1:
        return n
	else:
        return n * recur_factorial(n - 1)


num = 7
if num < 0:
	print(""Sorry, factorial does not exist for negative numbers"")
elif num == 0:
	print(""The factorial of 0 is 1"")
else:
	print(""The factorial of"", num, ""is"", recur_factorial(num))
"
width. The Rectangle class has a method which can compute the area.	"class Rectangle(object):
	def __init__(self, l, w):
        self.length = l
        self.width = w

	def area(self):
        return self.length * self.width


aRectangle = Rectangle(2, 10)
print(aRectangle.area())
"
Write a python function to find perimeter Of Rectangle	"def perimeterRectangle(a, b):
	return (2 * (a + b))
"
check if all char are alphanumeric	"word = ""Hello World""
check = word.isalnum()
print(f""All char are alphanumeric?:{check}"")
"
upper case letters and lower case letters.	"s = input()
d = {""UPPER CASE"": 0, ""LOWER CASE"": 0}
for c in s:
	if c.isupper():
        d[""UPPER CASE""] += 1
	elif c.islower():
        d[""LOWER CASE""] += 1
	else:
        pass
print(""UPPER CASE"", d[""UPPER CASE""])
print(""LOWER CASE"", d[""LOWER CASE""])
"
first number by second number and return the quotient and remainder	"def divide_first_number_by_second(num1, num2):
	return (num1 // num2), (num1 % num2)
"
write a python program that prints the area of a square	"side = 5
print(f'Area: {side * side}')
"
Write a function to return the circumference of a circle	"def cal_circumference(r):
	pi = 3.14
	return 2 * pi * r
"
rabbits and how many chickens do we have?	"def solve(numheads, numlegs):
	ns = ""No solutions!""
	for i in range(numheads + 1):
        j = numheads - i
        if 2 * i + 4 * j == numlegs:
            return i, j
	return ns, ns
"
37 write a program to remove i-th indexed character from a string	"
def remove(string, i):

	a = string[: i]
	b = string[i + 1:]
	return a + b
"
97 write a python program to Join tuple elements in a list and print it	"
test_list = [('geeks', 'for', 'geeks'),
             ('computer', 'science', 'portal')]

print(""The original list is : "" + str(test_list))
l = []
"
11 access index of a character in a string python	"foo = 'Hello'
foo.find('lo')
"
Write a Python function to Count Set Bits in a Number	"

def count_set_bits(n):
	count = 0
	while n:
        n &= n - 1
        count += 1
	return count
"
Arrange string characters such that lowercase letters should come first	"str1 = ""PyNaTive""
lower = []
upper = []
for char in str1:
	if char.islower():
        lower.append(char)
	else:
        upper.append(char)
sorted_string = ''.join(lower + upper)
print(sorted_string)
"
write a python program uses else with for loop	"seq = ""abcde""
for k in seq:
	if k == ""f"":
        break
else:
	print(""f Not Found!"")
"
Sort the string list alphabetically	"

thislist = [""orange"", ""mango"", ""kiwi"", ""pineapple"", ""banana""]
thislist.sort()
print(f""Sorted List:{thislist}"")
"
write a program to check if a substring is present in a given string	"

string = ""how are you?""
substring = ""are""
if (string.find(substring) == -1):
	print(""NO"")
else:
	print(""YES"")
"
write a python function to convert hours to minutes	"

def convert_to_minutes(num_hours):
	minutes = num_hours * 60
	return minutes
"
Write a Python program to add a prefix text to all of the lines in a string.	"import textwrap
sample_text = '''
		Python is a widely used high-level, general-purpose, interpreted,
		dynamic programming language. Its design philosophy emphasizes
		code readability, and its syntax allows programmers to express
		concepts in fewer lines of code than possible in languages such
		as C++ or Java.
		'''
text_without_Indentation = textwrap.dedent(sample_text)
wrapped = textwrap.fill(text_without_Indentation, width=50)
final_result = textwrap.indent(wrapped, '> ')
"
last element in each tuple from a given list of non-empty tuples.	"

def last(n): return n[-1]


def sort_list_last(tuples):
	return sorted(tuples, key=last)


print(sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)]))
"
first n natural numbers	"

n = 10
sum = 0
for i in range(1, n + 1):
	sum += i**3


print(f""{sum}"")
"
Python String Operations	"str1 = 'Good'
str2 = 'Morning!'
"
7 but are not a multiple of 5 between 2000 and 3200 (both included).	"

l = []
for i in range(2000, 3201):
	if (i % 7 == 0) and (i % 5 != 0):
        l.append(str(i))
"
return the remaining list	"

def remove_odd(my_list):
	result = list(filter(lambda x: (x % 2 == 0), my_list))
	return result
"
Test if string contains upper case	"word = ""Hello World""
check = word.isupper()
print(f""String contains upper case?:{check}"")
"
Write a Python program to count and display the vowels of a given text	"

def vowel(text):
	vowels = ""aeiuoAEIOU""
	print(len([letter for letter in text if letter in vowels]))
	print([letter for letter in text if letter in vowels])


vowel('zekelabs')
"
values and prints this list.	"test_dict = {'Geeks': 2, 'for': 1, 'CS': 3}
res = list(sum(sorted(test_dict.items(), key=lambda x: x[1]), ()))
print(""List after conversion from dictionary : "", res)
"
"list slicing and ""+"" operator"	"test_list = [1, 4, 5, 6, 7, 8, 9, 12]
print(""The original list is : "" + str(test_list))
test_list = test_list[1:] + test_list[: 1]
print(""The list after shift is : "" + str(test_list))
"
write a python function that takes in two numbers and returns their LCM	"def lcm(num1, num2):
	bigger = num1 if num1 > num2 else num2
	while True:
        if (bigger % num1 == 0) and (bigger % num2 == 0):
            break
        bigger += 1
	return bigger
"
2. write a python program to subtract two numbers	"num1 = 1.5
num2 = 6.3
sum = num1 - num2
print(f'Sub: {sum}')
"
Bubble Sort	"

a = [2, 3, 8, 9, 2, 4, 6]
for i in range(0, len(a)):
	for j in range(0, len(a) - i - 1):
        if(a[j] > a[j + 1]):
            temp = a[j]
            a[j] = a[j + 1]
            a[j + 1] = temp
"
Write a program to compute: f(n)=f(n-1)+100 when n>0 and f(0)=1	"def f(n):
	if n == 0:
        return 0
	else:
        return f(n - 1) + 100


n = int(raw_input())
print(f(n))
"
write a python program that prints the area of a rectangle	"length = 10
width = 5
print(f'Area: {length * width}')
"
a List	"

def find_odd_occurring(alist):
	
	ans = 0

	for element in alist:
        ans ^= element

	return ans
"
nonlocal keyword comes in handy	"def outer():
	x = 1
	print('outer before:', x)

	def inner():
        nonlocal x
        x = 2
        print(""inner:"", x)
	inner()
	print(""outer after:"", x)


outer()
"
write a program to check if a string is binary or not	"

str1 = ""01110011 a""


set1 = set(str1)


if set1 == {'0', '1'} or set1 == {'0'} or set1 == {'1'}:
	print(""string is binary"")
else:
	print(""string is not binary"")
"
Write a Program to implement validation of a Password	"class Password:
	def __init__(self, password):
        self.password = password

	def validate(self):
        vals = {
            'Password must contain an uppercase letter.': lambda s: any(x.isupper() for x in s),
            'Password must contain a lowercase letter.': lambda s: any(x.islower() for x in s),
            'Password must contain a digit.': lambda s: any(x.isdigit() for x in s),
            'Password must be at least 8 characters.': lambda s: len(s) >= 8,
            'Password cannot contain white spaces.': lambda s: not any(x.isspace() for x in s)
        }
        valid = True
        for n, val in vals.items():
            if not val(self.password):
                valid = False
                return n
        return valid


input_password = ""Ishwar@12Su@ 1'""
p = Password(input_password)
if p.validate() is True:
	print('Password Valid')
else:
	print(p.validate())
"
65 write a python program to extract item with Maximum Tuple Value	"

test_dict = {'gfg': (4, 6),
             'is': (7, 8),
             'best': (8, 2)}


tup_idx = 1

res = max(test_dict.items(), key=lambda ele: ele[1][tup_idx])
print(""The extracted maximum element item : "" + str(res))
"
write a python function to check whether the given number is fibonacci or not	"def fiboacci_number_check(n):
	if(isinstance(n, int)):
        result = list(
            filter(
                lambda num: int(math.sqrt(num)) * int(math.sqrt(num)) == num,
                [5 * n * n + 4, 5 * n * n - 4]))
        return bool(result)
	else:
        raise TypeError(""Input should be of type Int"")
"
Write a python program to convert decimal to binary	"Decimal = input(""Enter Number: "")
num = int(Decimal)
Binary = """"
while num >= 1:
	i = num % 2
	num = num // 2
	Binary += str(i)
print(""Binary Equivalent of {} is {}"".format(Decimal, Binary[::-1]))
"
presence and print it	"

test_list = [(1, 4, 6), (5, 8), (2, 9), (1, 10)]
s = []
tar_list = [6, 10]

for i in test_list:
	for j in i:
        if j in tar_list:
            s.append(i)
print(s)
"
(excluding one number) and returns the missing number.	"def print_miss_num(l: list):
	print(f'Missing number is {55-sum(l)}')
"
Write a function to return the surface area of a hemi-sphere	"def cal_area_hemisphere(radius):
	pi = 3.14
	return 2 * pi * (radius**2)
"
string in single traversal.	"def moveSpaces(str1):
	no_spaces = [char for char in str1 if char != ' ']
	space = len(str1) - len(no_spaces)
	result = ' ' * space
	return result + ''.join(no_spaces)
"
69 write a program to shuffle a deck of card	"

deck = list(
	itertools.product(
        range(
            1, 14), [
            'Spade', 'Heart', 'Diamond', 'Club']))
random.shuffle(deck)


print(""You got:"")
for i in range(5):
	print(deck[i][0], ""of"", deck[i][1])
"
51 write a python program to perform Softmax operation on an input array	"

import math


def softmax(arr):
	e_arr = [math.exp(x) for x in arr]
	e_soft = [i / sum(e_arr) for i in e_arr]
	return e_soft


print(softmax([3.0, 1.0, 0.2]))
"
write a program to subtract two matrix	"A = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
B = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]


rowsA = len(A)
colsA = len(A[0])
rowsB = len(B)
colsB = len(B[0])
if rowsA != rowsB or colsA != colsB:
	raise ArithmeticError('Matrices are NOT the same size.')


C = []
while len(C) < rowsA:
	C.append([])
	while len(C[-1]) < colsB:
        C[-1].append(0.0)


for i in range(rowsA):
	for j in range(colsB):
        C[i][j] = A[i][j] - B[i][j]


print(""Subtracted Array"")
for i in range(rowsA):
	row = '|'
	for b in range(colsA):
        row = row + ' ' + str(C[i][b])
	print(row + ' ' + '|')
"
Write a function that returns relu value of the input	"def relu(x: float) -> float:
	x = 0 if x < 0 else x
	return x
"
None, if the second number is 0	"def divide(num1, num2):
	if num2 == 0:
        return
	else:
        return num1 / num2
"
Write a Python Program to Convert Gray Code to Binary	"

def gray_to_binary(n):
	
	n = int(n, 2)

	mask = n
	while mask != 0:
        mask >>= 1
        n ^= mask
	return bin(n)[2:]
"
Pretty print JSON	"import json
person_string = '{""name"": ""Bob"", ""languages"": ""English"", ""numbers"": [2, 1.6, null]}'
person_dict = json.loads(person_string)
print(json.dumps(person_dict, indent=4, sort_keys=True))
"
write the program to remove empty tuples from a list	"def Remove(tuples):
	tuples = filter(None, tuples)
	return tuples
"
Write a function to check whether a number if perfect or not	"

def is_perfect(n):
	sum_ = 0
	for i in range(1, n // 2 + 1):
        if n % i == 0:
            sum_ += i
	if sum_ == n:
        return True
	return False
"
write s python program to print the union of two sets	"

A = {1, 2, 3, 4, 5}
B = {4, 5, 6, 7, 8}
print(A | B)
"
string input by console.	"dic = {}
s = raw_input()
for s in s:
	dic[s] = dic.get(s, 0) + 1
print('\n'.join(['%s,%s' % (k, v) for k, v in dic.items()]))
"
of elements is the highest.	"print(max(num, key=sum))
"
output# -2	"

def second_smallest(numbers):
	a1, a2 = float('inf'), float('inf')
	for x in numbers:
        if x <= a1:
            a1, a2 = x, a1
        elif x < a2:
            a2 = x
	return a2


print(second_smallest([1, 2, -8, -2, 0]))
"
of given list of numbers	"lst = eval(input(""Enter list : ""))
mean = 0
sum = 0
for i in lst:
	sum = sum + i
mean = sum / len(lst)
print("" The mean of given list is :"", mean)
"
write a python program to print prime factors of user provided number	"

import math


def primeFactors(n):
	while n % 2 == 0:
        print(2),
        n = n / 2
	for i in range(3, int(math.sqrt(n)) + 1, 2):
        while n % i == 0:
            print(i),
            n = n / i
	if n > 2:
        print(n)
"
charged particles with charge q1 and q2 at a distance d apart	"def cal_electrostatic_force(q1, q2, d):
	k = 9 * (10**9)
	return (k * q1 * q2) / (d**2)
"
write a python function to return the natural logarithm of a number	"def get_natural_log_value(i):
	import math
	return(math.log(i))
"
write a python program to make use of setdefault for missing dictionary keys	"

a_dict = {'a': 1}
a_dict.setdefault('b', 2)
print(f'After appending with new value:{a_dict}')
"
2. write a python program to subtract two numbers	"num1 = 1.5
num2 = 6.3
sum = num1 - num2
print(f'Sub: {sum}')
"
write a program to find and print the remainder of two number	"

num1 = 12
num2 = 10


ratio = num1 % num2
print(f'remainder:{ratio}')
"
30. Python Program to find Largest of Three Numbers	"

a = float(input(""Please Enter the First value: ""))
b = float(input(""Please Enter the First value: ""))
c = float(input(""Please Enter the First value: ""))


if (a > b and a > c):
	print(""{0} is Greater Than both {1} and {2}"". format(a, b, c))
elif (b > a and b > c):
	print(""{0} is Greater Than both {1} and {2}"". format(b, a, c))
elif (c > a and c > b):
	print(""{0} is Greater Than both {1} and {2}"". format(c, a, b))
else:
	print(""Either any two values or all the three values are equal"")
"
the results	"

import random
import os
import re
os.system('cls' if os.name == 'nt' else 'clear')
while (1 < 2):
	print(""\n"")
	print(""Rock, Paper, Scissors - Shoot!"")
	userChoice = input(""Choose your weapon [R]ock], [P]aper, or [S]cissors: "")
	if not re.match(""[SsRrPp]"", userChoice):
        print(""Please choose a letter:"")
        print(""[R]ock, [S]cissors or [P]aper."")
        continue
	print(""You chose: "" + userChoice)
	choices = ['R', 'P', 'S']
	opponenetChoice = random.choice(choices)
	print(""I chose: "" + opponenetChoice)
	if opponenetChoice == str.upper(userChoice):
        print(""Tie! "")
	elif opponenetChoice == 'R' and userChoice.upper() == 'S':
        print(""Scissors beats rock, I win! "")
        continue
	elif opponenetChoice == 'S' and userChoice.upper() == 'P':
        print(""Scissors beats paper! I win! "")
        continue
	elif opponenetChoice == 'P' and userChoice.upper() == 'R':
        print(""Paper beat rock, I win! "")
        continue
	else:
        print(""You win!"")
"
write a python program that converts a binary number to decimal and prints it	"binary_num = '1010101'
decimal_num = int(binary_num, 2)
print(decimal_num)
"
is 0 by default.	"class Shape(object):
	def __init__(self):
        pass

	def area(self):
        return 0


class Square(Shape):
	def __init__(self, l):
        Shape.__init__(self)
        self.length = l

	def area(self):
        return self.length * self.length


aSquare = Square(3)
print(aSquare.area())
"
Define a class named American and its subclass NewYorker.	"class American(object):
	pass


class NewYorker(American):
	pass
"
write a python program to Print Quotient and Remainder of two numbers	"a = 15
b = 4
quotient = a // b
remainder = a % b
print(""Quotient is:"", quotient)
print(""Remainder is:"", remainder)
"
14. python function to create adders	"def create_adders():
	adders = []
	for n in range(1, 4):
        adders.append(lambda x, y=n: x + y)
	return adders


adders = create_adders()
"
Convert Decimal to Binary, Octal and Hexadecimal	"dec = 344
print(""The decimal value of"", dec, ""is:"")
print(bin(dec), ""in binary."")
print(oct(dec), ""in octal."")
print(hex(dec), ""in hexadecimal."")
"
Write a program to get 3rd and last character of a given string	"

string = ""Good Night""
print(""\nSlicing characters between ""
      + ""3rd and last character: "")
print(string[3:-1])
"
print true or False	"
list1 = ['the', 'sun', 'rises', '', 'the', 'east']
res = any(len(ele) == 0 for ele in list1)
print(""Is any string empty in list? : "" + str(res))
"
are composed of letters only.	"import re
emailAddress = 'bing@google.com'
pat2 = ""(\\w+)@((\\w+\\.)+(com))""
r2 = re.match(pat2, emailAddress)
print(r2.group(1))
"
write a python function to make permutations from a list with given length	"def get_permutations(data_list, l=2):
	return list(permutations(data_list, r=l))
"
write a program to print the longest key in a dictioinary	"dict_1 = {""key1"": 10, ""keeeey2"": 2, ""ky3"": 30}
max_key = ''
for key in dict_1:
	if len(key) > len(max_key):
        max_key = key
print(max_key)
"
Write a Python program to print shape of an array/ matrix	"import numpy as np
A = np.array([[1, 2, 3], [2, 3, 5], [3, 6, 8], [323, 623, 823]])
print(""Shape of the matrix A: "", A.shape)
"
numbers and other numbers occur even number.	"def odd_occurrence(arr):

	
	result = 0

	
	for element in arr:
        
        result = result ^ element

	return result
"
two given numbers	"def calculate_hcf(x1, x2):
	if x1 == 0:
        return x2
	else:
        return hcf(x2 % x1, x1)
"
1 Write a function to print given interger to binary	"def int_to_binary(num: int):
	
	if isinstance(num, int):
        print(f'The binary of {num} is {bin(num).replace(""0b"","""")}')
	else:
        raise ValueError('Invalid Input')
"
Write a function to append two lists	"

def append_lists(l1: list, l2: list) -> list:
	return l1.extend(l2)
"
Write a Python Program to Multiply All the Items in a Dictionary	"

def mul_dict(d):
	tot = 1
	for i in d:
        tot = tot * d[i]
	return tot
"
Write a program to left rotate and print a list given	"

arr = [1, 2, 3, 4, 5]

n = 3


for i in range(0, n):
	first = arr[0]

	for j in range(0, len(arr) - 1):

        arr[j] = arr[j + 1]

	arr[len(arr) - 1] = first


print(""Array after left rotation: "")
for i in range(0, len(arr)):
	print(arr[i]),
"
Write a function that splits the elements of string	"def split_elements(s: str, seperator) -> list:
	return s.split(seperator)
"
rate r and time in years y	"def get_ci(p: float, r: float, t: float, n: float) -> float:
	return round(p * ((1 + (r / (n * 100)))**(n * t)) - p, 2)
"
dictionary	"Dict = {1: 'Geeks', 'name': 'For', 3: 'Geeks'}


pop_ele = Dict.popitem()
print(""\nDictionary after deletion: "" + str(Dict))
print(""The arbitrary pair returned is: "" + str(pop_ele))
"
47. Python Program to Sort Words in Alphabetic Order	"

my_str = ""Hello this Is an Example With cased letters""
words = [word.lower() for word in my_str.split()]
words.sort()

print(""The sorted words are:"")
for word in words:
	print(word)
"
palindrome or not	"

def isPalindrome(string):
	left_pos = 0
	right_pos = len(string) - 1


while right_pos >= left_pos:
	if not string[left_pos] == string[right_pos]:
        return False
	left_pos += 1
	right_pos -= 1
	return True
print(isPalindrome('aza'))
"
and radius R	"def cal_mi_ring(mass: float, radius: float) -> float:
	return mass * (radius**2)
"
ax**2 + bx + c = 0	"def sum_of_roots(a: float, c: float):
	if a:
        return c / a
	else:
        return None
"
longest one	"def find_longest_word(words_list):
	word_len = []
	for n in words_list:
        word_len.append((len(n), n))
        word_len.sort()


return word_len[-1][1]


print(find_longest_word([""PHP"", ""python"", ""zekelabs""]))
"
55 Write a Python function to check if a number is a power of a given base.	"import math


def isPower(n, base):
	if base == 1 and n != 1:
        return False
	if base == 1 and n == 1:
        return True
	if base == 0 and n != 1:
        return False
	power = int(math.log(n, base) + 0.5)
	return base ** power == n
"
on speend and given time	"def cal_distance(time: float, speed: float) -> float:
	return time * speed
"
write a function to replace all occurances of a substring in a string	"

str1 = ""Hello! It is a Good thing""
substr1 = ""Good""
substr2 = ""bad""


replaced_str = str1.replace(substr1, substr2)


print(""String after replace :"" + str(replaced_str))
"
write a python function to count number of times a function is called	"def counter(fn):
	count = 0

	def inner(*args, **kwargs):
        nonlocal count
        count += 1
        print(f'Function {fn.__name__} was called {count} times.')
        return fn(*args, **kwargs)
	return inner
"
This function computes LCM	"def compute_lcm(x, y):
	lcm = (x * y) // compute_gcd(x, y)
	return lcm


num1 = 54
num2 = 24


print(""The L.C.M. is"", compute_lcm(num1, num2))
"
print it	"

test_dict = {""Gfg"": [6, 7, 3],
             ""is"": [8, 10, 12, 16],
             ""Best"": [10, 16, 14, 6]}


res = dict()
for sub in test_dict:
	flag = 1
	for ele in test_dict[sub]:
        if ele % 2 != 0:
            flag = 0
            break
	res[sub] = True if flag else False

print(""The computed dictionary : "" + str(res))
"
Define a class named American and its subclass NewYorker.	"class American(object):
	pass


class NewYorker(American):
	pass


anAmerican = American()
aNewYorker = NewYorker()
print(anAmerican)
print(aNewYorker)
"
number and print the result	"def findfactorial(num):
	factorial = 1
	if num < 0:
        print(""Sorry, factorial does not exist for negative numbers"")
	elif num == 0:
        print(""The factorial of 0 is 1"")
	else:
        for i in range(1, num + 1):
            factorial = factorial * i
        print(""The factorial of"", num, ""is"", factorial)


findfactorial(3)
"
20. python program to calculate the time taken to create a float and decimal	"import time


def run_float(n=1):
	for i in range(n):
        a = 3.1415


def run_decimal(n=1):
	for i in range(n):
        a = Decimal('3.1415')


n = 10000000
start = time.perf_counter()
run_float(n)
end = time.perf_counter()


print('float: ', end - start)


start = time.perf_counter()
run_decimal(n)
end = time.perf_counter()


print('decimal: ', end - start)
"
Write a python program to implement Dequeue	"

class Dequeue:
	def __init__(self):
        self.items = []

	def is_empty(self):
        return self.items == []

	def append(self, data):
        self.items.append(data)

	def append_left(self, data):
        self.items.insert(0, data)

	def pop(self):
        return self.items.pop()

	def pop_left(self):
        return self.items.pop(0)


q = Dequeue()
print('Menu')
print('append <value>')
print('appendleft <value>')
print('pop')
print('popleft')
print('quit')

while True:
	do = input('What would you like to do? ').split()

	operation = do[0].strip().lower()
	if operation == 'append':
        q.append(int(do[1]))
	elif operation == 'appendleft':
        q.append_left(int(do[1]))
	elif operation == 'pop':
        if q.is_empty():
            print('Dequeue is empty.')
        else:
            print('Popped value from right: ', q.pop())
	elif operation == 'popleft':
        if q.is_empty():
            print('Dequeue is empty.')
        else:
            print('Popped value from left: ', q.pop_left())
	elif operation == 'quit':
        break
"
frequencies	"string_words = '''This assignment is of 900 marks. Each example if 9 marks.
If your example is similar to someone else, then you score less.
The formula we will use is 9/(repeated example). That means if 9 people write same example,
then you get only 1. So think different! (if examples are mentioned here and in the sample file, you will score less)'''
word_list = string_words.split()
word_freq = [word_list.count(n) for n in word_list]
print(""Pairs (Words and Frequencies:\n {}"".format(
	str(list(zip(word_list, word_freq)))))
"
(both included). and then the program should print the dictionary.	"n = 8
d = dict()
for i in range(1, n + 1):
	d[i] = i * i * i
print(d)
"
gas equation - Volume V, and Temperatue T are given	"def find_pressure_of_ideal_gas(volume: float, temp: float, n: float) -> float:
	r = 8.3145
	return (n * r * temp) / volume
"
Write a function that returns log of a function	"def log(x: float) -> float:
	import math
	return math.log(x)
"
Newton's method	"

class NewtonRaphsonSolver:
	def __init__(self, f, x, dfdx, min_tol=1e-3):
        self.func = f
        self.x = x
        self.derivative = dfdx
        self.min_tol = min_tol

	def calculate(self):
        func_val = self.func(self.x)
        iterations = 0
        while abs(func_val) > self.min_tol and iterations < 100:
            self.x = self.x - float(func_val) / self.derivative(self.x)
            func_val = self.func(self.x)
            iterations += 1

        if iterations <= 100:
            return self.x
        else:
            return None


def f(x):

	return x ** 4 - 16


def dfdx(x):
	return 4 * x ** 3


nrs = NewtonRaphsonSolver(f, 10, dfdx)
print(nrs.calculate())
"
31 write a python program to  check if string starts with any element in list	"

test_string = ""GfG is best""
pref_list = ['best', 'GfG', 'good']
res = list(filter(test_string.startswith, pref_list)) != []
print(""Does string start with any prefix list sublist ? : "" + str(res))
"
22 write a program to merge dict using update() method	"def Merge(dict1, dict2):
	return(dict2.update(dict1))
"
Write a function to return the area of a circle of raidus r	"def cal_area_circle(r):
	pi = 3.14
	return pi * r**2
"
Write a function that returns relu value of the input	"def relu(x: float) -> float:
	x = 0 if x < 0 else x
	return x
"
Create and print a dictionary	"thisdict = {
	""brand"": ""Ford"",
	""model"": ""Mustang"",
	""year"": 1964
}
print(f""Sample Dictionary:{thisdict}"")
"
write a program to print least frequent character in a string	"

str1 = ""watch the match""
all_freq = {}
for i in str1:
	if i in all_freq:
        all_freq[i] += 1
	else:
        all_freq[i] = 1
res = min(all_freq, key=all_freq.get)
print(""Minimum of all characters is: "" + str(res))
"
largest of three numbers using elif statement	"

a = float(input(""Please Enter the First value: ""))
b = float(input(""Please Enter the First value: ""))
c = float(input(""Please Enter the First value: ""))


if (a > b and a > c):
	print(""{0} is Greater Than both {1} and {2}"". format(a, b, c))
elif (b > a and b > c):
	print(""{0} is Greater Than both {1} and {2}"". format(b, a, c))
elif (c > a and c > b):
	print(""{0} is Greater Than both {1} and {2}"". format(c, a, b))
else:
	print(""Either any two values or all the three values are equal"")
"
Write a python program to print odd numbers in a List	"
list1 = [10, 21, 4, 45, 66, 93, 11]

odd_nos = list(filter(lambda x: (x % 2 != 0), list1))

print(""Odd numbers in the list: "", odd_nos)
"
Python code to demonstrate to remove the tuples if certain criteria met	"ini_tuple = [('b', 100), ('c', 200), ('c', 45),
             ('d', 876), ('e', 75)]


print(""intial_list"", str(ini_tuple))
result = []
for i in ini_tuple:
	if i[1] <= 100:
        result.append(i)
print(""Resultant tuple list: "", str(result))
"
even numbers in the given tuple (1,2,3,4,5,6,7,8,9,10).	"tp = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
li = list()
for i in tp:
	if tp[i] % 2 == 0:
        li.append(tp[i])
tp2 = tuple(li)
print(tp2)
"
Write a python function to print staircase pattern	"

def pattern(n):

	for i in range(1, n + 1):
        
        k = i + 1 if(i % 2 != 0) else i

        for g in range(k, n):
            if g >= k:
                print(end=""  "")

        for j in range(0, k):
            if j == k - 1:
                print("" * "")
            else:
                print("" * "", end="" "")
"
write a Python program to demonstrate working of Swap Binary substring	"test_str = ""geeksforgeeks""


print(""The original string is : "" + test_str)


temp = str.maketrans(""geek"", ""abcd"")
test_str = test_str.translate(temp)


print(""The string after swap : "" + test_str)
"
Join Two Sets	"set1 = {""a"", ""b"", ""c""}
set2 = {1, 2, 3}
set3 = set2.union(set1)
print(f""Joined Set:{set3}"")
"
print it.	"ini_list = [{'a': [1, 2, 3], 'b':[4, 5, 6]},
            {'c': [7, 8, 9], 'd':[10, 11, 12]}]
temp_dict = {}
result = []
for ini_dict in ini_list:
	for key in ini_dict.keys():
        if key in temp_dict:
            temp_dict[key] += ini_dict[key]
        else:
            temp_dict[key] = ini_dict[key]
for key in temp_dict.keys():
	result.append(tuple([key] + temp_dict[key]))
print(""Resultant list of tuples: {}"".format(result))
"
term using list comprehension	"

s1 = eval(input(""Enter list ""))
print([i**0.5 for i in s1])
"
6 write a python function that concatenates two stings	"

def concat(s1, s2):
	return s1 + s2
"
a List where Words can Repeat	"

a = ['the', 'tsai', 'python', 'a', 'the', 'a']
c = []
count = 0
b = 'a'
n = 3
for i in a:
	if(i == b):
        count = count + 1
        if(count != n):
            c.append(i)
	else:
        c.append(i)
if(count == 0):
	print(""Item not found "")
else:
	print(""The number of repetitions is: "", count)
	print(""Updated list is: "", c)
	print(""The distinct elements are: "", set(a))
"
91 Write a python function to round up a given decimal number	"

import math


def apply_floor(num):
	return math.floor(num)
"
Write a function that returns derivative of log of a function	"def derivative_log(x: float) -> float:
	return (1 / x)
"
42. Python Program to Transpose a Matrix using Nested Loop	"

X = [[12, 7],
     [4, 5],
     [3, 8]]


result = [[0, 0, 0],
          [0, 0, 0]]
"
Fibonacci series up to 100	"n = 100
result = []
a, b = 0, 1
while b < n:
	result. append(b)
	a, b = b, a + b
final = result
print(f""Fibonacci series up to 100:{final}"")
"
32. Write a python program to find HCf or GCD using euclidian Algorithm	"def compute_hcf(x, y):
	while(y):
        x, y = y, x % y
	return x
"
line.	"def fact(x):
	if x == 0:
        return 1
	return x * fact(x - 1)


x = int(raw_input())
print(fact(x))
"
control that the user belongs to the list of allowed users	"if username == user1:
	print(""Access granted"")
elif username == user2:
	print(""Welcome to the system"")
else:
	print(""Access denied"")
"
Write a python program for selection sort	"for i in range(len(A)):
	min_idx = i
	for j in range(i + 1, len(A)):
        if A[min_idx] > A[j]:
            min_idx = j


A[i], A[min_idx] = A[min_idx], A[i]
"
46. python function for finding the derivative of tangent angle	"def dtangent(angle):
	

	return 1 / (math.cos(angle)**2)
"
Write a Python function to Find the Sum of Sine Series	"

import math


def sin(x, n):
	sine = 0
	for i in range(n):
        sign = (-1)**i
        pi = 22 / 7
        y = x * (pi / 180)
        sine = sine + ((y**(2.0 * i + 1)) / math.factorial(2 * i + 1)) * sign
	return sine
"
usage of dictionary	"dict = {'Name': 'Zara', 'Age': 7, 'Class': 'First'}
print(""dict['Name']: "", dict['Name'])
print(""dict['Age']: "", dict['Age'])
"
write a function to check if a lower case letter exists in a given string	"

def check_lower(str1):

	for char in str1:
        k = char.islower()
        if k == True:
            return True
	if(k != 1):
        return False
"
Write a python program to print the length of a given string.	"sample_str = ""Python is good for datascience""
print(len(sample_str))
"
and returns it	"def make_negative_zero(items):
	return [0 if item < 0 else item for item in items]
"
Write a function that returns sine value of the input	"def sin(x: float) -> float:
	import math
	return math.sin(x)
"
80 write a Python program to print the roots of a quadratic equation	"import math
a = float(input(""Enter the first coefficient: ""))
b = float(input(""Enter the second coefficient: ""))
c = float(input(""Enter the third coefficient: ""))
if (a != 0.0):
	d = (bb) - ('4ac')
	if (d == 0.0):
        print(""The roots are real and equal."")
        r = -b / ('2a')
        print(""The roots are "", r, ""and"", r)
	elif(d > 0.0):
        print(""The roots are real and distinct."")
        r1 = (-b + (math.sqrt(d))) / ('2a')
        r2 = (-b - (math.sqrt(d))) / ('2a')
        print(""The root1 is: "", r1)
        print(""The root2 is: "", r2)
	else:
        print(""The roots are imaginary."")
        rp = -b / ('2a')
        ip = math.sqrt(-d) / ('2a')
        print(""The root1 is: "", rp, ""+ i"", ip)
        print(""The root2 is: "", rp, ""- i"", ip)
else:
	print(""Not a quadratic equation."")
"
the Longest One	"

a = ['the', 'tsai', 'python']
max1 = len(a[0])
temp = a[0]
for i in a:
	if(len(i) > max1):
        max1 = len(i)
        temp = i
print(""The word with the longest length is:"")
print(temp)
"
triangle using math library	"
from math import sqrt
print(""Input lengths of shorter triangle sides:"")


def hypotenuse(side1, side2):
	hyp = sqrt(side1**2 + side2**2)
	return hyp
"
a string	"def capitalize(text):
	return text.title()
"
charged particles with charge q1 and q2 at a distance d apart	"def cal_electrostatic_force(q1, q2, d):
	k = 9 * (10**9)
	return (k * q1 * q2) / (d**2)
"
write a Python program to flatten a shallow list	"

original_list = [[2, 4, 3], [1, 5, 6], [9], [7, 9, 0], [1, 2, 3, 4]]
new_merged_list = list(itertools.chain(*original_list))
print(f'merged list/flatten:{new_merged_list}')
"
write Python Program to Count the Number of Words in a Text File	"fname = input(""Enter file name: "")
num_words = 0
with open(fname, 'r') as f:
	for line in f:
        words = line.split()
        num_words += len(words)
print(""Number of words:"")
print(num_words)
"
Write a Python program to  bin a numeric series to 10 groups of equal size	"import pandas as pd
import numpy as np
ser = pd.Series(np.random.random(20))
deciled = pd.qcut(ser, q=[0, .10, .20, .3, .4, .5, .6, .7, .8, .9, 1],
                  labels=['1st', '2nd', '3rd', '4th', '5th', '6th', '7th', '8th', '9th', '10th'])
print(deciled)
"
Disassembler	"

def hello1_func():
	s = 'Hello'
	return s


dis.dis(hello1_func)
"
Write a function to return the volume of a cube	"def cal_cube_volume(side: float) -> float:
	return side**3
"
number which is set bit and which is in power of two	"def setBitNumber(n):
	if (n == 0):
        return 0
	msb = 0
	n = int(n / 2)
	while (n > 0):
        n = int(n / 2)
        msb += 1
	return (1 << msb)
"
in console.	"def printValue(n):
	print(str(n))
"
return the result	"def largest(arr):
	max = arr[0]
	n = len(arr)
	for i in range(1, n):
        if arr[i] > max:
            max = arr[i]
        return max


largest([1, 20, 3])
"
write a program to print the current date and time	"from datetime import datetime
now = datetime.now()
print(now)
"
write a python function to check if a given string is symmetrical	"

def symmetry(a):

	n = len(a)
	flag = 0

	if n % 2:
        mid = n // 2 + 1
	else:
        mid = n // 2

	start1 = 0
	start2 = mid

	while(start1 < mid and start2 < n):

        if (a[start1] == a[start2]):
            start1 = start1 + 1
            start2 = start2 + 1
        else:
            flag = 1
            break

	return flag
"
and replace everything else as ‘Other’ in a series	"import pandas as pd
import numpy as np
np.random.RandomState(100)
ser = pd.Series(np.random.randint(1, 5, [12]))
ser[~ser.isin(ser.value_counts().index[:2])] = 'Other'
print(ser)
"
4th,6th numbers in [12,24,35,70,88,120,155].	"li = [12, 24, 35, 70, 88, 120, 155]
li = [x for (i, x) in enumerate(li) if i % 2 != 0]
print(li)
"
list for the below list	"

def counting_sort(alist, largest):
	c = [0] * (largest + 1)
	for i in range(len(alist)):
        c[alist[i]] = c[alist[i]] + 1

	c[0] = c[0] - 1
	for i in range(1, largest + 1):
        c[i] = c[i] + c[i - 1]

	result = [None] * len(alist)

	for x in reversed(alist):
        result[c[x]] = x
        c[x] = c[x] - 1

	return result


alist = [2, 3, 5, 6, 4, 5]
k = max(alist)
sorted_list = counting_sort(alist, k)
print('Sorted list: ', end='')
print(sorted_list)
"
element if found	"

def linear_search(alist, key):
	
	for i in range(len(alist)):
        if alist[i] == key:
            return i
	return -1


alist = [2, 3, 5, 6, 4, 5]


key = 6

index = linear_search(alist, key)
if index < 0:
	print(f'{key} was not found.')
else:
	print(f'{key} was found at index {index}.')
"
itertools.combinations(iterable, r)	"def random_combination(iterable, r):
	import random
	pool = tuple(iterable)
	n = len(pool)
	indices = sorted(random.sample(range(n), r))
	return tuple(pool[i] for i in indices)
"
Write a function to return the total surface area of a cube of side a	"def cal_surface_area_cube(a):
	return 6 * (a**2)
"
18. Python Program to Print the Fibonacci sequence	"

nterms = int(input(""How many terms? ""))
n1, n2 = 0, 1
count = 0


if nterms <= 0:
	print(""Please enter a positive integer"")
elif nterms == 1:
	print(""Fibonacci sequence upto"", nterms, "":"")
	print(n1)
else:
	print(""Fibonacci sequence:"")
	while count < nterms:
        print(n1)
        nth = n1 + n2
        n1 = n2
        n2 = nth
        count += 1
"
in user input text	"import re
text = input(""Enter a string: "")
for m in re.finditer(r""\w+ly"", text):
	print('%02d-%02d: %s' % (m.start(), m.end(), m.group(0)))
"
write a Python function To Calculate Total Surface Area of Cylinder	"def totalsurfacearea(r, h):
	tsurf_ar = (2 * pi * r * h) + (2 * pi * r * r)
	return tsurf_ar


r = 5
h = 8


print(""Total Surface Area Of Cylinder = "", totalsurfacearea(r, h))
"
write a python function to check if a string contains a vowel or not	"

def check_vowel(string):
	vowels = ['a', 'e', 'i', 'o', 'u']
	for vowel in vowels:
        if vowel in string:
            return True
	return False
"
Write a function that prints a given value, n number of times	"

def print_n(val, n):
	for _ in range(n):
        print(val)
"
Write a Python Program to Check if a Number is a Perfect Number	"

def perfect_no_check(n):
	sum1 = 0
	for i in range(1, n):
        if(n % i == 0):
            sum1 = sum1 + i
	if (sum1 == n):
        return True
	else:
        return False
"
for the below list	"

def merge_sort(alist, start, end):
	
	if end - start > 1:
        mid = (start + end) // 2
        merge_sort(alist, start, mid)
        merge_sort(alist, mid, end)
        merge_list(alist, start, mid, end)


def merge_list(alist, start, mid, end):
	left = alist[start:mid]
	right = alist[mid:end]
	k = start
	i = 0
	j = 0
	while (start + i < mid and mid + j < end):
        if (left[i] <= right[j]):
            alist[k] = left[i]
            i = i + 1
        else:
            alist[k] = right[j]
            j = j + 1
        k = k + 1
	if start + i < mid:
        while k < end:
            alist[k] = left[i]
            i = i + 1
            k = k + 1
	else:
        while k < end:
            alist[k] = right[j]
            j = j + 1
            k = k + 1


alist = [2, 3, 5, 6, 4, 5]
merge_sort(alist, 0, len(alist))
print('Sorted list: ', end='')
print(alist)
"
81 Write a Python program to convert a given Bytearray to Hexadecimal string.	"def bytearray_to_hexadecimal(list_val):
	result = ''.join('{:02x}'.format(x) for x in list_val)
	return(result)
"
write a python program to convert a set to a list	"myset = {1, 2, 4, 7}
mylist = list(myset)
"
write a program to find and print the remainder of two number	"

num1 = 12
num2 = 10


ratio = num1 % num2
print(f'remainder:{ratio}')
"
Write a Python program to convert a list into a nested dictionary of keys.	"num_list = [1, 2, 3, 4]
new_dict = current = {}
for name in num_list:
	current[name] = {}
	current = current[name]
print(new_dict)
"
write a program to print 5 random numbers divisible by 4 between 100 and 200	"import random
print(random.sample([i for i in range(10, 100) if i % 4 == 0], 5))
"
like in mathematic	"

E = {0, 2, 4, 6, 8}
N = {1, 2, 3, 4, 5}
print(""Difference of E and N is"", E - N)
"
write a python function to check whether all elements are equal to each other	"def all_equal(iterable):
	from itertools import groupby
	g = groupby(iterable)
	return next(g, True) and not next(g, False)
"
Write a function to append two lists	"def append_lists(l1: list, l2: list) -> list:
	return l1.extend(l2)
"
write a python program to merge 2 dictionaries	"x = {'a': 1, 'b': 2, 'c': 3}
y = {'x': 10, 'y': 20, 'z': 30}
z = {**x, **y}
"
Please raise a RuntimeError exception.	"raise RuntimeError('something wrong')
"
first and last character	"def first_last(name):
	return name[0] + name[-1]
"
11 write a program to rotate string left and right by d length	"def rotate(input, d):

	Lfirst = input[0: d]
	Lsecond = input[d:]
	Rfirst = input[0: len(input) - d]
	Rsecond = input[len(input) - d:]

	print(""Left Rotation : "", (Lsecond + Lfirst))
	print(""Right Rotation : "", (Rsecond + Rfirst))


if __name__ == ""__main__"":
	input = 'helloworld'
	d = 2
	rotate(input, d)
"
provided real numbers	"

def sigmoid(x):
	return 1 / (1 + math.exp(-x))
"
10, 20, 50, 100, 200 and 500 ) against a given amount.	"def no_notes(a):
	Q = [500, 200, 100, 50, 20, 10, 5, 2, 1]
	x = 0
	for i in range(9):
        q = Q[i]
        x += int(a / q)
        a = int(a % q)
        if a > 0:
            x = -1
	return x
"
write a python program to print week number from a date	"import datetime
print(datetime.date(2015, 6, 16).isocalendar()[1])


from datetime import date, timedelta


def all_sundays(year):
	dt = date(year, 1, 1)
	dt += timedelta(days=6 - dt.weekday())
	while dt.year == year:
        yield dt
        dt += timedelta(days=7)


for s in all_sundays(2020):
	print(s)
"
Write a function to return the lateral surface area of a cylinder	"def cal_cylinder_lat_surf_area(height, radius):
	pi = 3.14
	return 2 * pi * radius * height
"
write a python program that prints the area of a circle	"import math
radius = 5
print(f'Area: {math.pi * radius * radius}')
"
Write a function to return the perimeter of a triangle	"def cal_perimeter_triangle(s1, s2, s3):
	return s1 + s2 + s3
"
input age	"age = int(input(""Enter Age : ""))


if age >= 18:
	status = ""Eligible""
else:
	status = ""Not Eligible""


print(""You are "", status, "" for Vote."")
"
list for the below list	"

def bucket_sort(alist):
	largest = max(alist)
	length = len(alist)
	size = largest / length

	buckets = [[] for _ in range(length)]
	for i in range(length):
        j = int(alist[i] / size)
        if j != length:
            buckets[j].append(alist[i])
        else:
            buckets[length - 1].append(alist[i])

	for i in range(length):
        insertion_sort(buckets[i])

	result = []
	for i in range(length):
        result = result + buckets[i]

	return result


def insertion_sort(alist):
	for i in range(1, len(alist)):
        temp = alist[i]
        j = i - 1
        while (j >= 0 and temp < alist[j]):
            alist[j + 1] = alist[j]
            j = j - 1
        alist[j + 1] = temp


alist = [2, 3, 5, 6, 4, 5]
sorted_list = bucket_sort(alist)
print('Sorted list: ', end='')
print(sorted_list)
"
write a Python code demonstrate the working of sorted() with lambda	"

lis = [{""name"": ""Nandini"", ""age"": 20},
       {""name"": ""Manjeet"", ""age"": 20},
       {""name"": ""Nikhil"", ""age"": 19}]


print(""The list printed sorting by age: "")
print(sorted(lis, key=lambda i: i['age']))
print(""\r"")
"
diameter d is given	"import math


diameter = 12.
radius = diameter / 2.
"
Write a python program to print positive Tuples in List.	"
test_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)]


print(""The original list is : "" + str(test_list))


res = [sub for sub in test_list if all(ele >= 0 for ele in sub)]


print(""Positive elements Tuples : "" + str(res))
"
write a python program uses else with for loop	"seq = ""abcde""
for k in seq:
	if k == ""f"":
        break
else:
	print(""f Not Found!"")
"
Given a Python list, remove all occurrence of a given number from the list	"num1 = 20
list1 = [5, 20, 15, 20, 25, 50, 20]


def removeValue(sampleList, val):
	return [value for value in sampleList if value != val]


resList = removeValue(list1, num1)
print(resList)
"
write a python program to expalin the use of f-string	"n = 3
m = 4
print(f""{n} times {m} is {n*m}"")
"
largest string	"def find_longest_word(words_list):
	word_len = []
	for n in words_list:
        word_len.append((len(n), n))
	word_len.sort()
	return word_len[-1][0], word_len[-1][1]
"
Multiply Two Matrices	"X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]


Y = [[5, 8, 1, 2],
     [6, 7, 3, 0],
     [4, 5, 9, 1]]


result = [[0, 0, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]]


for i in range(len(X)):

	for j in range(len(Y[0])):

        for k in range(len(Y)):
            result[i][j] += X[i][k] * Y[k][j]


for r in result:
	print(r)
"
write a python function to locate the leftmost value exactly equal to x	"def index(a, x):
	from bisect import bisect_left
	i = bisect_left(a, x)
	if i != len(a) and a[i] == x:
        return i
	raise ValueError
"
are square of numbers between 1 and 20 (both included).	"def printList():
	li = list()
	for i in range(1, 21):
        li.append(i**2)
	print(li)
"
Returns an integer value for the given character	"str = ""A""
val = ord(str)
print(f""Integer value for the given character?:{val}"")
"
given formula: Q = Square root of [(2 * C * D)/H]	"import math
c = 50
h = 30
value = []
items = [x for x in raw_input().split(',')]
for d in items:
	value.append(str(int(round(math.sqrt(2 * c * float(d) / h)))))
print(','.join(value))
"
Remove empty strings from the list of strings	"list1 = [""Mike"", """", ""Emma"", ""Kelly"", """", ""Brad""]
resList = [i for i in (filter(None, list1))]
print(resList)
"
write a python function to return dictionary of two lists using zip	"def dict_using_comp(list1, list2):
	dict_using_comp = {key: value for (key, value) in zip(list1, list2)}
	return dict_using_comp
"
generating a reliable secure random number	"import secrets
print(""Random integer number generated using secrets module is "")
number = secrets.randbelow(30)
print(number)
"
Write a python program to print the combination of tuples in list of tuples	"
test_list = [([1, 2, 3], 'gfg'), ([5, 4, 3], 'cs')]

res = [(tup1, tup2) for i, tup2 in test_list for tup1 in i]


print(""The list tuple combination : "" + str(res))
"
write a program for Adding a sublist	"

a = [[2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20]]
a.append([5, 10, 15, 20, 25])
print(a)
"
n in comma separated form while n is input by console.	"def EvenGenerator(n):
	i = 0
	while i <= n:
        if i % 2 == 0:
            yield i
        i += 1


n = int(raw_input())
values = []
for i in EvenGenerator(n):
	values.append(str(i))
print("","".join(values))
"
prime number	"

num = int(input(""Enter number :""))
lim = int(num / 2) + 1
for i in range(2, lim):
	rem = num % i
	if rem == 0:
        print(num, ""is not a prime number"")
        break
else:
	print(num, ""is a prime number"")
"
raising the TypeError	"tup = ([],)
print('tup before: ', tup)
tup[0].extend([1])
print('tup after: ', tup)
"
define functions	"def add(x, y):
	
	return x + y


def subtract(x, y):
	
	return x - y


def multiply(x, y):
	
	return x * y


def divide(x, y):
	
	return x / y
"
of letters only.	"import re
emailAddress = raw_input()
pat2 = ""(\\w+)@((\\w+\\.)+(com))""
r2 = re.match(pat2, emailAddress)
print(r2.group(1))
"
write a python function to convert degree celsius to degree fahrenheit	"def fahrenheit(celsius):
	return (celsius * 1.8) + 32
"
write a python program to convert lower case to upper for list of elements	"

x = ['ab', 'cd']
for i in x:
	print(i.upper())
"
write a python function to swap two numbers in a list and return the list	"def swapPositions(list, pos1, pos2):

	list[pos1], list[pos2] = list[pos2], list[pos1]
	return list


List1 = [23, 65, 19, 90]
pos1, pos2 = 1, 3


print(swapPositions(List1, pos1 - 1, pos2 - 1))
"
write a python program to explain enclosing and global scope	"

x = 'global'


def f():
	x = 'enclosing'

	def g():
        print(x)
	g()
	return x


obj1 = f()
print('explain global scope:', obj1)
"
and prints it	"sentence = 'the quick brown fox jumps'
sorted_words = sentence.split(' ')
sorted_words.sort()
print(' '.join(sorted_words))
"
write a python program to replace blank space to 1	"a = re.compile('[0-9]')
z = a.findall('3 trees')
print(z)
"
Write a Python program to print the list of all keywords	"import keyword
print(""Python keywords are..."")
print(keyword.kwlist)
"
write a python program to typecast an integer to string and print it	"

x = 2
y = str(x)
print(y)
"
40 write a python program to find minimum k records from tuple list	"

test_list = [('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)]
K = 2

print(""The original list is : "" + str(test_list))
res = sorted(test_list, key=lambda x: x[1])[:K]
print(""The lowest K records are : "" + str(res))
"
removing the value 24 in [12,24,35,24,88,120,155].	"li = [12, 24, 35, 24, 88, 120, 155]
li = [x for x in li if x != 24]
print(li)
"
of elements in [1,2,3,4,5,6,7,8,9,10].	"li = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
squaredNumbers = map(lambda x: x**2, li)
print(squaredNumbers)
"
30 get rid of all null values in array python	"mylist = [1, 2, 3, '', 4]
mylist = [i for i in mylist if i]
"
list or dictionary	"def check_insst(obj):
	if isinstance(obj, list):
        return ""list""
	elif isinstance(obj, dict):
        return ""dict""
	else:
        return ""unknown""


check_insst({})
"
Write a Python function to Check Whether a Given Year is a Leap Year	"

def leapyear_check(year):
	if(year % 4 == 0 and year % 100 != 0 or year % 400 == 0):
        return True
	else:
        return False
"
write a python function to sort list using heapq	"def heapsort(iterable):
	from heapq import heappush, heappop
	h = []
	for value in iterable:
        heappush(h, value)
	return [heappop(h) for i in range(len(h))]
"
whether all the numbers are different from each other	"def test_distinct(data):
	if len(data) == len(set(data)):
        return True
	else:
        return False
"
the first set	"firstSet = {23, 42, 65, 57, 78, 83, 29}
secondSet = {57, 83, 29, 67, 73, 43, 48}


intersection = firstSet.intersection(secondSet)
for item in intersection:
	firstSet.remove(item)
print(""First Set after removing common element "", firstSet)
"
Write a Python program to check whether an alphabet is a vowel or consonant	"

l = input(""Input a letter of the alphabet: "")
if l in ('a', 'e', 'i', 'o', 'u'):
	print(""%s is a vowel."" % l)
elif l == 'y':
	print(""Sometimes letter y stand for vowel, sometimes stand for consonant."")
else:
	print(""%s is a consonant."" % l)
"
10 limit decimals to only two decimals in python	"answer = str(round(answer, 2))
"
print it	"

test_str = 'md.shakiluzzaman@gmail.com'

print(""The original string is : "" + str(test_str))
s = test_str.split('@')
print(s[1])
"
Write a python program to reverse a list and print it.	"def Reverse(lst):
	return [ele for ele in reversed(lst)]


lst = [10, 11, 12, 13, 14, 15]
print(Reverse(lst))
"
write a python program to do nothing for a condition	"

if 1 + 1 == 2:
	pass  
"
10, 15...)	"def triangle_numbers(n):
	for i in range(n):
        yield int(i * (i + 1) / 2)
"
write a program to shuffle and print the list [3,6,7,8].	"from random import shuffle
li = [3, 6, 7, 8]
shuffle(li)
print(li)
"
provided list and user specified length.	"import itertools


def get_random_combination(input_list, combination_length):
	if(len(input_list) < combination_length):
        print(""Requested combination length less than length of list"")
        return
	combination_list = list(itertools.combinations(
        input_list, combination_length))
	return random.sample(combination_list, 1)
"
Reverse a given string	"str1 = ""PYnative""
print(""Original String is:"", str1)


str1 = str1[::-1]
print(""Reversed String is:"", str1)
"
two user provided positive integers.	"

def lcm(num1, num2):
	if num1 > num2:
        z = num1
	else:
        z = num2
	while(True):
        if((z % num1 == 0) and (z % num2 == 0)):
            lcm = z
            break
        z += 1
	return lcm
"
write Python Program to Read the Contents of a File	"a = str(input(""Enter the name of the file with .txt extension:""))
file2 = open(a, 'r')
line = file2.readline()
while(line != """"):
	print(line)
	line = file2.readline()
file2.close()
"
Public vs. private class methods and name mangling	"def public_method(self):
	print('Hello public world!')


def __private_method(self):
	print('Hello private world!')


def call_private_method_in_class(self):
	self.__private_method()


my_instance = my_class()


my_instance.public_method()
my_instance._my_class__private_method()
my_instance.call_private_method_in_class()
"
iterate through rows of X	"for i in range(len(X)):
	
	for j in range(len(Y[0])):
        
        for k in range(len(Y)):
            result[i][j] += X[i][k] * Y[k][j]
print(f""Final Result is{result}"")
"
or fahrenheit to celsius	"def temp_converter(temp, temp_given_in='f'):
	
	if temp_given_in.lower() == 'f':  
        return (temp - 32) * (5 / 9)
	else:  
        return (temp * 9 / 5) + 32
"
the shorter one	"def print_shorter(str1, str2):
	if (len(str1) > len(str2)):
        print(str2)
	else:
        print(str1)
"
Write a Python function that calculate area of a equilateral polygon	"

def area(no_of_sides, circumradius):
	side_length = 2 * circumradius * math.sin(math.pi / no_of_sides)
	apothem = circumradius * math.cos(math.pi / no_of_sides)
	return no_of_sides / 2 * side_length * apothem
"
and a million	"

import random


def yield_a_number():
	yield random.randint(0, 1000000)
"
write a program to terminate the program execution	"

import sys
sys.exit()
"
containing the squares of the elements of the input list	"def square_list_elements(list_to_be_squared):
	return list(map(lambda x: x**2, list_to_be_squared))
"
37. Python Program to Display Fibonacci Sequence Using Recursion	"def recur_fibo(n):
	if n <= 1:
        return n
	else:
        return(recur_fibo(n - 1) + recur_fibo(n - 2))


nterms = 10
"
write a Python program to calculate volume of Torus	"

r = 3
R = 7


pi = 3.14159
Volume = (float)(2 * pi * pi * R * r * r)
print(""Volume: "", Volume)
"
59 function to show boolean true / false is a number	"def bool_show(a=5):
	return False * a
"
25 print binary of a decimal number	"a = 6
print(bin(a))
"
25 write a funtion to print all the files in the current directory	"

import os


def list_files():
	return os.listdir()
"
Usge of *args	"def a_func(*args):
	print('type of args:', type(args))
	print('args contents:', args)
	print('1st argument:', args[0])


a_func(0, 1, 'a', 'b', 'c')
"
write a python program to print the maximum integer in a list of integers	"lst = [23, 10, 55, 43]
lst.sort()
max = lst[-1]
"
Write a python program to print odd numbers in a List	"
list1 = [10, 21, 4, 45, 66, 93, 11]

odd_nos = list(filter(lambda x: (x % 2 != 0), list1))

print(""Odd numbers in the list: "", odd_nos)
"
Write a function to return the total surface area of a cylinder	"def cal_cylinder_surf_area(height, radius):
	pi = 3.14
	return 2 * pi * radius**2 * +2 * pi * radius * height
"
Write a python function to solve and print Towers of Hanoi problem	"

def TowerOfHanoi(n, source, destination, auxiliary):
	if n == 1:
        print(""Move disk 1 from source"", source, ""to destination"", destination)
        return
	TowerOfHanoi(n - 1, source, auxiliary, destination)
	print(""Move disk"", n, ""from source"", source, ""to destination"", destination)
	TowerOfHanoi(n - 1, auxiliary, destination, source)
"
console and generate a list and a tuple which contains every number.	"values = input()
l = values.split("","")
t = tuple(l)
print(l)
print(t)
"
write a python program to create a directory named path	"path = 'test'
import os
os.mkdir(path)
"
Convert two lists into a dictionary	"ItemId = [54, 65, 76]
names = [""Hard Disk"", ""Laptop"", ""RAM""]
itemDictionary = dict(zip(ItemId, names))
print(itemDictionary)
"
Calculate memory is being used by an list in Python	"import sys
list1 = ['Scott', 'Eric', 'Kelly', 'Emma', 'Smith']
print(""size of list = "", sys.getsizeof(list1))
"
list of dictionaries.	"test_list = [{""Gfg"": 3, ""b"": 7},
             {""is"": 5, 'a': 10},
             {""Best"": 9, 'c': 11}]
K = 'Best'
res = [sub[K] for sub in test_list if K in sub][0]
print(""The extracted value : "" + str(res))
"
56 function to all implementation	"def all_imp(a):
	return all(a)
"
write a python program to print the first 5 items in a list	"my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(my_list[:5])
"
Assigning types to variables as values	"a_var = str
a_var(123)
"
write a Function to convert the time from 12 hour format to 24 hour format	"def convert24(str1):

	if str1[-2:] == ""AM"" and str1[:2] == ""12"":
        return ""00"" + str1[2:-2]

	elif str1[-2:] == ""AM"":
        return str1[:-2]

	elif str1[-2:] == ""PM"" and str1[:2] == ""12"":
        return str1[:-2]

	else:

        return str(int(str1[:2]) + 12) + str1[2:8]
"
write a python program to sort dict keys by value and print the keys	"

d = {'apple': 10, 'orange': 20, 'banana': 5, 'rotten tomato': 1}
print(sorted(d, key=d.get))
"
Prints ten dots	"ten = ""."" * 10
print(f""Ten dots: {ten}"")
"
96 write a program for binary search	"

def binary_search(l, num_find):

	start = 0
	end = len(l) - 1
	mid = (start + end) // 2

	found = False
	position = -1

	while start <= end:
        if l[mid] == num_find:
            found = True
            position = mid
            break

        if num_find > l[mid]:
            start = mid + 1
            mid = (start + end) // 2
        else:
            end = mid - 1
            mid = (start + end) // 2

	return (found, position)


if __name__ == '__main__':

	l = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
	num = 6
	found = binary_search(l, num)
	if found[0]:
        print('Number %d found at position %d' % (num, found[1] + 1))
	else:
        print('Number %d not found' % num)
"
on initial amount and half life	"def cal_half_life(
	initail_quatity: float,
	time_elapsed: float,
        half_life: float) -> float:
	return initail_quatity * ((1 / 2)**(time_elapsed / half_life))
"
11 print how many keys are in a dictionary python	"a = {'foo': 42, 'bar': 69}
print(len(a))
"
Prints ten dots	"ten = ""."" * 10
print(f""Ten dots: {ten}"")
"
Driver program to test the above function	"arr = [10, 22, 9, 33, 21, 50, 41, 60]
n = len(arr)
print(""Length of lis is "", lis(arr))
"
on initial amount and half life	"def cal_half_life(
	initail_quatity: float,
	time_elapsed: float,
        half_life: float) -> float:
	return initail_quatity * ((1 / 2)**(time_elapsed / half_life))
"
comprehension	"

l_range = 2
u_range = 5
a = [(x, x**2) for x in range(l_range, u_range + 1)]
"
Sort JSON keys in Python and write it into a file	"import json
sampleJson = {""id"": 1, ""name"": ""value2"", ""age"": 29}


with open(""sampleJson.json"", ""w"") as write_file:
	json.dump(sampleJson, write_file, indent=4, sort_keys=True)
print(""Done writing JSON data into a file"")
"
Generate a random n-dimensional array of float numbers	"import numpy
random_float_array = numpy.random.rand(2, 2)
print(""2 X 2 random float array in [0.0, 1.0] \n"", random_float_array, ""\n"")
"
33. Python Program to Calculate Simple Interest	"

princ_amount = float(input("" Please Enter the Principal Amount : ""))
rate_of_int = float(input("" Please Enter the Rate Of Interest	: ""))
time_period = float(input("" Please Enter Time period in Years	: ""))


simple_interest = (princ_amount * rate_of_int * time_period) / 100


print(""\nSimple Interest for Principal Amount {0} = {1}"".format(
	princ_amount, simple_interest))
"
+ bx + c = 0	"def root_type(a: float, b: float, c: float):
	if b**2 - 4 * a * c >= 0:
        return 'real'
	else:
        return 'imaginary'
"
write a python function to return the square root of a number	"def get_sqrt(i):
	import math
	return(math.sqrt(i))
"
Write a function to return the area of triangle by heros formula	"def cal_triangle_area(a: float, b: float, c: float) -> float:
	if a or b or c:
        s = (a + b + c) / 2
        if s > a and s > b and s > c:
            area = (s * (s - a) * (s - b) * (s - c))**(1 / 2)
            return round(area, 2)
        else:
            return None
	return None
"
write a python function to map multiple lists using zip	"def map_values(*args):
	return set(zip(*args))
"
Write a python program to print the uncommon elements in List	"

test_list1 = [[1, 2], [3, 4], [5, 6]]
test_list2 = [[3, 4], [5, 7], [1, 2]]

res_list = []
for i in test_list1:
	if i not in test_list2:
        res_list.append(i)
for i in test_list2:
	if i not in test_list1:
        res_list.append(i)

print(""The uncommon of two lists is : "" + str(res_list))
"
Remove the last element from the stack	"s = [1, 2, 3, 4]
print(f""last element from the stack:{s.pop()}"")
"
the final list	"
def swapList(newList):
	size = len(newList)

	
	temp = newList[0]
	newList[0] = newList[size - 1]
	newList[size - 1] = temp

	return newList


newList = [12, 35, 9, 56, 24]

print(swapList(newList))
"
write a python function to print prime numbers between two numbers	"def get_prime_numbers(range1, range2):
	for num in range(range1, range2):
        for i in range(2, num):
            if num % i == 0:
                j = num / i
                break
        else:
            print(num, 'is a prime number')
"
side as length, width and height as input	"def rec_prism_volume(length, width, height):
	volume = length * width * height
	return volume
"
Write a function to calculate volume of Square Pyramid	"def volumeSquare(b, h):
	return (0.33) * b * b * h
"
by Key's Value list index Using sorted() + lambda	"
test_list = [{""Gfg"": [6, 7, 8], ""is"": 9, ""best"": 10},
             {""Gfg"": [2, 0, 3], ""is"": 11, ""best"": 19},
             {""Gfg"": [4, 6, 9], ""is"": 16, ""best"": 1}]
print(""The original list : "" + str(test_list))
K = ""Gfg""
idx = 2
res = sorted(test_list, key=lambda ele: ele[K][idx])
print(""The required sort order : "" + str(res))
"
Write a function to remove punctuation from the string	"def r_punc():
	test_str = ""end, is best : for ! Nlp ;""
	print(""The original string is : "" + test_str)
	punc = r'!()-[]{};:\, <>./?@#$%^&*_~'
	for ele in test_str:
        if ele in punc:
            test_str = test_str.replace(ele, """")
	print(""The string after punctuation filter : "" + test_str)
"
Write a Python function to get OS name & platform using os & platform library	"import os
import platform


def get_info():
	return f'OS: {os.name}\n Platform: {platform.system}'
"
write a python program that prints the circumference of a circle	"import math
radius = 10
print(f'Area: {2 * math.pi * radius}')
"
called in a dictionary	"def count_func_dict(fn: ""Function Name""):
	count = 0

	def inner(*args, **kwargs):
        nonlocal count
        count += 1
        counter_67[fn.__name__] = count
        return fn(*args, **kwargs)
	return inner
"
write Function to convert temperature  from degree Celsius to Kelvin	"def Celsius_to_Kelvin(C):
	return (C + 273.15)


C = 100
print(""Temperature in Kelvin ( K ) = "",
      Celsius_to_Kelvin(C))
"
2nd list	"def even_odd(l1, l2):
	return[x + y for x, y in zip(l1, l2) if x % 2 == 0 and y % 2 != 0]
"
word(s).	"def add_tags(tag, word):
	return ""<%s>%s</%s>"" % (tag, word, tag)
"
write a python function to sort a list of tuples by the second Item	"
def Sort_Tuple(tup):

	
	lst = len(tup)
	for i in range(0, lst):

        for j in range(0, lst - i - 1):
            if (tup[j][1] > tup[j + 1][1]):
                temp = tup[j]
                tup[j] = tup[j + 1]
                tup[j + 1] = temp
	return tup
"
write Python3 code to demonstrate to create a substring from string	"ini_string = 'xbzefdgstb'
print(""initial_strings : "", ini_string)
sstring_alt = ini_string[::2]
sstring_gap2 = ini_string[::3]


print(""print resultant substring from start"", sstring_alt)
print(""print resultant substring from end"", sstring_gap2)
"
write a python program to find sum of natural numbers up to a 16	"

num = 16
if num < 0:
	print(""Enter a positive number"")
else:
	sum = 0
	
	while(num > 0):
        sum += num
        num -= 1
	print(""The sum is"", sum)
"
34 function to convert a list of tuples into dictionary	"def list_to_dict(l: list):
	final_dict = {}
	for i in l:
        final_dict[i[0]] = i[1]
	return final_dict
"
Write a Python function to find the N-th number which is both square and cube	"def nth_sq_and_cube(N):
	R = N**6
	return R
"
uppercase letters in a string.	"string = input()


length = len(string)


lower = upper = 0


for i in string:
	if i.islower():
        lower += 1
	elif i.isupper():
        upper += 1


per_lower = lower / length * 100
per_upper = upper / length * 100
print(""Lower: %.2f%%"" % per_lower)
print(""Upper: %.2f%%"" % per_upper)
"
number is a palindrome.	"

n = int(input(""Enter number:""))
temp = n
rev = 0
while(n > 0):
	dig = n % 10
	rev = rev * 10 + dig
	n = n // 10
if(temp == rev):
	print(""The number is a palindrome!"")
else:
	print(""The number isn't a palindrome!"")
"
write a program to Binary Left Shift a number	"c = a << 2
print(""Binary Left Shift"", c)
"
write a python program to count the number of each vowels in a given text	"

vowels = 'aeiou'
text = 'Hello, have you tried our tutorial section yet?'
text = text.casefold()
count = {}.fromkeys(vowels, 0)
for char in text:
	if char in count:
        count[char] += 1
print(count)
"
Write a function that returns uppercase string	"def str_uppercase(s: str):
	return s.upper()
"
of list	"def n_power(l1: list, power: int) -> list:
	return [i**power for i in l1]
"
on speend and given time	"def cal_distance(time: float, speed: float) -> float:
	return time * speed
"
peoples=[]	"
peoples = ['Darcy', 'Christina', 'Diana']
peeps = list(map(lambda name: name.upper(), peoples))
print(peeps)
"
Write a function to return the lateral surface area of a cylinder	"def cal_cylinder_lat_surf_area(height, radius):
	pi = 3.14
	return 2 * pi * radius * height
"
Keep All items from List But NOT the Duplicates	"x = {""apple"", ""banana"", ""cherry""}
y = {""google"", ""microsoft"", ""apple""}


x.symmetric_difference_update(y)
print(f""Duplicate Value in Two set:{x}"")
"
write a python function that takes in two numbers and returns their HCF	"def hcf(num1, num2):
	smaller = num1 if num1 < num2 else num2
	for i in range(1, smaller + 1):
        if (num1 % i == 0) and (num2 % i == 0):
            hcf = i
	return hcf
"
using TFIDF vectorizer	"def get_words(corpus, new_doc, top=2):
	import numpy as np
	from sklearn.feature_extraction.text import TfidfVectorizer

	tfidf = TfidfVectorizer(stop_words='english')
	if not corpus:
        corpus = [
            'I would like to check this document',
            'How about one more document',
            'Aim is to capture the key words from the corpus',
            'frequency of words in a document is called term frequency'
        ]

	X = tfidf.fit_transform(corpus)
	feature_names = np.array(tfidf.get_feature_names())

	if not new_doc:
        new_doc = ['can key words in this new document be identified?',
                   'idf is the inverse document frequency calculated for each of the words']
	responses = tfidf.transform(new_doc)

	def get_top_tf_idf_words(response, top_n=top):
        sorted_nzs = np.argsort(response.data)[:-(top_n + 1):-1]
        return feature_names[response.indices[sorted_nzs]]

	print([get_top_tf_idf_words(response, 2) for response in responses])
"
Write a python function to implement 0/1 Knapsack problem	"

def knapSack(W, wt, val, n):

	if n == 0 or W == 0:
        return 0

	if (wt[n - 1] > W):
        return knapSack(W, wt, val, n - 1)

	else:
        return max(val[n - 1] + knapSack(W - wt[n - 1], wt, val, n - 1),
                   knapSack(W, wt, val, n - 1))
"
keys. The function should just print the keys only.	"def printDict():
	d = dict()
	for i in range(1, 21):
        d[i] = i**2
	for k in d.keys():
        print(k)
"
31. Python Program to find Diameter, Circumference, and Area Of a Circle	"import math


def find_Diameter(radius):
	return 2 * radius


def find_Circumference(radius):
	return 2 * math.pi * radius


def find_Area(radius):
	return math.pi * radius * radius


r = float(input(' Please Enter the radius of a circle: '))


diameter = find_Diameter(r)
circumference = find_Circumference(r)
area = find_Area(r)


print(""\n Diameter Of a Circle = %.2f"" % diameter)
print("" Circumference Of a Circle = %.2f"" % circumference)
print("" Area Of a Circle = %.2f"" % area)
"
74 function to show namedtuple is instance of tuple	"def show_ins_tup():
	from collections import namedtuple
	IplData = namedtuple(
        'IplData', 'match toss choice session1 session2 winner')
	match1 = IplData('RCBvsKKR', 'KKR', 'bat', '229/9', '85/8', 'KKR')
	return isinstance(match1, tuple)
"
such tuples	"def zip_(list_of_seq):
	return list(zip(*list_of_seq))
"
40 write a program to check 2 lists and find if any element is common	"
def common_data(list1, list2):
	result = False

	for x in list1:

        
        for y in list2:

            
            if x == y:
                result = True
                return result

	return result
"
print the numbers properly by creating a list	"my_list = [lambda x=i: x for i in range(5)]
for l in my_list:
	print(l())
"
write a python function to remove all punctuation from a string	"def remove_punctuations(sentence):
	punctuations = '''!()-[]{};:'""\\,<>./?@#$%^&*_~'''
	no_punct = ''
	for char in sentence:
        if char not in punctuations:
            no_punct = no_punct + char
	return no_punct
"
local scope representation	"x = 0


def in_func():
	x = 1
	print('in_func:', x)
"
Write a Python program to sort a list of tuples by second Item	"def Sort_Tuple(tup):

	return(sorted(tup, key=lambda x: x[1]))


tup = [('rishav', 10), ('akash', 5), ('ram', 20), ('gaurav', 15)]


print(Sort_Tuple(tup))
"
write a python Program to Find ASCII Value of Character	"c = 'p'
print(""The ASCII value of '"" + c + ""' is"", ord(c))
"
A naive recursive Python implementation	"
def binomialCoeff(n, k):

	if k > n:
        return 0
	if k == 0 or k == n:
        return 1

	
	return binomialCoeff(n - 1, k - 1) + binomialCoeff(n - 1, k)
"
5 write a program to print negative Numbers in given range	"start, end = -4, 19
for num in range(start, end + 1):
	if num < 0:
        print(num, end="" "")
"
contains at least 2 uppercase characters in the first 4 characters.	"def to_uppercase(str1):
	num_upper = 0
	for letter in str1[:4]:
        if letter.upper() == letter:
            num_upper += 1
        if num_upper >= 2:
            return str1.upper()


print(to_uppercase('PyThon'))
"
Write a Python program to print the length of a set.	"
seta = set([5, 10, 3, 15, 2, 20])
print(len(seta))
"
underline etc.	"

def make_bold(fn):
	def wrapped():
        return ""<b>"" + fn() + ""</b>""

	return wrapped


def make_italic(fn):
	def wrapped():
        return ""<i>"" + fn() + ""</i>""

	return wrapped


def make_underline(fn):
	def wrapped():
        return ""<u>"" + fn() + ""</u>""

	return wrapped


@ make_bold
@ make_italic
@ make_underline
def hello():
	return ""hello world""


print(hello())
"
a single line.	"values = []
for i in range(1000, 3001):
	s = str(i)
	if (int(s[0]) % 2 == 0) and (int(s[1]) % 2 == 0) and (int(s[2]) % 2 == 0) and (int(s[3]) % 2 == 0):
        values.append(s)
print("","".join(values))
"
list but don’t add duplicates	"speed = {'jan': 47, 'feb': 52, 'march': 47, 'April': 44, 'May': 52, 'June': 53,
         'july': 54, 'Aug': 44, 'Sept': 54}


speedList = []
for item in speed.values():
	if item not in speedList:
        speedList.append(item)
print(""unique list"", speedList)
"
75 write a python program to test Boolean Value of Dictionary and print it	"
test_dict = {'gfg': True, 'is': False, 'best': True}

print(""The original dictionary is : "" + str(test_dict))
res = True
for key, value in test_dict.items():
	if value == False:
        res = False
        break
print(f""Dictionary is {res}"")
"
percentage	"def cal_sp_after_discount(sp: float, discount: float) -> float:
	return sp * (1 - discount / 100)
"
sentence	"sentence = 'the quick brown fox'
print(sentence[::2])
"
Write a Python function to Find if a Number is Prime or Not Prime	"

def check(n, div=None):
	if div is None:
        div = n - 1
	while div >= 2:
        if n % div == 0:
            print(""Number not prime"")
            return False
        else:
            return check(n, div - 1)
	else:
        print(""Number is prime"")
        return 'True'
"
Write a Python function to return hexadecimal value of a given integer	"def int_to_hex(a):
	return hex(a)
"
write a python program to remove punctuations from a string	"punctuations = '''!()-[]{};:'""\\,<>./?@#$%^&*_~'''


my_str = ""Hello!!!, he said ---and went.""


no_punct = """"
for char in my_str:
	if char not in punctuations:
        no_punct = no_punct + char


print(no_punct)
"
write Python program to convert temperature from Fahrenheit to Kelvin	"
def Fahrenheit_to_Kelvin(F):
	return 273.5 + ((F - 32.0) * (5.0 / 9.0))


F = 100
print(""Temperature in Kelvin ( K ) = {:.3f}""
      .format(Fahrenheit_to_Kelvin(F)))
"
sorted dictionary	"test_dict = {'Nikhil': {'roll': 24, 'marks': 17},
             'Akshat': {'roll': 54, 'marks': 12},
             'Akash': {'roll': 12, 'marks': 15}}
sort_key = 'marks'
res = sorted(test_dict.items(), key=lambda x: x[1][sort_key])
print(""The sorted dictionary by marks is : "" + str(res))
"
write a python function to append all elements of one list to another	"def extend_list(list1, list2):
	list1 = [1, 2]
	list2 = [3, 4]
	return list1.extend(list2)
"
4 add a string to each element of a list python	"my_list = ['foo', 'fob', 'faz', 'funk']
string = 'bar'
list2 = list(map(lambda orig_string: orig_string + string, my_list))
"
natural numbers, where n is the input	"def sum_first_n_recursive(n):
	if n == 0:
        return 0
	return sum_first_n_recursive(n - 1) + n
"
"write a python program using ""any"" function"	"print(any([False, True, False, False]))
"
42 write a function to subtract two matrices in python	"matrix1 = [[0, 1, 2],
           [3, 5, 5],
           [6, 7, 8]]


matrix2 = [[1, 2, 3],
           [4, 5, 6],
           [7, 8, 9]]


def subtractTheMatrix(matrix1, matrix2):
	matrix1Rows = len(matrix1)
	matrix2Rows = len(matrix2)
	matrix1Col = len(matrix1[0])
	matrix2Col = len(matrix2[0])

	
	if(matrix1Rows != matrix2Rows or matrix1Col != matrix2Col):
        return ""ERROR: dimensions of the two arrays must be the same""

	matrix = []
	rows = []

	for i in range(0, matrix1Rows):
        for j in range(0, matrix2Col):
            rows.append(0)
        matrix.append(rows.copy())
        rows = []

	for i in range(0, matrix1Rows):
        for j in range(0, matrix2Col):
            matrix[i][j] = matrix1[i][j] - matrix2[i][j]

	return matrix
"
47. python function for finding the exponent of a number	"def exp(x):
	

	return math.exp(x)
"
write a program to insert elemnet in the list after every nth element	"

letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']
i = 3
while i < len(letters):
	letters.insert(i, 'x')
	i += 4


letters
"
Create list of numbers using lambda function but not the right way	"my_list = [lambda: i for i in range(5)]
for l in my_list:
	print(l())
"
41. python function for finding cosine angle	"def cosine(angle):
	

	return math.cos(angle)
"
66 Write a Python function to push all zeros to the end of a list.	"def move_zero(num_list):
	a = [0 for i in range(num_list.count(0))]
	x = [i for i in num_list if i != 0]
	x.extend(a)
	return(x)
"
Python code to Get Kth Column of Matrix	"

def kth_column(test_list=[[4, 5, 6], [8, 1, 10], [7, 12, 5]], k=2):

	print(""The original list is : "" + str(test_list))
	K = k
	res = list(zip(*test_list)[K])
	print(""The Kth column of matrix is : "" + str(res))
"
Write a python program print the the number of occurrences of 8 in a list	"def countX(lst, x):
	count = 0
	for ele in lst:
        if (ele == x):
            count = count + 1
	return count


lst = [8, 6, 8, 10, 8, 20, 10, 8, 8]
x = 8
print('{} has occurred {} times'.format(x, countX(lst, x)))
"
write a python program to delete a variable	"i = 10
del i
"
Write a python class Shape and Sub class Square:	"class Shape():
	def __init__(self, length=0):
        self.length = length

	def Area(self):
        print(""Area of Shape is 0"")


class Square (Shape):
	def __init__(self, length=0):
        self.length = length

	def Area(self):
        self.area = self.length * self.length
        print(""Area of a Square is: {}"".format(self.area))


s1 = Square(2)
s1.Area()
"
removing the 0th,4th,5th numbers in [12,24,35,70,88,120,155].	"li = [12, 24, 35, 70, 88, 120, 155]
li = [x for (i, x) in enumerate(li) if i not in (0, 4, 5)]
print(li)
"
Write a python program to check and print if the number is a perfect number	"

n = int(input(""Enter any number: ""))
sum1 = 0
for i in range(1, n):
	if(n % i == 0):
        sum1 = sum1 + i
if (sum1 == n):
	print(""The number is a Perfect number!"")
else:
	print(""The number is not a Perfect number!"")
"
Write a Python program to print negative numbers in a list	"list1 = [11, -21, 0, 45, 66, -93]
for num in list1:
	if num < 0:
        print(num, end="" "")
"
19 capitalize first letter in python in list	"my_list = ['apple pie', 'orange jam']
my_list[0].capitalize()
"
must contain the digits 1-9 without repetition.	"

def isValidSudoku(board):
	rows = [{} for i in range(9)]
	columns = [{} for i in range(9)]
	boxes = [{} for i in range(9)]

	for i in range(9):
        for j in range(9):
            num = board[i][j]
            if num != '.':
                num = int(num)
                box_index = (i // 3) * 3 + (j // 3)
                rows[i][num] = rows[i].get(num, 0) + 1
                columns[j][num] = columns[j].get(num, 0) + 1
                boxes[box_index][num] = boxes[box_index].get(num, 0) + 1
                if rows[i][num] > 1 or columns[j][num] > 1 or boxes[box_index][num] > 1:
                    print("" i= {0} j = {1} box_index ={2}"".format(
                        i, j, box_index))
                    print(""rows[i]: "", rows[i])
                    print(""columnns[j]: "", columns[j])
                    print(""boxes[box_index]: "", boxes[box_index])
                    return False

	return True
"
(ox,oy) by an angle	"def rotate(origin, point, angle):
	ox, oy = origin
	px, py = point

	radian_angle = math.radians(angle)
	qx = ox + math.cos(radian_angle) * (px - ox) -        math.sin(radian_angle) * (py - oy)
	qy = oy + math.sin(radian_angle) * (px - ox) +        math.cos(radian_angle) * (py - oy)
	return qx, qy
"
Write a function to find the perimeter of a square	"

def square_perimeter(a):
	return 4 * a
"
50 write a python program to normalize an array such that it sums upto 1	"

def normalize(arr):
	return [float(i) / sum(arr) for i in arr]


print(normalize([1, 2, 3, 4, 5]))
"
first two terms	"n1, n2 = 0, 1
count = 0
"
write a program to split and join a string with a hyphen delimiter	"

str1 = ""part of speech""
delimiter = ""-""


list_str = str1.split("" "")


new_str = delimiter.join(list_str)


print(""Delimited String is: "" + new_str)
"
write a program to split and join a string with a hyphen delimiter	"

str1 = ""part of speech""
delimiter = ""-""


list_str = str1.split("" "")


new_str = delimiter.join(list_str)


print(""Delimited String is: "" + new_str)
"
write a python function to list all unique elements, preserving order	"def unique_everseen(iterable, key=None):
	from itertools import filterfalse
	
	
	seen = set()
	seen_add = seen.add
	if key is None:
        for element in filterfalse(seen.__contains__, iterable):
            seen_add(element)
            yield element
	else:
        for element in iterable:
            k = key(element)
            if k not in seen:
                seen_add(k)
                yield element
"
Write a Python Program to Convert Kilometers to Miles	"kilometers = 10000
conv_fac = 0.621371
miles = kilometers * conv_fac
print('%0.2f kilometers is equal to %0.2f miles' % (kilometers, miles))
"
Generate a random n-dimensional array of float numbers	"import numpy
random_float_array = numpy.random.rand(2, 2)
print(""2 X 2 random float array in [0.0, 1.0] \n"", random_float_array, ""\n"")
"
gas equation - Volume V, and Temperatue T are given	"def find_pressure_of_ideal_gas(volume: float, temp: float, n: float) -> float:
	r = 8.3145  
	return (n * r * temp) / volume
"
parallel in a given list	"def cal_total_res_in_parallel(res_list: list) -> float:
	return sum([1 / r for r in res_list])
"
natural numbers, where n is the input	"def sum_first_n_recursive(n):
	if n == 0:
        return 0
	return sum_first_n_recursive(n - 1) + n
"
write a program to print the longest key in a dictioinary	"dict_1 = {""key1"": 10, ""keeeey2"": 2, ""ky3"": 30}
max_key = ''
for key in dict_1:
	if len(key) > len(max_key):
        max_key = key
print(max_key)
"
and print the result	"def primeornot(num):
	if num > 1:
        for i in range(2, num):
            if (num % i) == 0:
                print(num, ""is not a prime number"")
                break
        else:
            print(num, ""is a prime number"")
	else:
        print(num, ""is not a prime number"")


primeornot(7)
"
Write Python Program to print Common Letters in Two Input Strings	"s1 = ""Trump was the American President""
s2 = ""Who is the American President now?""
a = list(set(s1) & set(s2))
print(""The common letters are:"")
for i in a:
	print(i)
"
write a python program to check if a number is a prime number	"num = int(input(""Enter a number: ""))


if num > 1:
	for i in range(2, num):
        if (num % i) == 0:
            print(num, ""is not a prime number"")
            print(i, ""times"", num // i, ""is"", num)
            break
	else:
        print(num, ""is a prime number"")
else:
	print(num, ""is not a prime number"")
"
are in same order as in a list	"

test_dict = {""gfg"": 4, ""is"": 10, ""best"": 11, ""for"": 19, ""geeks"": 1}
sub_list = [4, 10, 11, 19, 1]

l = list(test_dict.values())

if l == sub_list:
	print(True)
else:
	print(False)
"
using a for loop	"n = 62
for num in range(n):
	print(num)
"
and returns the minimum number of steps required	"

def hanoi(x):
	if x == 1:
        return 1
	else:
        return 2 * hanoi(x - 1) + 1
"
write a program to calculate exponents of an input	"input = 9
exponent = 2
final = pow(input, exponent)
print(f'Exponent Value is:{final}')
"
write a python function that returns the weighted average of numbers	"def get_weighted_average(numbers, weightage):
	return sum(x * y for x, y in zip(numbers, weightage)) / sum(weightage)
"
33 function insert at the begining of dictionary	"def dict_in_at_begin(orgin: dict, new_: dict):
	final = {**new_, **origin}
	return final
"
r and time in years y	"def get_si(p: float, r: float, t: float) -> float:
	return (p * r * t) / 100
"
Write a Python program to create one-hot encodings of a categorical variable	"import pandas as pd
import numpy as np
df = pd.DataFrame(np.arange(25).reshape(5, -1), columns=list('abcde'))
df_onehot = pd.concat([pd.get_dummies(df['a']), df[list('bcde')]], axis=1)
print(df_onehot)
"
36 Write a python program to trim tuples by k and print it	"

test_list = [(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),
             (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)]

int(""The original list is : "" + str(test_list))
K = 2
l = []
for i in test_list:
	s = tuple()
	s += i[K:len(i) - K]
	l.append((s))
print(l)
"
the final list	"
def swapList(newList):
	size = len(newList)

	
	temp = newList[0]
	newList[0] = newList[size - 1]
	newList[size - 1] = temp

	return newList


newList = [12, 35, 9, 56, 24]

print(swapList(newList))
"
in a list	"l = [[5 * i + j for j in range(1, 6)] for i in range(5)]
print(l)
"
Write a python function to sort a list of tuples by the second Item	"

def Sort_Tuple(tup):

	lst = len(tup)
	for i in range(0, lst):

        for j in range(0, lst - i - 1):
            if (tup[j][1] > tup[j + 1][1]):
                temp = tup[j]
                tup[j] = tup[j + 1]
                tup[j + 1] = temp
	return tup
"
write Python Program to print the Sum of 10 Natural Numbers	"num = 10
if num < 0:
	print(""Enter a positive number"")
else:
	sum = 0
	
	while(num > 0):
        sum += num
        num -= 1
	print(""The sum is"", sum)
"
number by given shifts	"def bit_mul(n, shift):
	return n << shift
"
12 python print last element of list	"mylist = [0, 1, 2]
print(myList[-1])
"
and height h between parallel sides	"def cal_area_trapezium(a, b, h):
	return h * (a + b) / 2
"
write a program to find sin of a number	"import math


num = 45
print(""Sin"", math.sin(num))
"
digits,and symbols for given input string	"

def findDigitsCharsSymbols(inputString):
	charCount = 0
	digitCount = 0
	symbolCount = 0
	for char in inputString:
        if char.islower() or char.isupper():
            charCount += 1
        elif char.isnumeric():
            digitCount += 1
        else:
            symbolCount += 1

	print(
        ""Chars = "",
        charCount,
        ""Digits = "",
        digitCount,
        ""Symbol = "",
        symbolCount)


inputString = ""P@#yn26at^&i5ve""
print(""total counts of chars, digits,and symbols \n"")


findDigitsCharsSymbols(inputString)
"
from 1 to 10 and values are cubes of the key	"cube_dict = {}
for i in range(1, 11):
	cube_dict[i] = i ** 3
"
Write a Python function that calculate side length of a equilateral polygon	"

def side_length(no_of_sides, circumradius):
	return 2 * circumradius * math.sin(math.pi / no_of_sides)
"
tuples records	"

test_list = [(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]
print(""The original list is : "" + str(test_list))
s = []
for i in test_list:
	l = len(i)
	s.append(i[l - 1])
print(s)
"
write a program to find and print the largest among three numbers	"num1 = 123
num2 = 125
num3 = 148
if (num1 >= num2) and (num1 >= num3):
	largest = num1
elif (num2 >= num1) and (num2 >= num3):
	largest = num2
else:
	largest = num3
print(f'largest:{largest}')
"
Python program to add two objects if both objects are of type integer	"

def add_numbers(a, b):
	if not (isinstance(a, int) and isinstance(b, int)):
        raise TypeError(""Inputs must be integers"")
	return a + b


print(add_numbers(10, 20))
"
distance of object and distance of image from lense	"def cal_focal_length_of_lense(u: float, v: float) -> float:
	return (u * v) / (u + v)
"
Write a program to reverse a number	"

n = int(input(""Enter number: ""))
rev = 0
while(n > 0):
	dig = n % 10
	rev = rev * 10 + dig
	n = n // 10
print(""Reverse of the number:"", rev)
"
write a python function to find the largest number in an array	"

def largest(arr, n):
	max = arr[0]
	for i in range(1, n):
        if arr[i] > max:
            max = arr[i]
	return max
"
write Python3 code to demonstrate list slicing from K to end using None	"test_list = [5, 6, 2, 3, 9]
K = 2
res = test_list[K: None]
print(f""The sliced list is :{str(res)} "")
"
or not based on their age	"def vote_eligibility(age):
	if age >= 18:
        status = ""Eligible""
	else:
        status = ""Not Eligible""
	return status
"
height as input	"def prism_volume(base_area, height):
	volume = base_area * height
	return volume
"
Write a function to return the mean of numbers in a list	"def cal_mean(num_list: list) -> float:
	if num_list:
        return sum(num_list) / len(num_list)
	else:
        return None
"
Write a program to print the powers of 2 using anonymous function	"

terms = 10


result = list(map(lambda x: 2 ** x, range(terms)))


print(""The total terms are:"", terms)
for i in range(terms):
	print(""2 raised to power"", i, ""is"", result[i])
"
ferform a simple multiplication 10 Million time	"def time_calc(n: int):
	import time
	start = time.perf_counter()
	for i in range(10000000):
        n * 2
	end = time.perf_counter()
	return end - start
"
write a program to convert date to timestamp and print the result	"import time
import datetime
str1 = ""20/01/2020""
element = datetime.datetime.strptime(str1, ""%d/%m/%Y"")
timestamp = datetime.datetime.timestamp(element)
print(timestamp)
"
write a program to accept the strings which contains all vowels	"

str1 = ""__main__""
if len(set(str1).intersection(""AEIOUaeiou"")) >= 5:
	print('accepted')
else:
	print(""not accepted"")
"
display the result	"if num == sum:
	print(num, ""is an Armstrong number"")
else:
	print(num, ""is not an Armstrong number"")
"
17 split list into lists of equal length python	"[lst[i:i + n] for i in range(0, len(lst), n)]
"
Remove special symbols/Punctuation from a given string	"import string


str1 = ""/*Jon is @developer & musician""
new_str = str1.translate(str.maketrans('', '', string.punctuation))
print(""New string is "", new_str)
"
write a python program to check a num is less than 1000	"

def near_thousand(n):
	return ((abs(1000 - n) <= 100) or (abs(2000 - n) <= 100))


print('near to 1000', near_thousand(1000))
print('near to 1300', near_thousand(1300))
"
write a python function to make permutations from a list with given length	"def get_permutations(data_list, l=2):
	return list(permutations(data_list, r=l))
"
Write a python program to Sum of n positive Integer	"n = int(input(""Enter Value of n: ""))
sum = 0
x = 0
while x != n + 1:  
	sum += x
	x += 1
	print(""Sum of n positive Integer till {} is {}"".format(n, sum))
"
Write a program to swap two variables inplace	"a, b = b, a
"
between 1 and 10 (both included) and the values are square of keys.	"

d = dict()
for x in range(1, 11):
	d[x] = x**2
print(d)
"
write a python function to caclucate the polygon_area	"def polygon_area(side_length, sides=3):
	if(sides < 3 or sides > 6):
        raise ValueError(
            ""number of sides must be greater than 2 and less than 7"")
	if(side_length < 0):
        raise ValueError(""side length must be positive"")

	return sides * (side_length ** 2) / (4 * tan(pi / sides))
"
write a function to check if a list is empty or not	"def list_is_empty(a_list):
	if not a_list:
        return True
	else:
        return False
"
using example of tuple	"class CustomTupleIter:
	

	def __init__(self):
        self.list_ = (1, 2, 3, 4)

	def __len__(self):
        return len(self.list_)

	def __getitem__(self, i):
        if isinstance(i, int):
            if i < 0:
                i = len(self.list_) + i

            if i < 0 or i >= len(self.list_):
                raise IndexError('Invalid Input')
            else:
                return self.list_[i]

	def __iter__(self):
        return self.CustomTupleIterator(self)

	class CustomTupleIterator:
        def __init__(self, other):
            self.count = 0
            self.other = other

        def __iter__(self):
            return self

        def __next__(self):
            if self.count < len(self.other.list_):
                self.count += 1
                return self.other.list_[self.count]
            else:
                raise StopIteration
"
resulting string.	"def not_poor(str1):
	snot = str1.find('not')
	spoor = str1.find('poor')

	if spoor > snot and snot > 0 and spoor > 0:
        str1 = str1.replace(str1[snot:(spoor + 4)], 'good')
        return str1
	else:
        return str1
"
print it	"
test_list = [10, {'gfg': 1}, {'ide': 2, 'code': 3}, 20]
"
Write a python function to sum variable number of arguments	"def sum_all(*args):
	total = 0
	for num in args:
        total += num
	return total
"
Keep All items from List But NOT the Duplicates	"x = {""apple"", ""banana"", ""cherry""}
y = {""google"", ""microsoft"", ""apple""}


x.symmetric_difference_update(y)
print(f""Duplicate Value in Two set:{x}"")
"
Python Program to Check if a Number is Odd or Even	"

num = 100
if (num % 2) == 0:
	print(""{0} is Even"".format(num))
else:
	print(""{0} is Odd"".format(num))
"
removing the 0th,4th,5th numbers in [12,24,35,70,88,120,155].	"li = [12, 24, 35, 70, 88, 120, 155]
li = [x for (i, x) in enumerate(li) if i not in (0, 4, 5)]
print(li)
"
write a python program to rotate a list 10 times and print it	"list = [11, 22, 33, 44, 55, 66, 77, 88, 99]
n = 10
finalList = []
for i in range(0, N):
	finalList.append(list[(i + d) % N])
print(finalList)
"
31 write a program that extract words starting with Vowel From A list	"test_list = [""have"", ""a"", ""good"", ""one""]
"
calculate compound intrest	"

def compound_interest(principle, rate, time):
	
	Amount = principle * (pow((1 + rate / 100), time))
	CI = Amount - principle
	print(""Compound interest is"", CI)
"
index of value if the value of the key is list.	"test_list = [{'tsai': [5, 3, 9, 1], 'is': 8, 'good': 10},
             {'tsai': 1, 'for': 10, 'geeks': 9},
             {'love': 4, 'tsai': [7, 3, 22, 1]}]
N = 2
key = ""tsai""
for sub in test_list:
	if isinstance(sub[key], list):
        sub[key] = sub[key][N]
"
the output.	"

test_list = [(3, 4), (6, 5), (7, 8)]

res = [(sub[1], sub[0]) for sub in test_list]

print(""The swapped tuple list is : "" + str(res))
"
write a Python function to Convert Decimal to Binary	"def convertToBinary(n):
	if n > 1:
        convertToBinary(n // 2)
	print(n % 2, end='')
"
numbers, where n is the input	"def sum_first_n(n):
	return (n * (n + 1)) // 2
"
write a program to reverse the list elemnets	"

list_ = [40, 0, 1, 29, 3]
rev_list = list_[::-1]
print(f'reversed list: {rev_list}')
"
write a python function to check if given set is subset or not	"def check_subset():
	for _ in range(int(input())):
        x, a, z, b = input(), set(input().split()), input(), set(input().split())
	print(a.issubset(b))
"
a sentence	"sentence = 'this is my sentence and i will write it my way'
minlength = 3
result = [word for word in sentence.split(' ') if len(word) >= minlength]
"
write a python function to get the most common word in text	"def most_common(text):
	c = Counter(text)
	return c.most_common(1)
"
16 write a function to immplement insert in binary search tree	"

class BinaryTreeNode:
	def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key


class Tree:
	def insert(self, root, key):
        if root is None:
            return BinaryTreeNode(key)
        else:
            if root.val == key:
                return root
            elif root.val < key:
                root.right = self.insert(root.right, key)
            else:
                root.left = self.insert(root.left, key)

        return root
"
write a python program to print the number of letters and digits in sentence	"sentence = 'The Quick 123 Fox'
digits = 0
letters = 0
for c in sentence:
	if c.isdigit():
        digits += 1
	elif c.isalpha():
        letters += 1
	else:
        pass
print(f'Digits: {digits}, Letters: {letters}')
"
write a Python function to convert Gray code to binary	"def gray_to_binary(n):
	n = int(n, 2)  
	mask = n
	while mask != 0:
        mask >>= 1
        n ^= mask
	return bin(n)[2:]
"
write a program to print the longest key in a dictioinary	"dict_1 = {""key1"": 10, ""keeeey2"": 2, ""ky3"": 30}
max_key = ''
for key in dict_1:
	if len(key) > len(max_key):
        max_key = key
print(max_key)
"
write a python function to check whether a number is perfect	"

def isPerfect(n):
	sum = 1
	i = 2
	while i * i <= n:
        if n % i == 0:
            sum = sum + i + n / i
        i += 1
	return (True if sum == n and n != 1 else False)
"
14 function to check armstrong number or not	"def check_armstrong(no_: int):
	sum_ = 0
	temp = no_
	while temp > 0:
        digit = temp % 10
        sum_ += digit ** 3
        temp //= 10

	if no_ == sum_:
        print(f""{no_} is an Armstrong number"")
	else:
        print(f""{no_} is not an Armstrong number"")
"
Write a Python function to convert a list to a tuple.	"def convert_list_to_tuple(list_input):
	return tuple(list_input)
"
Write a Python function to to find the sum of all digits of a given integer	"def sum_of_digits(num):
	if num == 0:
        return 0
	else:
        return num % 10 + sum_of_digits(int(num / 10))
"
write a python function to compute the lcm of two numbers	"def lcm(x, y):

	if x > y:
        greater = x
	else:
        greater = y

	while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1

	return lcm

 
 


def Armstrong(num):
	sum = 0
	temp = num
	while temp > 0:
        digit = temp % 10
        sum += digit ** 3
        temp //= 10

	if num == sum:
        print(num, ""is an Armstrong number"")
	else:
        print(num, ""is not an Armstrong number"")

 


def palindrome(my_str):
	my_str = my_str.casefold()
	rev_str = reversed(my_str)
	if list(my_str) == list(rev_str):
        print(""The string is a palindrome."")
	else:
        print(""The string is not a palindrome."")
"
write a python program to print a matrix as output	"

matrix = [[1, 2, 3, 4],
          [4, 5, 6, 7],
          [8, 9, 10, 11],
          [12, 13, 14, 15]]

for i in range(0, 4):
	print(matrix[i][1], end="" "")
"
console and generate a list and a tuple which contains every number.	"values = input()
l = values.split("","")
t = tuple(l)
print(l)
print(t)
"
Write a function to Check whether following json is valid or invalid	"import json


def validateJSON(jsonData):
	try:
        json.loads(jsonData)
	except ValueError as err:
        return False
	return True
"
write a function to check if a lower case letter exists in a given string	"

def check_lower(str1):

	for char in str1:
        k = char.islower()
        if k == True:
            return True
	if(k != 1):
        return False
"
Write a Python function to compute simple interest	"def simple_interest(p, t, r):
	si = (p * t * r) / 100
	return si
"
check if the number of terms is valid	"if nterms <= 0:
	print(""Plese enter a positive integer"")
elif nterms == 1:
	print(""Fibonacci sequence:"")
	print(n1)
else:
	print(""Fibonacci sequence:"")
	print(n1, "","", n2, end=', ')
	while count < nterms:
        nth = n1 + n2
        print(nth, end=' , ')
        
        n1 = n2
        n2 = nth
        count += 1
"
Distinct Integers	"

class sub:
	def f1(self, s1):
        return self.f2([], sorted(s1))

	def f2(self, curr, s1):
        if s1:
            return self.f2(curr, s1[1:]) + self.f2(curr + [s1[0]], s1[1:])
        return [curr]


a = [2, 3, 5, 6, 4, 5]


print(""Subsets: "")
print(sub().f1(a))
"
"bingo"""	"key_val_map = {
	""key1"": ""length1"",
	""key2"": ""len2"",
	""Hello"": ""hi"",
	""bingo"": ""print bingo""}
for key, val in key_val_map.items():
	if len(val) > len(key):
        print(""Bingo!"")
	else:
        print(""no bingo"")
"
string 'n' times.	"def repeated_string(s, n):
	return s.count('a') * (n // len(s)) + s[:n % len(s)].count('a')
"
write a python function to return the sequence elements n times	"def ncycles(iterable, n):
	from itertools import chain, repeat
	return chain.from_iterable(repeat(tuple(iterable), n))
"
create a dictionary to show the count of each elemen	"sampleList = [11, 45, 8, 11, 23, 45, 23, 45, 89]
countDict = dict()
for item in sampleList:
	if(item in countDict):
        countDict[item] += 1
	else:
        countDict[item] = 1

print(""Printing count of each item  "", countDict)
"
Values List	"

import re
test_dict = {'Gfg': [""G4G is Best 4"", ""4 ALL geeks""],
             'is': [""5 6 Good""],
             'best': [""Gfg Heaven"", ""for 7 CS""]}
print(""The original dictionary is : "" + str(test_dict))
res = {key: [re.sub('\\d', '', ele) for ele in val]
       for key, val in test_dict.items()}
print(""The filtered dictionary : "" + str(res))
"
them and then print it in console.	"def add(s1, s2):
	print(s1 + s2)
"
write a python program to Generate a Random Number	"print(random.randint(0, 9))
"
Write a Python Program to print Prime Factors of an Integer	"

n = 24
print(""Factors are:"")
i = 1
while(i <= n):
	k = 0
	if(n % i == 0):
        j = 1
        while(j <= i):
            if(i % j == 0):
                k = k + 1
            j = j + 1
        if(k == 2):
            print(i)
	i = i + 1
"
write a program for Rolling the dices	"

min = 1
max = 6


print(""Rolling the dices...and the values are"", random.randint(min, max))
print(""Rolling the dices...and the values are"", random.randint(min, max))
"
in a String	"

string = 'This is an Assignment'
count = 0
for i in string:
	if(i.islower()):
        count = count + 1
print(""The number of lowercase characters is:"")
print(count)
"
28 to get a random element from an array in python	"list_ = [1, 2, 3, 4]
random.choice(list_)
"
17 function to print the lcm of two number	"def ret_lcm(x: int, y: int):
	if x > y:
        greater = x
	else:
        greater = y
	while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1
	return lcm
"
Write a function to find the area of square	"

def square_area(a):
	return a * a
"
write a python function get the maximum number in passed list	"

def max_check(x):
	max_val = x[0]
	for check in x:
        if check > max_val:
            max_val = check
	return max_val


print(f'{max_check([2,4,5,7,98])}')
"
printing original list	"print(""The original list is : "" + str(test_list))
count = 0
for i in test_list:
	if isinstance(i, dict):
        count = count + 1
print(count)
"
write a python program to create a raw string	"str1 = r'hello\n'
"
4 add a string to each element of a list python	"my_list = ['foo', 'fob', 'faz', 'funk']
string = 'bar'
list2 = list(map(lambda orig_string: orig_string + string, my_list))
"
and prints it	"sentence = 'the quick brown fox jumps'
sorted_words = sentence.split(' ')
sorted_words.sort()
print(' '.join(sorted_words))
"
Write a function to implement Gnome Sort	"def gnomeSort(arr, n):
	index = 0
	while index < n:
        if index == 0:
            index = index + 1
        if arr[index] >= arr[index - 1]:
            index = index + 1
        else:
            arr[index], arr[index - 1] = arr[index - 1], arr[index]
            index = index - 1
	return arr


arr = [34, 2, 10, -9]
n = len(arr)
arr = gnomeSort(arr, n)
print(""Sorted seqquence after applying Gnome Sort :"")
for i in arr:
	print(i)
"
create a dictionary to show the count of each elemen	"sampleList = [11, 45, 8, 11, 23, 45, 23, 45, 89]
countDict = dict()
for item in sampleList:
	if(item in countDict):
        countDict[item] += 1
	else:
        countDict[item] = 1

print(""Printing count of each item  "", countDict)
"
write a python program to convert unix timestamp string to readable date.	"

import datetime
unix_timestamp = ""1284105682""
print(
	datetime.datetime.fromtimestamp(
        int(unix_timestamp)
	).strftime('%Y-%m-%d %H:%M:%S')
)
"
in kg to energy	"def cal_energy_by_mass(mass: float) -> float:
	c = 300000
	return mass * (c**2)
"
list or tuple or string and returns the new sorted sequence	"def sort_and_merge(l1, l2):
	new_list = []
	i = 0
	j = 0
	l1_len = len(l1)
	l2_len = len(l2)
	while (i <= l1_len - 1) and (j <= l2_len - 1):
        if l1[i] < l2[j]:
            new_list.append(l1[i])
            i += 1
        else:
            new_list.append(l2[j])
            j += 1
	if i <= (l1_len - 1):
        new_list += l1[i:]
	if j <= (l2_len - 1):
        new_list += l2[j:]
	return new_list


def recursive_merge_sort(list_to_be_sorted):
	final_list = []
	first = 0
	last = len(list_to_be_sorted)
	if last <= 1:
        final_list.extend(list_to_be_sorted)
	else:
        mid = last // 2
        l1 = recursive_merge_sort(list_to_be_sorted[:mid])
        l2 = recursive_merge_sort(list_to_be_sorted[mid:])
        final_list.extend(sort_and_merge(l1, l2))
	return final_list
"
Write a python program which can compute the factorial of a given number.	"def fact(x):
	if x == 0:
        return 1
	return x * fact(x - 1)


x = int(raw_input())
print(fact(x))
"
numbers to positive numbers and returns the new list	"def make_all_positive(nums):
	return [num if num > 0 else -num for num in nums]
"
87 Write a Python function to check whether a list contains a sublist.	"def is_Sublist(l, s):
	sub_set = False
	if s == []:
        sub_set = True
	elif s == l:
        sub_set = True
	elif len(s) > len(l):
        sub_set = False

	else:
        for i in range(len(l)):
            if l[i] == s[0]:
                n = 1
                while (n < len(s)) and (l[i + n] == s[n]):
                    n += 1

                if n == len(s):
                    sub_set = True

	return sub_set
"
Write a function that joins elements of list	"def join_elements(l: list) -> str:
	return (''.join(str(l)))
"
Write a Python function to find the maximum EVEN number from a given list	"def even_max_checker(list1):
	maxnum = 0
	for num in list1:
        if num % 2 == 0:
            if num > maxnum:
                maxnum = num
	return maxnum
"
write a python program to find index of min element	"lst = [40, 10, 20, 30]


def minIndex(lst):
	return min(range(len(lst)), key=lst.__getitem__)


print(minIndex(lst))
"
write a python program to add an element to a list. Print the final list.	"lst = [""Jon"", ""Kelly"", ""Jessa""]
lst.append(""Scott"")
print(lst)
"
write a python print to return the first n fibonacci numbers	"

def fibonacci(n):
	a, b = 0, 1
	print(a)
	print(b)
	for i in range(n - 2):
        print(a + b)
        a, b = b, a + b
"
write a  program to get the matched elements from two list	"a = [1, 2, 3, 4, 5]
b = [9, 8, 7, 6, 5]
[i for i, j in zip(a, b) if i != j]
"
Sort the list in ascending order	"my_list = [4, 3, 2, 9, 10, 44, 1]
my_list.sort()
print(f""Ascending Order list:,{my_list}"")
"
write a python program that prints the area of a circle	"import math
radius = 5
print(f'Area: {math.pi * radius * radius}')
"
write a python function to print the binary value of a decimal number	"def print_binary(dec):
	print(bin(dec))
"
and write a function to return the list of attributes	"class Myclass:
	def __init__(self, attr1, attr2):
        self.attr1 = attr1
        self.attr2 = attr2

	def get_attributes_list(self):
        return [self.attr1, self.attr2]


dress = Myclass(""pant"", ""shirt"")
dress.get_attributes_list()
"
m at height h	"def cal_pe(mass: float, height: float) -> float:
	g = 9.8
	return (mass * g * height)
"
write a python function to return a set of all punctuation used in a string	"def get_punctuations(sentence):
	punctuations = '''!()-[]{};:'""\\,<>./?@#$%^&*_~'''
	used_punctuation = set()
	for char in sentence:
        if char in punctuations:
            used_punctuation.add(char)
	return used_punctuation
"
write a python program which takes input a list and print reverse output	"lst = eval(input(""Enter list""))
print(lst[::-1])
"
Generate a Python list of all the even numbers between two given numbers	"num1 = 4
num2 = 30
myval = [i for i in range(num1, num2, 2)]
print(myval)
"
global variable to store the maximum	"global maximum


def _lis(arr, n):

	
	global maximum

	
	if n == 1:
        return 1

	
	maxEndingHere = 1

	""""""Recursively get all LIS ending with arr[0], arr[1]..arr[n-2]
		IF arr[n-1] is maller than arr[n-1], and max ending with
		arr[n-1] needs to be updated, then update it""""""
	for i in range(1, n):
        res = _lis(arr, i)
        if arr[i - 1] < arr[n - 1] and res + 1 > maxEndingHere:
            maxEndingHere = res + 1

	
	
	maximum = max(maximum, maxEndingHere)

	return maxEndingHere


def lis(arr):

	
	global maximum

	
	n = len(arr)

	
	maximum = 1

	
	_lis(arr, n)

	return maximum
"
above given lists.	"set1 = set([1, 3, 6, 78, 35, 55])
set2 = set([12, 24, 35, 24, 88, 120, 155])
set1 &= set2
li = list(set1)
print(li)
"
Write a function to return the volume of a cuboid	"def cal_cuboid_volume(length: float, breadth: float, height: float) -> float:
	return length * breadth * height
"
for the below list	"

def merge_sort(alist, start, end):
	
	if end - start > 1:
        mid = (start + end) // 2
        merge_sort(alist, start, mid)
        merge_sort(alist, mid, end)
        merge_list(alist, start, mid, end)


def merge_list(alist, start, mid, end):
	left = alist[start:mid]
	right = alist[mid:end]
	k = start
	i = 0
	j = 0
	while (start + i < mid and mid + j < end):
        if (left[i] <= right[j]):
            alist[k] = left[i]
            i = i + 1
        else:
            alist[k] = right[j]
            j = j + 1
        k = k + 1
	if start + i < mid:
        while k < end:
            alist[k] = left[i]
            i = i + 1
            k = k + 1
	else:
        while k < end:
            alist[k] = right[j]
            j = j + 1
            k = k + 1


alist = [2, 3, 5, 6, 4, 5]
merge_sort(alist, 0, len(alist))
print('Sorted list: ', end='')
print(alist)
"
write Python program to demonstrate working of Get next key in Dictionary	"

test_dict = {'gfg': 1, 'is': 2, 'best': 3}


print(f""The original dictionary is : {test_dict}"")


test_key = 'is'


temp = list(test_dict)
try:
	res = temp[temp.index(test_key) + 1]
except (ValueError, IndexError):
	res = None


print(f""The next key is : {res}"")
"
write a python function to remove duplicate items from the list	"def remove_duplicatesinlist(lst):
	return len(lst) == len(set(lst))
"
write a python function to check if an object is an instance of a given class	"def check_instance(derived_class, base_class):
	return(isinstance(derived_class, base_class))
"
Please write a program which prints all permutations of [1,2,3]	"import itertools
print(list(itertools.permutations([1, 2, 3])))
"
Find the day of week of a given date?	"from datetime import datetime
given_date = datetime(2020, 7, 26)
print(given_date.strftime('%A'))
"
Write a python Program to Flatten and print a List	"

a = [[1, [[2]], [[[3]]]], [[4], 5]]
def flatten(l): return sum(map(flatten, l), []) if isinstance(l, list) else [l]


print(flatten(a))
"
print it	"
test_dict = {'gfg': 4, 'is': 2, 'best': 5}

print(""The original dictionary : "" + str(test_dict))
s = []
for key, value in test_dict.items():
	for i in range(0, value):
        s.append(key)
print(s)
"
Generate 3 random integers between 100 and 999 which is divisible by 5	"import random


print(""Generating 3 random integer number between 100 and 999 divisible by 5"")
for num in range(3):
	print(random.randrange(100, 999, 5), end=', ')
"
True and False in the datetime module	"

print(""Current python version: "", python_version())
"
on initial amount and half life	"def cal_half_life(initail_quatity: float, time_elapsed: float,
                  half_life: float) -> float:
	return initail_quatity * ((1 / 2)**(time_elapsed / half_life))
"
write a Python function to find area of an Ellipse.	"

def findArea(a, b):

	Area = 3.142 * a * b

	print(""Area:"", round(Area, 2))


a = 5
b = 4


findArea(a, b)
"
returns the area of rectangle.	"def rectangle_area(length, breadth):
	area = length * breadth
	return area
"
write a python function that returns the gcd of two numbers	"def gcd(x, y):
	if x > y:
        smaller = y
	else:
        smaller = x

	for i in range(1, smaller + 1):
        if((x % i == 0) and (y % i == 0)):
            gcd = i

	return gcd
"
string	"

str1 = ""python1234""

total_digits = 0
total_letters = 0

for s in str1:

	if s.isnumeric():
        total_digits += 1
	else:
        total_letters += 1

print(""Total letters found : "", total_letters)
print(""Total digits found : "", total_digits)
"
and prints a dictionary value list where each key is a category.	"test_list = [(1, 3), (1, 4), (2, 3), (3, 2), (5, 3), (6, 4)]
res = {}
for i, j in test_list:
	res.setdefault(j, []).append(i)
print(""The dictionary converted from tuple list : "" + str(res))
"
Please write a program to print Python built-in functions document of input()	"print(input.__doc__)
"
write Python code to convert string to list	"

def Convert_1(string):
	li = list(string.split("" ""))
	return li


str1 = ""Geeks for Geeks""
print(Convert(str1))
"
write a program to calculate exponents of an input	"input = 9
exponent = 2
final = pow(input, exponent)
print(f'Exponent Value is:{final}')
"
write a python program to print sum of elements in a list	"lst = range(5)
print(sum(lst))
"
Write a python function to Copy the Contents of One File into Another	"

def copy(from_file, to_file):
	with open(from_file) as f:
        with open(to_file, ""w"") as f1:
            for line in f:
                f1.write(line)
"
Write a python program to Read and print the Contents of a File	"

a = str(input(""Enter file name .txt extension:""))
file2 = open(a, 'r')
line = file2.readline()
while(line != """"):
	print(line)
	line = file2.readline()
file2.close()
"
than a given input.	"test_dict = {'tsai': 4, 'random_key': 2, 'foo': 3, 'bar': 'END'}
K = 3
res = {key: val for key, val in test_dict.items()
       if type(val) != int or val > K}
print(""Values greater than K : "", res.keys())
"
are inputs to this function.	"def filter_with_key_value(list_of_dicts, key, value):
	return list(filter(lambda x: x.get(key) == value, list_of_dicts))
"
write a program to print words frequncy in a given string	"

test_str = ""It is a great meal at a great restaurant on a great day""
print(""Original String: "" + str(test_str))
res = {key: test_str.count(key) for key in test_str.split()}
print(""The words frequency: "" + str(res))
"
23 how to check nth prime in python	"x = int(input())
n, c = 1, 0
while(c < x):
	n += 1
	for i in range(2, n + 1):
        if(n % i == 0):
            break
	if(i == n):
        c = c + 1
"
the sum	"def add_two_numbers(num1, num2):
	sum = num1 + num2
	return sum
"
37. Python Program to Make a Simple Calculator	"

def add(x, y):
	return x + y


def subtract(x, y):
	return x - y


def multiply(x, y):
	return x * y


def divide(x, y):
	return x / y


print(""Select operation."")
print(""1.Add"")
print(""2.Subtract"")
print(""3.Multiply"")
print(""4.Divide"")


while True:
	choice = input(""Enter choice(1/2/3/4): "")

	if choice in ('1', '2', '3', '4'):
        num1 = float(input(""Enter first number: ""))
        num2 = float(input(""Enter second number: ""))

        if choice == '1':
            print(num1, ""+"", num2, ""="", add(num1, num2))

        elif choice == '2':
            print(num1, ""-"", num2, ""="", subtract(num1, num2))

        elif choice == '3':
            print(num1, ""*"", num2, ""="", multiply(num1, num2))

        elif choice == '4':
            print(num1, ""/"", num2, ""="", divide(num1, num2))
        break
	else:
        print(""Invalid Input"")
"
write a python program to print a string in lowercase	"

string = 'SFG'
print(string.lower())
"
72 write a program to find compound interest	"

p = float(input(""Enter the principle amount : ""))
r = float(input(""Enter the rate of interest : ""))
t = float(input(""Enter the time in the years: ""))
"
provided by the user	"

my_str = ""Hello this Is an Example With cased letters""


words = [word.lower() for word in my_str.split()]


words.sort()


print(""The sorted words are:"")
for word in words:
	print(word)
"
write a python function to check if given set is subset or not	"def check_subset():
	for _ in range(int(input())):
        x, a, z, b = input(), set(input().split()), input(), set(input().split())
	print(a.issubset(b))
"
composed of letters only.	"import re
emailAddress = raw_input()
pat2 = ""(\\w+)@(\\w+)\\.(com)""
r2 = re.match(pat2, emailAddress)
print(r2.group(2))
"
takes in base, height as input	"def area_shape(base, height, shape):
	return {'triangle': 0.5 * base * height, 'parallelogram': base * height}[shape]
"
return the modified data list	"def remove_duplicates(data):
	c = Counter(data)
	s = set(data)
	for item in s:
        count = c.get(item)
        while count > 1:
            data.pop(item)
            count -= 1
	return data
"
None, if the second number is 0	"def divide(num1, num2):
	if num2 == 0:
        return
	else:
        return num1 / num2
"
is input by a sequence of comma-separated numbers.	"values = raw_input()
numbers = [x for x in values.split("","") if int(x) % 2 != 0]
print("","".join(numbers))
"
Write a function to return the circumference of a circle	"def cal_circumference(r):
	pi = 3.14
	return 2 * pi * r
"
Strings List Using sort()	"

def get_rear(sub):
	return sub[-1]


test_list = ['gfg', 'is', 'best', 'for', 'geeks']
print(""The original list is : "" + str(test_list))
test_list.sort(key=get_rear)
print(""Sorted List : "" + str(test_list))
"
the sum of three numbers equal to zero.	"def three_Sum(num):
	if len(num) < 3:
        return []
	num.sort()
	result = []
	for i in range(len(num) - 2):
        left = i + 1
        right = len(num) - 1
        if i != 0 and num[i] == num[i - 1]:
            continue
        while left < right:
            if num[left] + num[right] == -num[i]:
                result.append([num[i], num[left], num[right]])
                left = left + 1
                right = right - 1
                while num[left] == num[left - 1] and left < right:
                    left = left + 1
                while num[right] == num[right + 1] and left < right:
                    right = right - 1
            elif num[left] + num[right] < -num[i]:
                left = left + 1
            else:
                right = right - 1
	return result
"
Write a function that returns derivative derivative relu value of the input	"def derivative_relu(x: float) -> float:
	x = 1 if x > 0 else 0
	return x
"
1. write a python program to add two numbers	"num1 = 1.5
num2 = 6.3
sum = num1 + num2
print(f'Sum: {sum}')
"
write a python function to convert temperature from celcius to kelvin	"def cel_to_kel(celcius):
	return celcius + 273
"
52 write a python program to normalize a list of numbers and print the result	"a = [2, 4, 10, 6, 8, 4]
amin, amax = min(a), max(a)
for i, val in enumerate(a):
	a[i] = (val - amin) / (amax - amin)
print(a)
"
"string is ""yes"" or ""YES"" or ""Yes"", otherwise print ""No""."	"s = raw_input()
if s == ""yes"" or s == ""YES"" or s == ""Yes"":
	print(""Yes"")
else:
	print(""No"")
"
raise Exception	"def read_file(filepath=None):
	if filepath:
        with open(filepath, 'r') as file_reader:
            f_read = file_reader.read()
        return f_read
	else:
        raise Exception(""filepath not found"")


read_file()
"
Calculate length of a string	"word = ""Hello World""
print(f""Length of string: {len(word)}"")
"
write a python program to count the number of each vowels	"ip_str = 'Hello, have you tried our tutorial section yet?'
ip_str = ip_str.casefold()
count = {x: sum([1 for char in ip_str if char == x]) for x in 'aeiou'}
print(count)
"
have even indexes.	"def every_alternate_char(s):
	s = s[::2]
	return s
"
Generate random Universally unique IDs	"import uuid
safeId = uuid.uuid4()
print(""safe unique id is "", safeId)
"
10 write a program to accept a string if it contains all vowels	"def check(string):
	if len(set(string).intersection(""AEIOUaeiou"")) >= 5:
        return ('accepted')
	else:
        return (""not accepted"")


if __name__ == ""__main__"":
	string = ""helloworld""
	print(check(string))
"
Write a function for vertical concatenating of a matrix	"def vertical_concatenation():
	test_list = [[""this"", ""is""], [""program"", ""for""],
                 [""vertical"", ""concatenation""]]
	print(""The original list : "" + str(test_list))
	res = []
	N = 0
	while N != len(test_list):
        temp = ''
        for idx in test_list:
            try:
                temp = temp + idx[N]
            except IndexError:
                pass
        res.append(temp)
        N = N + 1
	res = [ele for ele in res if ele]
	print(""List after column Concatenation : "" + str(res))


vertical_concatenation()
"
above given lists.	"set1 = set([1, 3, 6, 78, 35, 55])
set2 = set([12, 24, 35, 24, 88, 120, 155])
set1 &= set2
li = list(set1)
print(li)
"
for the below list	"

def radix_sort(alist, base=10):
	if alist == []:
        return

	def key_factory(digit, base):
        def key(alist, index):
            return ((alist[index] // (base**digit)) % base)
        return key
	largest = max(alist)
	exp = 0
	while base**exp <= largest:
        alist = counting_sort(alist, base - 1, key_factory(exp, base))
        exp = exp + 1
	return alist


def counting_sort(alist, largest, key):
	c = [0] * (largest + 1)
	for i in range(len(alist)):
        c[key(alist, i)] = c[key(alist, i)] + 1

	c[0] = c[0] - 1
	for i in range(1, largest + 1):
        c[i] = c[i] + c[i - 1]

	result = [None] * len(alist)
	for i in range(len(alist) - 1, -1, -1):
        result[c[key(alist, i)]] = alist[i]
        c[key(alist, i)] = c[key(alist, i)] - 1

	return result


alist = [2, 3, 5, 6, 4, 5]
sorted_list = radix_sort(alist)
print('Sorted list: ', end='')
print(sorted_list)
"
collection of distinct numbers.	"def permute(nums):
	result_perms = [[]]
	for n in nums:
        new_perms = []
        for perm in result_perms:
            for i in range(len(perm) + 1):
                new_perms.append(perm[:i] + [n] + perm[i:])
                result_perms = new_perms
	return result_perms
"
heads and tails	"import random
heads = 0
tails = 0
for i in range(100):
	if(random.choice([True, False])):
        heads += 1
	else:
        tails += 1
print(f'{heads} heads, {tails} tails')
"
Counting total alphanumeric in a string	"str1 = ""abc4234AFde""
digitCount = 0
for i in range(0, len(str1)):
	char = str1[i]
	if(char.isalpha()):
        digitCount += 1
print('Number of alphanumeric: ', digitCount)
"
write a python program to get positive elements from given list of lists	"Input = [[10, -11, 222], [42, -222, -412, 99, -87]]
temp = map(lambda elem: filter(lambda a: a > 0, elem), Input)
Output = [[a for a in elem if a > 0] for elem in temp]
"
Generate a list by list comprehension	"list = [x for x in range(10)]
print(f""List Generated by list comprehension:{list}"")
"
write a python program to convert all list elements to uppercase	"

s = [""pune"", ""mumbai"", ""delhi""]
print([(w.upper(), len(w)) for w in s])
"
Python version <= 3.4.5 evaluates this statement to False	"print('""datetime.time(0,0,0)"" (Midnight) ->', bool(datetime.time(0, 0, 0)))
"
array.	"first_array = [1, 2, 3, 4, 5, 6, 7]
second_array = [3, 7, 2, 1, 4, 6]


def finder(first_array, second_array):
	return(sum(first_array) - sum(second_array))


missing_number = finder(first_array, second_array)


print(missing_number)
"
write a python program to use maxsplit with arbitrary whitespace	"

s = ""foo	bar	foobar foo""


print(s.split(None, 2))
"
numbers to negative numbers and returns the new list	"def make_all_negative(nums):
	return [num if num < 0 else -num for num in nums]
"
Shuffle a list randomly	"import random
list = [2, 5, 8, 9, 12]
random.shuffle(list)
print(""Printing shuffled list "", list)
"
calculating simple interest	"si = (p * r * t) / 100
"
9 sort a dictionary	"mydictionary: {1: 1, 7: 2, 4: 2, 3: 1, 8: 1}
sortedDictionary = sorted(mydictionary.keys())
"
Write a python function to raise error when an input is not a string type	"def check_string(new_str):
	return isinstance(new_str, str)
"
keys and the numbers in english as values	"number_dict = {
	1: 'one',
	2: 'two',
	3: 'three',
	4: 'four',
	5: 'five'
}
"
write a python program to Check Leap Year	"year = 2000
if (year % 4) == 0:
	if (year % 100) == 0:
        if (year % 400) == 0:
            print(f""{year} is a leap year"")
        else:
            print(f""{year} is not a leap year"")
	else:
        print(f""{year} is a leap year"")
else:
	print(f""{year} is not a leap year"")
"
Generate a random date between given start and end dates	"import random
import time


def getRandomDate(startDate, endDate):
	print(""Printing random date between"", startDate, "" and "", endDate)
	randomGenerator = random.random()
	dateFormat = '%m/%d/%Y'

	startTime = time.mktime(time.strptime(startDate, dateFormat))
	endTime = time.mktime(time.strptime(endDate, dateFormat))

	randomTime = startTime + randomGenerator * (endTime - startTime)
	randomDate = time.strftime(dateFormat, time.localtime(randomTime))
	return randomDate


print(""Random Date = "", getRandomDate(""1/1/2016"", ""12/12/2018""))
"
write a python program to check two dictionary are equal or not	"

d1 = {""john"": 40, ""peter"": 45}
d2 = {""john"": 466, ""peter"": 45}
d1 == d2
"
write Python code to demonstrate to remove the tuples if certain criteria met	"ini_tuple = [('b', 100), ('c', 200), ('c', 45),
             ('d', 876), ('e', 75)]
print(""intial_list"", str(ini_tuple))
result = list(filter(lambda x: x[1] <= 100, ini_tuple))
print(""Resultant tuple list: "", str(result))
"
write a program to check if year is a leap year or not	"

year = int(input(""Year: ""))


if (year % 4) == 0:
	if (year % 100) == 0:
        if (year % 400) == 0:
            print(""{0} is a leap year"".format(year))
        else:
            print(""{0} is not a leap year"".format(year))
	else:
        print(""{0} is a leap year"".format(year))
else:
	print(""{0} is not a leap year"".format(year))
"
write a function to replace all occurances of a substring in a string	"

str1 = ""Hello! It is a Good thing""
substr1 = ""Good""
substr2 = ""bad""


replaced_str = str1.replace(substr1, substr2)


print(""String after replace :"" + str(replaced_str))
"
write a python function that converts a user provided string to snake case	"

from re import sub


def snake(s):
	return '_'.join(
        sub('([A-Z][a-z]+)', r' \1',
            sub('([A-Z]+)', r' \1',
                s.replace('-', ' '))).split()).lower()
"
Write a function that returns sum of all elements in the list	"def sum_elements(l: list):
	return sum(l)
"
element from both lists in the pair	"firstList = [2, 3, 4, 5, 6, 7, 8]
secondList = [4, 9, 16, 25, 36, 49, 64]
result = zip(firstList, secondList)
resultSet = set(result)
print(resultSet)
"
Write a python function to get the Cumulative sum of a list	"def Cumulative(lists):
	cu_list = []
	length = len(lists)
	cu_list = [sum(lists[0:x:1]) for x in range(0, length + 1)]
	return cu_list[1:]


 
l = [1, 2.0, 'hello', 'have', 'a', 'good', 'day']

s = 'hello'

if s in l:
	print(f'{s} is present in the list')
else:
	print(f'{s} is not present in the list')
"
transaction log from console input.	"netAmount = 0
while True:
	s = raw_input()
	if not s:
        break
	values = s.split("" "")
	operation = values[0]
	amount = int(values[1])
	if operation == ""D"":
        netAmount += amount
	elif operation == ""W"":
        netAmount -= amount
	else:
        pass
print(netAmount)
"
print the key element if found	"

def binary_search_rec(alist, start, end, key):
	
	if not start < end:
        return -1

	mid = (start + end) // 2
	if alist[mid] < key:
        return binary_search_rec(alist, mid + 1, end, key)
	elif alist[mid] > key:
        return binary_search_rec(alist, start, mid, key)
	else:
        return mid


alist = [2, 3, 5, 6, 4, 5]


key = 6

index = binary_search_rec(alist, 0, len(alist), key)
if index < 0:
	print(f'{key} was not found.')
else:
	print(f'{key} was found at index {index}.')
"
string in the middle of first string	"

def appendMiddle(s1, s2):
	middleIndex = int(len(s1) / 2)
	print(""Original Strings are"", s1, s2)
	middleThree = s1[:middleIndex:] + s2 + s1[middleIndex:]
	print(""After appending new string in middle"", middleThree)


appendMiddle(""bananna"", ""monkey"")
"
write Python code to remove all strings from a list of tuples	"listOfTuples = [
	('string', 'Geeks'),
	(2, 225),
	(3, '111'),
	(4, 'Cyware'),
	(5, 'Noida')]
output = [tuple(j for j in i if not isinstance(j, str)) for i in listOfTuples]


print(output)
"
Calculate the pair-wise product of two lists	"list1 = [1, 2, 3]
list2 = [5, 6, 7]
final = [list1[i] * list2[i] for i in range(len(list1))]
print(f""pair-wise product of two lists:{final}"")
"
velocity u, time t and acceleration a	"def cal_displacement(
	initial_velocity: float,
	accelration: float,
        time: float) -> float:
	return initial_velocity * time + .5 * accelration * (time)**2
"
71 write a python function to count the length of the string	"

def len_str(st):
	return len(st)
"
String	"

def modify(string):
	final = """"
	for i in range(len(string)):
        if i % 2 == 0:
            final = final + string[i]
	return final
"
write a python function to get the factorial of a given number	"def factorial(n):
	if n == 1:
        return n
	else:
        return n * factorial(n - 1)
"
Write a python program for print all elements with digit 7.	"
test_list = [56, 72, 875, 9, 173]

K = 7

res = [ele for ele in test_list if str(K) in str(ele)]

print(""Elements with digit K : "" + str(res))
"
Write a function to return the area of a rectangle	"def cal_area_rect(length, breadth):
	return length * breadth
"
21. Python Program to Find Armstrong Number in an Interval	"lower = 100
upper = 2000


for num in range(lower, upper + 1):

	order = len(str(num))
	sum = 0
	temp = num
	while temp > 0:
        digit = temp % 10
        sum += digit ** order
        temp //= 10

	if num == sum:
        print(num)
"
87 write a program Tower of Hanoi	"

def hanoi(x):
	global repN
	repN += 1
	if x == 1:
        return 2

	else:
        return 3 * hanoi(x - 1) + 2


x = int(input(""ENTER THE NUMBER OF DISKS: ""))


global repN
repN = 0


print('NUMBER OF STEPS: ', hanoi(x), ' :', repN)
"
maximum value	"def add_even_num(min, max):
	return sum([i for i in range(min, max) if i % 2 == 0])


add_even_num(1, 6)
"
write a python program to split the string into chunks of size 3	"

str = 'CarBadBoxNumKeyValRayCppSan'
n = 3
chunks = [str[i:i + n] for i in range(0, len(str), n)]
print(chunks)
"
Write a Python function to unzip a list of tuples into individual lists	"def unzip_list_of_tuples(list_tuple):
	return list(zip(*l))
"
43. python function for finding sine angle	"def sine(angle):
	

	return math.sin(angle)
"
velocity u, time t and acceleration a	"def cal_final_velocity(
	initial_velocity: float,
	accelration: float,
        time: float) -> float:
	return initial_velocity + accelration * time
"
Write a function to return the perimeter of a isoscales triangle	"def cal_perimeter_iso_triangle(s1, s2):
	return 2 * s1 + s2
"
write a function to convert tuple to list	"def convert_tuple2list(t):
	return list(t)
"
Generator using yield function	"def generator_yield(n=100000):
	for i in range(n):
        if i % 5 == 0:
            yield i
"
42. python function for finding the derivative of cosine angle	"def dcosine(angle):
	

	return -math.sin(angle)
"
Write a method which can calculate and return square value of number	"def square(num):
	return num ** 2
"
write a python function to convert decimal to hexadecimal	"

def decToHexa(n):
	hexaDeciNum = ['0'] * 100
	i = 0
	while(n != 0):
        temp = 0
        temp = n % 16
        if(temp < 10):
            hexaDeciNum[i] = chr(temp + 48)
            i = i + 1
        else:
            hexaDeciNum[i] = chr(temp + 55)
            i = i + 1
        n = int(n / 16)
	j = i - 1
	while(j >= 0):
        print((hexaDeciNum[j]), end="""")
        j = j - 1
"
write a python program that print today's date	"print(date.today())
"
write a python function to find nCr	"
def nCr(n, r):

	def fact(n):
        res = 1
        for i in range(2, n + 1):
            res = res * i
        return res

	return (fact(n) / (fact(r)
                       * fact(n - r)))
"
equal to the given number using a while loop	"input_num = 27
while input_num:
	print(input_num)
	input_num -= 1
"
to both set1 and set2	"set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
set1.intersection_update(set2)
print(set1)
"
in kg to energy	"def cal_energy_by_mass(mass: float) -> float:
	c = 300000
	return mass * (c**2)
"
directory	"def split_filename(input_file_name):
	if(isinstance(input_file_name, str) == False):
        raise TypeError
	tokens = input_file_name.split(""/"")
	return ""/"".join(tokens[:-1]), tokens[-1]
"
slant height as input	"def cone_surface_area(radius, slant_height):
	surface_area = 3.14 * (radius ** 2) + 3.14 * radius * slant_height
	return surface_area
"
Eratosthenes.	"

n = int(input(""Enter upper limit of range: ""))
sieve = set(range(2, n + 1))
while sieve:
	prime = min(sieve)
	print(prime, end=""\t"")
	sieve -= set(range(prime, n + 1, prime))

print()
"
44. Python Program to Multiply Two Matrices using Nested Loop	"

X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]
Y = [[5, 8, 1, 2],
     [6, 7, 3, 0],
     [4, 5, 9, 1]]
result = [[0, 0, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]]

for i in range(len(X)):
	for j in range(len(Y[0])):
        for k in range(len(Y)):
            result[i][j] += X[i][k] * Y[k][j]

for r in result:
	print(r)
"
printing the result	"print('mobile number found from the string : ', m.group())
"
write a python function for a string to swap the case of all letters.	"def swap_case(s):
	return ''.join(x for x in (i.lower() if i.isupper() else i.upper()
                               for i in s))
"
Write a python function that prints the Contents of a File in Reverse Order	"

def reverse_content(filename):
	for line in reversed(list(open(filename))):
        print(line.rstrip())
"
write a python program to break when the num is perfectly divisible	"

i = 1
while True:
	if i % 3 == 0:
        break
	print(i)

	i += 1
"
40. write a Python function to Remove all duplicates from a given string	"def removeDuplicate(str):
	s = set(str)
	s = """".join(s)
	print(""Without Order:"", s)
	t = """"
	for i in str:
        if(i in t):
            pass
        else:
            t = t + i
	print(""With Order:"", t)


str1 = ""conondrum""
removeDuplicate(str1)


from .sin import sine
from .cos import cosine
from .tan import tangent
from .softmax import softmax
from .sigmoid import sigmoid
from .tanh import tanh
from .relu import ReLU
from .log import log
from .exp import exp


from .sin import dsine
from .cos import dcosine
from .tan import dtangent
from .sigmoid import dsigmoid
from .tanh import dtanh
from .log import dlog
from .exp import dexp


import math
"
write a python function to add elements of two lists	"def add_two_lists(list1, list2):
	list1 = [1, 2, 3]
	list2 = [4, 5, 6]
	sum_list = []

	for (item1, item2) in zip(list1, list2):
        sum_list.append(item1 + item2)
	return sum_list
"
no using class	"

class Fib:
	def __init__(self):
        self.cache = {1: 1, 2: 1}

	def fib(self, n):
        if n not in self.cache:
            print(f'Calculating fib({n})')
            self.cache[n] = self.fib(n - 1) + self.fib(n - 2)
        return self.cache[n]
"
Write a function to repeat M characters of a string N times	"

def multTimes(str, m, n):
	front_len = m
	if front_len > len(str):
        front_len = len(str)
	front = str[:front_len]
	result = ''
	for i in range(n):
        result = result + front
	return result


print(multTimes('Hello', 3, 7))
"
the base using recursion.	"

def power(base, exp):
	if(exp == 1):
        return(base)
	if(exp != 1):
        return(base * power(base, exp - 1))


base = int(input(""Enter base: ""))
exp = int(input(""Enter exponential value: ""))
print(""Result:"", power(base, exp))
"
Shuffle a list randomly	"import random
list = [2, 5, 8, 9, 12]
random.shuffle(list)
print(""Printing shuffled list "", list)
"
35 function to sort the  dictionary with respect to key.	"def dict_sort_with_key(test_dict: dict):
	final_dict = {}
	temp = sorted(test_dict)
	for i in temp:
        final_dict[i] = test_dict[a]
	return final_dict
"
Write a function that returns a dictionary sorted descending by its values	"def descending_dict_valuesort(d: dict):
	return {
        key: val for key,
        val in sorted(
            d.items(),
            reverse=True,
            key=lambda ele: ele[1])}
"
write a python program to print the ascii value of input character	"

character = input("" Enter Character :"")
print(f""Ascii value of character {character} is : "", ord(character))
"
Write a function to print all time when angle between hour hand and minute	"def printTime(theta):
	for hh in range(0, 12):
        for mm in range(0, 60):
            if (calcAngle(hh, mm) == theta):
                print(hh, "":"", mm, sep="""")
                return
	print(""Input angle not valid."")
	return


theta = 90.0
printTime(theta)
"
+ bx + c = 0	"def root_type(a: float, b: float, c: float):
	if b**2 - 4 * a * c >= 0:
        return 'real'
	else:
        return 'imaginary'
"
Write a function that returns a dictionary sorted ascending by its keys	"def ascending_dict_keysort(d: dict):
	return {key: val for key, val in sorted(d.items(), key=lambda ele: ele[0])}
"
Write a function to return the perimeter of an equilateral triangle	"def cal_perimeter_eq_triangle(a):
	return 3 * a
"
print its contents	"def read_and_print_file(filepath):
	with open(filepath, ""r"") as infile:
        print(infile.read())
"
"square root is not an integer"""	"def find_integer_square_roots(num):
	found = False
	for k in range(1, (num // 2) + 1):
        if ((k**2) == num):
            found = True
            break
	if not found:
        return ""Error - the square root is not an integer""
	return -k, k
"
string into all upper case and print the result	"string = input(""Please Enter your Own String : "")


string1 = string.upper()

print(""\nOriginal String in Lowercase  =  "", string)
print(""The Given String in Uppercase =  "", string1)
"
50 write a program to display the multiplication table of a number	"

num = int(input(""Show the multiplication table of? ""))
"
24 how to convert fahrenheit to celsius in python	"Celsius = (Fahrenheit - 32) * 5.0 / 9.0
"
write a python function to reverse a user provided list or string	"

def reverse(itr):
	return itr[::-1]
"
Parenthesized using Stack	"

class Stack:
	def __init__(self):
        self.items = []

	def is_empty(self):
        return self.items == []

	def push(self, data):
        self.items.append(data)

	def pop(self):
        return self.items.pop()


s = Stack()
exp = ""(x+y""

for c in exp:
	if c == '(':
        s.push(1)
	elif c == ')':
        if s.is_empty():
            is_balanced = False
            break
        s.pop()
else:
	if s.is_empty():
        is_balanced = True
	else:
        is_balanced = False

if is_balanced:
	print('Expression is correctly parenthesized.')
else:
	print('Expression is not correctly parenthesized.')
"
write a program to count characters in a string	"st = ""AmmarAdil""
count = {}
for a in st:
	if a in count:
        count[a] += 1
	else:
        count[a] = 1
print('Count', count)
"
Python program to compute sum of digits in number	"def sumDigits(no):
	return 0 if no == 0 else int(no % 10) + sumDigits(int(no / 10))


n = 1234511
print(sumDigits(n))
"
Write a python function to generate Lucas Numbers (2, 1, 3, 4, 7, 11, 18...)	"def lucas_numbers(n):
	first, second = 2, 1
	for _ in range(n):
        first, second = second, first + second
	return first
"
Write a function to find sum of nested list using Recursion	"total = 0


def sum_nestedlist(l):
	global total
	for j in range(len(l)):
        if type(l[j]) == list:

            sum_nestedlist(l[j])
        else:
            total += l[j]


sum_nestedlist([[1, 2, 3], [4, [5, 6]], 7])
print(total)
"
for a radius	"

class CircleArea():
	def __init__(self, radius):
        self.radius = radius

	def area(self):
        return 3.14 * self.radius * self.radius


a = 6
obj = CircleArea(a)
print(""Area of rectangle:"", obj.area())
"
56 write a python function to implement the sigmoid activation function	"

import math


def sigmoid(x):
	return 1 / (1 + math.exp(-x))
"
values and and cuustom sequence type.	"class Square:
	def __init__(self, n):
        self.n = n

	def __iter__(self):
        return self.show_sq(self.n)

	@staticmethod
	def show_sq(n):
        for i in range(n):
            yield i**2

	def __getitem__(self, i):
        if isinstance(i, int):
            if (i <= self.n):
                print(i**2)
            else:
                raise ValueError('Index out of bound')
"
set of addition problems	"def carry_number(x, y):
	ctr = 0
	if(x == 0 and y == 0):
        return 0
	z = 0
	for i in reversed(range(10)):
        z = x % 10 + y % 10 + z
        if z > 9:
            z = 1
        else:
            z = 0
        ctr += z
        x //= 10
        y //= 10
	if ctr == 0:
        return ""No carry operation.""
	elif ctr == 1:
        return ctr
	else:
        return ctr
"
Program to find the number if it is within 100 of 1000 or 2000	"def near_thousand(n):
	return (abs(1000 - n) <= 100) or (abs(2000 - n) <= 100)


print(near_thousand(1000))
print(near_thousand(900))
print(near_thousand(800))
print(near_thousand(2200))
"
write Python code to convert string to list character-wise	"def Convert_3(string):
	list1 = []
	list1[:0] = string
	return list1


str1 = ""ABCD""
print(Convert(str1))
"
write a function that return space count	"
def count_space(str1):

	count = 0

	for i in range(0, len(str1)):

        if str1[i] == "" "":
            count += 1

	return count
"
Write a function to find sum of nested list using Recursion	"total = 0


def sum_nestedlist(l):
	global total
	for j in range(len(l)):
        if type(l[j]) == list:

            sum_nestedlist(l[j])
        else:
            total += l[j]


sum_nestedlist([[1, 2, 3], [4, [5, 6]], 7])
print(total)
"
using TFIDF vectorizer	"def get_words(corpus, new_doc, top=2):
	import numpy as np
	from sklearn.feature_extraction.text import TfidfVectorizer

	tfidf = TfidfVectorizer(stop_words='english')
	if not corpus:
        corpus = [
            'I would like to check this document',
            'How about one more document',
            'Aim is to capture the key words from the corpus',
            'frequency of words in a document is called term frequency'
        ]

	X = tfidf.fit_transform(corpus)
	feature_names = np.array(tfidf.get_feature_names())

	if not new_doc:
        new_doc = ['can key words in this new document be identified?',
                   'idf is the inverse document frequency calculated for each of the words']
	responses = tfidf.transform(new_doc)

	def get_top_tf_idf_words(response, top_n=top):
        sorted_nzs = np.argsort(response.data)[:-(top_n + 1):-1]
        return feature_names[response.indices[sorted_nzs]]

	print([get_top_tf_idf_words(response, 2) for response in responses])
"
Write a Python program to find the repeated items of a tuple.	"tuplex = 2, 4, 5, 6, 2, 3, 4, 4, 7
print(tuplex)
count = tuplex.count(4)
print(count)
"
where n is provided as the argument	"def fibonacci_recursive(n):
	if n <= 1:
        return n
	else:
        return (recur_fibo(n - 1) + recur_fibo(n - 2))
"
write a python function to append all elements of one list to another	"def extend_list(list1, list2):
	list1 = [1, 2]
	list2 = [3, 4]
	return list1.extend(list2)
"
Generate 3 random integers between 100 and 999 which is divisible by 5	"import random


print(""Generating 3 random integer number between 100 and 999 divisible by 5"")
for num in range(3):
	print(random.randrange(100, 999, 5), end=', ')
"
is |x1 - x2| + |y1 - y2|.	"

from functools import lru_cache


def minimumDistance(word):
	def getDist(a, b):
        if a == -1 or b == -1:
            return 0
        else:
            i = ord(a) - ord('a')
            j = ord(b) - ord('b')
            dist = abs(i // 6 - j // 6) + abs(i % 6 - j % 6)
            return dist

	@ lru_cache(maxsize=None)
	def getMinDist(l, r, k):
        if k == len(word):
            return 0
        next = word[k].lower()
        ret = min(getMinDist(next, r, k + 1) + getDist(l, next),
                  getMinDist(l, next, k + 1) + getDist(r, next))
        return ret

	return(getMinDist(-1, -1, 0))
"
user.	"num = int(input(""Enter a number: ""))


factorial = 1


if num < 0:
	print(""Sorry, factorial does not exist for negative numbers"")
elif num == 0:
	print(""The factorial of 0 is 1"")
else:
	for i in range(1, num + 1):
        factorial = factorial * i
	print(""The factorial of"", num, ""is"", factorial)
"
modify the 1st element of the 2nd sublist	"my_list1[1][0] = 'a'
print(""after my_list1[1][0] = 'a' ---> "", my_list1)
"
keys and the numbers in english as values	"number_dict = {
	1: 'one',
	2: 'two',
	3: 'three',
	4: 'four',
	5: 'five'
}
"
keys and values	"a = {""a"": 1, ""b"": 2, ""c"": 3, ""d"": 4}
for k, v in a.items():
	print(k, v)
"
write a python function to return only even numbers in a list	"def filter_even(nums):
	return list(filter(lambda num: num % 2 == 0, nums))
"
write a python program to print the datatype of a variable	"x = 2
print(type(x))
"
the reversed number	"Number = int(input(""Please Enter any Number: ""))
Reverse = 0
while(Number > 0):
	Reminder = Number % 10
	Reverse = (Reverse * 10) + Reminder
	Number = Number // 10

print(""\n Reverse of entered number is = %d"" % Reverse)
"
write a python program to check two lists are equal or not	"

a = frozenset(set([5, 6, 7]))
print(a)
"
write a program for  Extending a sublist	"

a = [[2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20]]
a[0].extend([12, 14, 16, 18])
print(a)
"
Write a Python Program to Generate Gray Codes using Recursion	"

def get_gray_codes(n):
	
	if n == 0:
        return ['']
	first_half = get_gray_codes(n - 1)
	second_half = first_half.copy()

	first_half = ['0' + code for code in first_half]
	second_half = ['1' + code for code in reversed(second_half)]

	return first_half + second_half
"
Write a function to return the area of a right angle triangle	"

def cal_rt_triangle_area(base: float, height: float) -> float:
	if base and height:
        return (base * height) / 2
	else:
        return None
"
values sum greater than K	"

test_list = [{""Gfg"": 4, ""is"": 8, ""best"": 9},
             {""Gfg"": 5, ""is"": 8, ""best"": 1},
             {""Gfg"": 3, ""is"": 7, ""best"": 6},
             {""Gfg"": 3, ""is"": 7, ""best"": 5}]


print(""The original list : "" + str(test_list))


K = 15


res = []
for sub in test_list:
	sum = 0
	for key in sub:
        sum += sub[key]
	if sum > K:
        res.append(sub)


print(""Dictionaries with summation greater than K : "" + str(res))
"
Choose given number of elements from the list with different probability	"import random
num1 = 5
numberList = [111, 222, 333, 444, 555]
print(random.choices(numberList, weights=(10, 20, 30, 40, 50), k=num1))
"
access Last characters in a string	"word = ""Hello World""
letter = word[-1]
print(f""First Charecter in String:{letter}"")
"
Write a Python function for Binary Search	"def binary_search(l, num_find):
	
	start = 0
	end = len(l) - 1
	mid = (start + end) // 2
	found = False
	position = -1
	while start <= end:
        if l[mid] == num_find:
            found = True
            position = mid
            break
        if num_find > l[mid]:
            start = mid + 1
            mid = (start + end) // 2
        else:
            end = mid - 1
            mid = (start + end) // 2
	return (found, position)
"
Write a function to return the area of a square	"def cal_area_square(side):
	return side**2
"
Sort the list in descending order	"my_list = [4, 3, 2, 9, 10, 44, 1]
my_list.sort(reverse=True)
print(f""Descending Order list:,{my_list}"")
"
Write a program to convert dictionary into JSON	"import json
data = {""key1"": ""value1"", ""key2"": ""value2""}
jsonData = json.dumps(data)
print(jsonData)
"
96 write a python program to convert  list of tuples into digits and print it	"
lst = [(11, 100), (22, 200), (33, 300), (44, 400), (88, 800)]
a = ''
for i in lst:
	for j in i:
        a += str(j)
print(list(set(a)))
"
rate and time	"

def simpleIntereset(principal, rate, time):
	return principal * rate * time / 100
"
add 1 to obtain 3n + 1. Repeat the process until you reach 1.	"def collatz_sequence(x):
	num_seq = [x]
	if x < 1:
        return []
	while x > 1:
        if x % 2 == 0:
            x = x / 2
        else:
            x = 3 * x + 1
        num_seq.append(x)
	return num_seq
"
comma separated sequence.	"value = []
items = [x for x in input().split(',')]
for p in items:
	intp = int(p, 2)
	if not intp % 5:
        value.append(p)


print(','.join(value))
"
Write a Python program to remove spaces from a given string	"def remove_spaces(str1):
	str1 = str1.replace(' ', '')
	return str1
"
60 Write a function to return the the unique tokens from a string	"

def unique_tokens(st):
	return set(st)
"
write a python program to convert a list of values in kilometers to feet	"kilometer = [39.2, 36.5, 37.3, 37.8]
feet = map(lambda x: float(3280.8399) * x, kilometer)
print(list(feet))
"
Write a Python function to calculate factorial of a given no using class	"

class Fact:
	def __init__(self):
        self.cache = {0: 1, 1: 1}

	def fact(self, n):
        if n not in self.cache:
            self.cache[n] = self.fact(n - 1) * n
        return self.cache[n]
"
Find ASCII Value of Character	"c = 'p'
print(""The ASCII value of '"" + c + ""' is"", ord(c))
"
exception handling and re-raise the exception again.	"def default_exception_simulator(user_func):
	try:
        if callable(user_func):
            user_func()
	except:
        print(""An exception occured"")
        raise
"
Evaluate a string and a number	"print(bool(""Hello""))
print(bool(15))
"
elements	"s1 = eval(input(""Enter set 1 ""))
s2 = eval(input(""Enter set 2 ""))
print(s1.intersection(s2))
"
Generate random Universally unique IDs	"import uuid
safeId = uuid.uuid4()
print(""safe unique id is "", safeId)
"
Write a python function to Copy the Contents of One File into Another	"

def copy(from_file, to_file):
	with open(from_file) as f:
        with open(to_file, ""w"") as f1:
            for line in f:
                f1.write(line)
"
Convert two lists into a dictionary	"ItemId = [54, 65, 76]
names = [""Hard Disk"", ""Laptop"", ""RAM""]
itemDictionary = dict(zip(ItemId, names))
print(itemDictionary)
"
write a Python function to print First n Digits of Pi	"

def pi(n):
	i = 1
	p = x = 3 * 10 ** (n + 10)
	while x:
        x = x * i // ((i + 1) * 4)
        i += 2
        p += x // i
	return '3.' + f""{p // 10 ** 10}""[1:]


print(pi(7))
"
Write a Python function to	"def binary_palindrome(n):
	s = int(bin(n)[2:])
	r = str(s)[::-1]
	if int(r) == s:
        return ""The binary representation of the number is a palindrome.""
	else:
        return ""The binary representation of the number is NOT a palindrome.""
"
length 10	"

list1 = [5] * 10


print(list1)
"
and height h between parallel sides	"def cal_area_trapezium(a, b, h):
	return h * (a + b) / 2
"
print all values except the first 5 elements in the list.	"def printList():
	li = list()
	for i in range(1, 21):
        li.append(i**2)
	print(li[5:])
"
Write Python Program to Print Table of a Given Number	"

n = int(input(""Enter the number to print the tables for:""))
for i in range(1, 11):
	print(n, ""x"", i, ""="", n * i)
"
and also exclude spaces	"def extract_alpha(my_string):
	return """".join([c for c in my_string if c.isalpha()])
"
Write a function that strips every vowel from a string provided	"def strip_vowels(input_str: str) -> str:

	vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']
	return ''.join(list(filter(lambda x: x not in vowels, input_str)))
"
25. Python Program to Add two Lists	"
NumList1 = []
NumList2 = []
total = []


Number = int(input(""Please enter the Total Number of List Elements: ""))
print(""Please enter the Items of a First and Second List	"")
for i in range(1, Number + 1):
	List1value = int(input(""Please enter the %d Element of List1 : "" % i))
	NumList1.append(List1value)

	List2value = int(input(""Please enter the %d Element of List2 : "" % i))
	NumList2.append(List2value)

for j in range(Number):
	total.append(NumList1[j] + NumList2[j])

print(""\nThe total Sum of Two Lists =  "", total)
"
but not both	"set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
print(set1.symmetric_difference(set2))
"
the string, ignoring all other characters	"import re


inputStr = ""English = 78 Science = 83 Math = 68 History = 65""
markList = [int(num) for num in re.findall(r'\b\d+\b', inputStr)]
totalMarks = 0
for mark in markList:
	totalMarks += mark


percentage = totalMarks / len(markList)
print(""Total Marks is:"", totalMarks, ""Percentage is "", percentage)
"
write a program to remove even numbers from a list using list comprehensions	"nums = [1, 2, 3, 4, 5, 6, 7, 8]
no_even_nums = [i for i in nums if i % 2 == 1]
"
Sort the list in descending order	"my_list = [4, 3, 2, 9, 10, 44, 1]
my_list.sort(reverse=True)
print(f""Descending Order list:,{my_list}"")
"
write Python3 code to demonstrate to create a substring from string	"ini_string = 'xbzefdgstb'
sstring = ini_string[2:7:2]
print('resultant substring{sstring}')
"
write a program to print maximum frequency character in a string	"

str1 = ""watch the match""
all_freq = {}
for i in str1:
	if i in all_freq:
        all_freq[i] += 1
	else:
        all_freq[i] = 1
res = max(all_freq, key=all_freq.get)
print(""Maximum of all characters is: "" + str(res))
"
"and ""Female"" for Female class."	"class Person(object):
	def getGender(self):
        return ""Unknown""


class Male(Person):
	def getGender(self):
        return ""Male""


class Female(Person):
	def getGender(self):
        return ""Female""
"
Write a Python program to remove spaces from a given string using set	"def remove_duplicate(str1):
	list_str = str1.split()
	return """".join(set(list_str))
"
Write a python function to check if 2 strings are anagrams or not	"def anagram(s1, s2):
	if sorted(s1) == sorted(s2):
        return True
	else:
        return False
"
Write a program to print bit wise XOR of two numbers	"a = 60
b = 13


c = a ^ b
print(""XOR"", c)
"
of the parent class using super	"

class A:
	def __init__(self):
        print(""My name is GYOBU MASATAKA ONIWA!"")


class B(A):
	def __init__(self):
        super(B, self).__init__()
        print(""as I breath, you WILL not pass the castle gates!"")


tmp = B()
"
appear in the string, ignoring all other characters	"import re


inputStr = ""English = 78 Science = 83 Math = 68 History = 65""
markList = [int(num) for num in re.findall(r'\b\d+\b', inputStr)]
totalMarks = 0
for mark in markList:
	totalMarks += mark


percentage = totalMarks / len(markList)
print(f'Total Marks is:{totalMarks},Percentage is:{percentage}')
"
of a number.	"n = int(input(""Input a number: ""))
for i in range(1, 11):
	print(n, 'x', i, '=', n * i)
"
numbers is even	"def is_prod_even(num1, num2):
	sum = num1 + num2
	return not sum % 2
"
returns a list with each list element raised to power of that number	"def powered_list(a_list, a_number):
	a_list = [math.pow(a_number) for i in a_list]
	return a_list
"
heterogeneous list using lambda	"def max_val(list_val):
	max_val = max(list_val, key=lambda i: (isinstance(i, int), i))
	return(max_val)
"
write a python program to loop over dictionaries that share (some) keys	"

dctA = {'a': 1, 'b': 2, 'c': 3}
dctB = {'b': 4, 'c': 3, 'd': 6}


for ky in dctA.keys() & dctB.keys():
	print(ky)
"
Write a python program to find length of list using recursion	"def length(lst):
	if not lst:
        return 0
	return 1 + length(lst[1::2]) + length(lst[2::2])
	a = [1, 2, 3]
	print(""Length of the string is: "")
	print(a)
"
44. Python Program to Multiply Two Matrices using Nested List Comprehension	"X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]
"
Given a Python list. Turn every item of a list into its square	"aList = [1, 2, 3, 4, 5, 6, 7]
aList = [x * x for x in aList]
print(aList)
"
occurrence of even element.	"
test_list = [1, 3, 7, 4, 7, 2, 9, 1, 10, 11]

indices_list = [idx for idx in range(
	len(test_list)) if test_list[idx] % 2 == 0]


res = indices_list[-1] - indices_list[0]

print(""Even elements distance : "" + str(res))
"
Write a python function to merge two Dictionaries	"def Merge(dict1, dict2):
	return(dict2.update(dict1))
"
a dictionary	"def count_value(d: dict, value) -> bool:
	return list(v == value for v in dict.values()).count(True)
"
Write a program to swap first and last elements in a list	"

my_list = [1, 2, 3, 4, 5, 6]
my_list[0], my_list[-1] = my_list[-1], my_list[0]
"
they add up to a specific target.	"input_array = [2, 7, 11, 15]
target = 26
result = []


for i, num in enumerate(input_array):
	for j in range(i + 1, len(input_array)):
        print(i, j)
"
list using map() + join()	"

test_list = [('G', 'E', 'E', 'K', 'S'), ('F', 'O', 'R'),
             ('G', 'E', 'E', 'K', 'S')]
print(""The original list is : "" + str(test_list))
res = list(map(''.join, test_list))
print(""The list after conversion to list of string : "" + str(res))
"
write a python function for some weird hypnosis text.	"def weird():
	import random

	def getlength(script):
        return sum((i['length'] for i in script))

	def truncate(target_length, script):
        if getlength(script) > target_length:
            script = sorted(script, key=lambda k: (
                k['priority'], -k['length']))[:-1]
            return truncate(target_length, script)
        return sorted(script, key=lambda k: k['index'])

	def as_text(script):
        return ""\n"".join([i['text'] for i in script])

	priorities_and_sentences = [
        (1, ""...now... sitting comfortably in the chair""),
        (2, ""...with your feet still flat on the ground""),
        (3, ""...back straight and head up right""),
        (2, ""...make these adjustments now if you need to""),
        (3, ""... pause..............................""),
        (1, ""...your eyes ...still ...comfortably closed""),
        (2, ""...nice and relaxed...comfortable and relaxed...""),
        (3, ""... pause.......................................""),
        (1, ""...now...I want you to notice...how heavy your head is starting to feel...""),
        (1, ""how heavy your head feels...""),
        (3, ""... pause.......................................""),
        (2, ""really noticing the weight... of your head...""),
        (3,
         ""and how much more ...comfortable...it will feel when you let your neck relaxes ...and your head begins to fall forward ...into a much more comfortable""),
	]

	scriptlist = [{'priority': j[0], 'text': j[1], 'length': len(j[1]), 'index': i} for i, j in
                  enumerate(priorities_and_sentences)]

	print(as_text(truncate(500, scriptlist)))
	print(as_text(truncate(300, scriptlist)))
	print(as_text(truncate(200, scriptlist)))
"
34. write a Python function to Find LCM and returb the value	"def compute_lcm(x, y):

	
	if x > y:
        greater = x
	else:
        greater = y

	while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1

	return lcm
"
6. Write a python program to swap two variables, Using a temporary variable	"

x = 5
y = 10


temp = x
x = y
y = temp


print('The value of x after swapping: {}'.format(x))
print('The value of y after swapping: {}'.format(y))
"
objects of mass m1 and m2 and distance of r between them	"def cal_gforce(mass1: float, mass2: float, distance: float) -> float:
	g = 6.674 * (10)**(-11)
	return (g * mass1 * mass2) / (distance**2)
"
Create a Generator	"def generator(n=100000):
	my_gen = (i for i in range(n) if i % 5 == 0)
	return my_gen
"
write a python program to concatenate two dictionaries	"

d1 = {'a': 1, 'b': 2}
d2 = {'c': 1, 'd': 2}
d3 = {**d1, **d2}
print(d3)
"
write a python program to print system time	"import time
print(f""{time.time()}"")
"
write a python program that prints every third character in a sentence	"sentence = 'the quick brown fox'
print(sentence[::3])
"
within the rectangle which in turn is inscribed in an ellipse	"

def area(a, b):

	if (a < 0 or b < 0):
        return -1

	A = a * b
	return A


a = 5
b = 2
print(area(a, b))
"
13 function to print the multiplication table	"def maths_tables(no_: int):
	for i in range(1, 11):
        print(f'{no_}x{i}={no_*i}')
"
print the first 5 elements in the list.	"def printList():
	li = list()
	for i in range(1, 21):
        li.append(i**2)
	print(li[:5])
"
middle of s1 given two strings, s1 and s2	"def appendMiddle(s1, s2):
	middleIndex = int(len(s1) / 2)
	middleThree = s1[:middleIndex:] + s2 + s1[middleIndex:]
	print(""After appending new string in middle"", middleThree)


appendMiddle(""Ault"", ""Kelly"")
"
write a python program to print bitwise OR operation	"a = 60
b = 13
a_or_b = a | b
print(a_or_b)
"
16. python function for count of address reference	"import ctypes


def ref_count(address: int):  
	return ctypes.c_long.from_address(address).value
"
Write a function to convert Miles to Kilometers	"def Miles_to_Kilometers(m):
	conv_fac = 0.621371
	kilometers = m / conv_fac
	return kilometers
"
and Value as Words Starting with that Character	"

string_input = '''GeeksforGeeks is a Computer Science portal for geeks.
	It contains well written, well thought and well explained
	computer science and programming articles, quizzes etc.'''


words = string_input.split()


dictionary = {}


for word in words:

	if (word[0].lower() not in dictionary.keys()):

        dictionary[word[0].lower()] = []
        dictionary[word[0].lower()].append(word)

	else:

        if (word not in dictionary[word[0].lower()]):
            dictionary[word[0].lower()].append(word)


print(dictionary)
"
Counting total Digits in a string	"str1 = ""abc4234AFde""
digitCount = 0
for i in range(0, len(str1)):
	char = str1[i]
	if(char.isdigit()):
        digitCount += 1
print('Number of digits: ', digitCount)
"
string return 'Not found' and print the output.	"def find_Index(str1, pos):
	if len(pos) > len(str1):
        return 'Not found'

	for i in range(len(str1)):

        for j in range(len(pos)):

            if str1[i + j] == pos[j] and j == len(pos) - 1:
                return i

            elif str1[i + j] != pos[j]:
                break

	return 'Not found'
"
prints a new list	"list1 = [1, 2, 3, 4, 5]
list2 = [5, 4, 3, 2, 1]
quot_list = [a / b for (a, b) in zip(list1, list2)]
print(quot_list)
"
Write a python program to remove punctuations from a sentence	"

punctuations = '''!()-[]{};:'""\\,<>./?@#$%^&*_~'''


my_str = ""Hello!!!, he said ---and went.""


no_punct = """"
for char in my_str:
	if char not in punctuations:
        no_punct = no_punct + char


print(no_punct)
"
write a function to check a valid email id	"

import re


def check(email):
	regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'
	if(re.search(regex, email)):
        print(""Valid Email"")
	else:
        print(""Invalid Email"")
"
write a Python function to convert binary to Gray codeword	"def binary_to_gray(n):
	n = int(n, 2)
	n ^= (n >> 1)
	return bin(n)[2:]
"
write a python program to remove punctuations from a string and print it	"punctuations = '''!()-[]{};:'""\\,<>./?@#$%^&*_~'''
my_str = input(""Enter a string: "")


no_punct = """"
for char in my_str:
	if char not in punctuations:
        no_punct = no_punct + char


print(no_punct)
"
Write a lambda function to that gives the number of digits in a number	"

def dig_cnt(a): return len(str(a))
"
Usage of global keyword	"x = 0


def in_func2():
	global x
	x = 1
	print('in_func2:', x)


in_func2()
print('global:', x)
"
Write a function to return reverse of a list	"def reverse_list(l1: list) -> list:
	return l1[::-1]
"
keys and the numbers in english as values	"number_dict = {
	1: 'one',
	2: 'two',
	3: 'three',
	4: 'four',
	5: 'five'
}
"
Write a function to return the nth prime number	"def nth_prime_number(n):
	prime_list = [2]
	num = 3
	while len(prime_list) < n:
        for p in prime_list:
            if num % p == 0:
                break
        else:
            prime_list.append(num)
            num += 2
	return prime_list[-1]
"
index 1 to 4	"

list1 = [11, 5, 17, 18, 23, 50]

del list1[1:5]

print(*list1)
"
divident are given	"def remainder(Divident, Divisor): return Divident % Divisor


print(remainder(5, 2))
"
numbers to positive numbers and returns the new list	"def make_all_positive(nums):
	return [num if num > 0 else -num for num in nums]
"
for a radius	"

class CircleArea:
	def __init__(self, radius):
        self.radius = radius

	def area(self):
        return math.pi * self.radius * self.radius


r = 2
obj = CircleArea(r)
print(""Area of circle:"", obj.area())
"
cleaned string.	"punctuations = '''!()-[]{};:'""\\,<>./?@#$%^&*_~'''
my_str = ""Hello!!!, he said ---and went.""
no_punct = """"
for char in my_str:
	if char not in punctuations:
        no_punct = no_punct + char
print(no_punct)
"
Find the day of week of a given date?	"from datetime import datetime
given_date = datetime(2020, 7, 26)
print(given_date.strftime('%A'))
"
Generate a list by list comprehension	"list = [x for x in range(10)]
print(f""List Generated by list comprehension:{list}"")
"
Write a function to implement Pigeonhole Sort */	"def pigeonhole_sort(a):
	my_min = min(a)
	my_max = max(a)
	size = my_max - my_min + 1
	holes = [0] * size
	for x in a:
        assert type(x) is int, ""integers only please""
        holes[x - my_min] += 1
	i = 0
	for count in range(size):
        while holes[count] > 0:
            holes[count] -= 1
            a[i] = count + my_min
            i += 1


a = [8, 3, 2, 7, 4, 6, 8]
print(""Sorted order is : "", end="" "")
pigeonhole_sort(a)
for i in range(0, len(a)):
	print(a[i], end="" "")
"
write Python program to demonstrate check if list are identical	"

test_list1 = [1, 2, 4, 3, 5]
test_list2 = [1, 2, 4, 3, 5]


print(""The first list is : "" + str(test_list1))
print(""The second list is : "" + str(test_list2))


test_list1.sort()
test_list2.sort()


if test_list1 == test_list2:
	print(""The lists are identical"")
else:
	print(""The lists are not identical"")
"
74 write a program to shuffle and print the list [3,6,7,8].	"from random import shuffle


li = [3, 6, 7, 8]
shuffle(li)
print(li)
"
Write a program to check your external ip address	"

import re
import requests


url = ""http://checkip.dyndns.org""
request = requests.get(url)
clean = request.text.split(': ', 1)[1]
your_ip = clean.split('</body></html>', 1)[0]


print(""your IP Address is: "", your_ip)
"
write a python program to find the number of files in a directory	"

import os
dir = '.'
list = os.listdir(dir)
number_files = len(list)
print(f'There are {number_files} file in the directory')
"
write a python function to return the factorial of a number	"def fact(n):
	if n == 1:
        return n
	else:
        return n * fact(n - 1)
"
printing original list	"print(""The original list is : "" + str(test_list))

res = []
vow = ""aeiou""
for sub in test_list:
	flag = False

	for ele in vow:
        if sub.startswith(ele):
            flag = True
            break
	if flag:
        res.append(sub)

print(""The extracted words : "" + str(res))
"
Write a function that returns a dictionary sorted ascending by its keys	"def ascending_dict_keysort(d: dict):
	return {key: val for key, val in sorted(d.items(), key=lambda ele: ele[0])}
"
17 write a function to initialize a linked list	"

class Cell:
	def __init__(self, val):
        self.val = val
        self.next = None


class LinkedList:
	def __init__(self):
        self.head = None
"
Write a program to merge two python dictionaries and print merged dictionary	"d1 = {'a': 100, 'b': 200}
d2 = {'x': 300, 'y': 200}
d = d1.copy()
d.update(d2)
print(d)
"
using a for loop	"n = 62
for num in range(n):
	print(num)
"
20 write program to find yesterday, today and tomorrow	"
presentday = datetime.now()
yesterday = presentday - timedelta(1)
tomorrow = presentday + timedelta(1)
print(""Yesterday = "", yesterday.strftime('%d-%m-%Y'))
print(""Today = "", presentday.strftime('%d-%m-%Y'))
print(""Tomorrow = "", tomorrow.strftime('%d-%m-%Y'))
"
write a python program to print the ascii value of a character	"str1 = 'a'
print(ord(str1))
"
given formula:	"
import math
c = 50
h = 30
value = []
items = [x for x in input().split(',')]
for d in items:
	value.append(str(int(round(math.sqrt(2 * c * float(d) / h)))))


print(','.join(value))
"
Write a program to convert kilometers per hour to mile per hour	"

kmh = 16
mph = 0.6214 * kmh
print(""Speed:"", kmh, ""KM/H = "", mph, ""MPH"")
"
each element in a list using enumerate	"
l1 = [""eat"", ""sleep"", ""repeat""]
for count, ele in enumerate(l1, 100):
	print(count, ele)
"
Write a function to return the total surface area of a cylinder	"def cal_cylinder_surf_area(height, radius):
	pi = 3.14
	return 2 * pi * radius**2 * +2 * pi * radius * height
"
write a python program to add two list of same length.	"def add_two_list_items():
	num1 = [1, 2, 3]
	num2 = [4, 5, 6]
	sum = num1 + num2
	print(f'Sum: {sum}')
"
27. Python Program to Convert Decimal to Hexadecimal	"dec = 344
print(""The decimal value of"", dec, ""is:"")
print(hex(dec), ""in hexadecimal."")
"
string library	"

import string


def return_punct():
	return string.punctuation
"
Write a lambda function to find the union of two lists	"

def union(a, b): return list(set(a) | set(b))
"
number which is set bit and which is in power of two	"def setBitNumber(n):
	if (n == 0):
        return 0
	msb = 0
	n = int(n / 2)
	while (n > 0):
        n = int(n / 2)
        msb += 1
	return (1 << msb)
"
18 write a program to convert time from 12 hour to 24 hour format	"
def convert24(str1):

	if str1[-2:] == ""AM"" and str1[:2] == ""12"":
        return ""00"" + str1[2:-2]

	elif str1[-2:] == ""AM"":
        return str1[:-2]

	elif str1[-2:] == ""PM"" and str1[:2] == ""12"":
        return str1[:-2]

	else:
        return str(int(str1[:2]) + 12) + str1[2:8]


print(convert24(""08:05:45 PM""))
"
Appears in the Text File	"def count_letter(fname, l):
	k = 0
	with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            for i in words:
                for letter in i:
                    if(letter == l):
                        k = k + 1
	return k
"
Write a  python program to print the last element of a list	"list1 = ['p', 'r', 'o', 'b', 'e']


print(list1[-1])
"
write a function that acts like a ReLU function for a 1D array	"def relu_list(input_list: list) -> list:
	return [(lambda x: x if x >= 0 else 0)(x) for x in input_list]
"
Python program to compute sum of digits in number	"def sumDigits(no):
	return 0 if no == 0 else int(no % 10) + sumDigits(int(no / 10))


n = 1234511
print(sumDigits(n))
"
write a python class called Person that has a name property	"class Person:
	def __init__(self, name):
        self.name = name
"
Write a program to merge two python dictionaries	"x = {'key1': 'val1', 'key2': 'val2'}
y = {'key3': 'val3', 'key4': 'val4'}
z = {**x, **y}  
"
print the result	"n = 7
sum1 = 0
for i in range(1, n):
	if(n % i == 0):
        sum1 = sum1 + i
if (sum1 == n):
	print(""The number is a Perfect number!"")
else:
	print(""The number is not a Perfect number!"")
"
write a python program to check two lists are equal or not	"

a = [1, 4, 3, 5, 2]
b = [3, 1, 5, 2, 4]
print(a == b)
"
by a specified key	"def sort_dict_list(dict_list, sort_key):
	dict_list.sort(key=lambda item: item.get(sort_key))
"
the string to the list of values	"def addnames_in_dict(dictname, name):
	for i in dictname:
        dictname[i].append(name)
	return dictname


addnames_in_dict({""1"": [""A""]}, ""Arun"")
"
given file	"def check_word_count(word, file):
	if not os.path.isfile(file):
        raise FileNotFoundError
	if not isinstance(word, str):
        raise TypeError

	with open(file, 'r') as f:
        lines = f.readlines()
        words = [l.strip().split(' ') for l in lines]
        words = [word for sublist in words for word in sublist]
        c = Counter(words)
	return c.get(word, 0)
"
Write a python program for print all elements with digit 7.	"
test_list = [56, 72, 875, 9, 173]

K = 7

res = [ele for ele in test_list if str(K) in str(ele)]

print(""Elements with digit K : "" + str(res))
"
write a python program to convert Kilometers to Miles	"kilometers = float(input(""Enter value in kilometers: ""))


conv_fac = 0.621371


miles = kilometers * conv_fac
print('%0.2f kilometers is equal to %0.2f miles' % (kilometers, miles))
"
Write a Python Program to print the Sum of First N Natural Numbers	"

n = 7
sum1 = 0
while(n > 0):
	sum1 = sum1 + n
	n = n - 1
print(""The sum of first n natural numbers is"", sum1)
"
function to remove empty tuples using filter	"def Remove(tuples):
	tuples = filter(None, tuples)
	return tuples


tuples = [(), ('ram', '15', '8'), (), ('laxman', 'sita'),
          ('krishna', 'akbar', '45'), ('', ''), ()]
print(Remove(tuples))
"
12. Python Program to Check Leap Year	"year = 2000


if (year % 4) == 0:
	if (year % 100) == 0:
        if (year % 400) == 0:
            print(""{0} is a leap year"".format(year))
        else:
            print(""{0} is not a leap year"".format(year))
	else:
        print(""{0} is a leap year"".format(year))
else:
	print(""{0} is not a leap year"".format(year))
"
Write a Python function to return Tribonacci's Sequence	"def tribonacci_seq(n):
	if n >= 0:
        if n == 0:
            return 0
        elif n == 1:
            return 1
        elif n == 2:
            return 1
        else:
            return tribonacci_seq(n - 1) + tribonacci_seq(n - 2) + tribonacci_seq(n - 3)
"
write a python function to Compute LCM	"def compute_lcm(x, y):
	if x > y:
        greater = x
	else:
        greater = y

	while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1

	return lcm
"
Generate weighted random numbers	"import random
randomList = random.choices(
	range(
        10, 40, 5), cum_weights=(
        5, 15, 10, 25, 40, 65), k=6)
print(randomList)
"
write a program to print 5 random numbers between 100 and 200	"import random
print(random.sample(range(100, 200), 5))
"
55 string to tuple	"def sen_to_tuple(sen):
	return tuple(sen)
"
and the Last Character have been Exchanged	"

def change(string):
	return string[-1:] + string[1:-1] + string[:1]
"
Write a program to take an average of given scores	"s1 = 50
s2 = 77
s3 = 87


print('Avg score is', (s1 + s2 + s3) / 3)
"
Incremented Date if it is	"

date = ""20/04/2021""
dd, mm, yy = date.split('/')
dd = int(dd)
mm = int(mm)
yy = int(yy)
if num == 0:
	return 0
else:
	return num % 10 + sumDigits(int(num / 10))
if (7 or mm == 8 or mm == 10 or mm == 12):
	max1 = 31
elif(mm == 4 or mm == 6 or mm == 9 or mm == 11):
	max1 = 30
elif(yy % 4 == 0 and yy % 100 != 0 or yy % 400 == 0):
	max1 = 29
else:
	max1 = 28
if(mm < 1 or mm > 12):
	print(""Date is invalid."")
elif(dd < 1 or dd > max1):
	print(""Date is invalid."")
elif(dd == max1 and mm != 12):
	dd = 1
	mm = mm + 1
	print(""The incremented date is: "", dd, mm, yy)
elif(dd == 31 and mm == 12):
	dd = 1
	mm = 1
	yy = yy + 1
	print(""The incremented date is: "", dd, mm, yy)
else:
	dd = dd + 1
	print(""The incremented date is: "", dd, mm, yy)
"
write a python program to extract the file name and extension of a file	"import os
filename, extension = os.path.splitext('/path/to/some/file.ext')
"
Write a function that returns cosine value of the input	"def cos(x: float) -> float:
	import math
	return math.cos(x)
"
result in list	"input_list = [1, 2, 3, 4, 4, 33, 2, 5]
dedup = list(set(input_list))
print(f""{dedup}"")
"
the word has been repeated using closure concept	"def word_counter():
	counter = {}

	def count(word):
        counter[word] = counter.get(word, 0) + 1
        return counter[word]
	return count
"
write a python program to count the number of each vowel and print them	"vowels = 'aeiou'


ip_str = 'Hello, have you tried our tutorial section yet?'


ip_str = ip_str.casefold()


count = {}.fromkeys(vowels, 0)


for char in ip_str:
	if char in count:
        count[char] += 1


print(count)
"
17 write a program to get current date and time	"current_time = datetime.datetime.now()

print(""Time now at greenwich meridian is : "", end="""")
print(current_time)
"
is raised.	"def iter_except(func, exception, first=None):
	try:
        if first is not None:
            yield first()
        while True:
            yield func()
	except exception:
        pass
"
Dynamic binding and typos in variable names	"print('first list:')
for i in range(3):
	print(i)

print('\nsecond list:')
for j in range(3):
	print(i)  
"
write a python program to print unique numbers in a list	"numbers = [1, 2, 2, 3, 4, 4, 5, 6]
unique = set(numbers)
print(f'Unique numbers: {list(unique)}')
"
perimeter of a rectangle	"def calculate_rect_properties(width, height):
	return {
        'perimeter': 2 * (width + height),
        'area': width * height
	}
"
result is 3x4	"result = [[sum(a * b for a, b in zip(X_row, Y_col))
           for Y_col in zip(*Y)] for X_row in X]


for r in result:
	print(r)
"
Removes all items from the list	"list = [{1, 2}, ('a'), ['1.1', '2.2']]
list.clear()
print('List:', list)
"
Write a function to return the area of a rhombus with diagonals q1 and q2	"def cal_area_rhombus(q1, q2):
	return (q1 * q2) / 2
"
4 write a function to print the count of divisor.	"def divisor_count(num: int):
	
	if isinstance(num, int):
        count = 0
        for i in range(1, num + 1):
            if num % i == 0:
                count = count + 1
        print(f'Number of divisor is {count}')
	else:
        raise ValueError('Invalid Input')
"
given list ‘l’.	"

l1 = [1, 2, 3, -4, -8]


print('negative integers:', [x for x in l1 if x < 0])
"
write a python function that returns the input list sorted in ascending order	"def sort_ascending(list_to_be_sorted):
	return sorted(list_to_be_sorted)
"
iterate through rows	"for i in range(len(X)):
	
	for j in range(len(X[0])):
        result[j][i] = X[i][j]


for r in result:
	print(r)
"
Python program to validate a Gregorian date	"

def check_date(m, d, y):
	import datetime
	try:
        m, d, y = map(int, (m, d, y))
        datetime.date(y, m, d)
        return True
	except ValueError:
        return False


print(check_date(11, 11, 2002))
print(check_date('11', '11', '2002'))
print(check_date(13, 11, 2002))
"
write a python list comprehension to transpose a 2D matrix (provided as list)	"matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
matrixT = [[row[i] for row in matrix] for i in range(len(matrix[0]))]
"
cost as list	"

class Food(object):
	def __init__(self, name, price):
        self.name = name
        self.price = price

	def getprice(self):
        return self.price

	def __str__(self):
        return self.name + ' : ' + str(self.getprice())


def buildmenu(names, costs):
	menu = []
	for i in range(len(names)):
        menu.append(Food(names[i], costs[i]))
	return menu


names = ['Coffee', 'Tea', 'Pizza', 'Burger', 'Fries', 'Apple', 'Donut', 'Cake']


costs = [250, 150, 180, 70, 65, 55, 120, 350]


Foods = buildmenu(names, costs)


n = 1
for el in Foods:
	print(n, '. ', el)
	n = n + 1
"
IP address or not	"

import re


def Validate_IP(IP):
	regex = ""(([0-9]|[1-9][0-9]|1[0-9][0-9]|""        ""2[0-4][0-9]|25[0-5])\\.){3}""        ""([0-9]|[1-9][0-9]|1[0-9][0-9]|""        ""2[0-4][0-9]|25[0-5])""

	regex1 = ""((([0-9a-fA-F]){1,4})\\:){7}""        ""([0-9a-fA-F]){1,4}""

	p = re.compile(regex)
	p1 = re.compile(regex1)

	if (re.search(p, IP)):
        return ""Valid IPv4""

	elif (re.search(p1, IP)):
        return ""Valid IPv6""

	return ""Invalid IP""
"
Don't use mutable objects as default arguments for functions!	"def append_to_list(value, def_list=[]):
	def_list.append(value)
	return def_list


my_list = append_to_list(1)
print(my_list)


my_other_list = append_to_list(2)
print(my_other_list)
"
write a program to print maximum frequency character in a string	"

str1 = ""watch the match""
all_freq = {}
for i in str1:
	if i in all_freq:
        all_freq[i] += 1
	else:
        all_freq[i] = 1
res = max(all_freq, key=all_freq.get)
print(""Maximum of all characters is: "" + str(res))
"
but not both	"set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
print(set1.symmetric_difference(set2))
"
principle amount, rate of interest and time is given	"def simple_interest(p, r, t):
	si = (p * r * t) / 100
	return si
"
print boolean value	"

list1 = [5, 6, 7, 8]
list2 = [8, 7, 6, 5]

res = list1 == list(reversed(list2))

print(""Are both list reverse of each other ? : "" + str(res))
"
write a program to merge two lists into a dictionary	"keys = [1, 2, 3]
values = ['aye', 'bee', 'sea']
dictionary = dict(zip(keys, values))
"
Add week (7 days) and 12 hours to a given date	"from datetime import datetime, timedelta
given_date = datetime(2020, 3, 22, 10, 00, 00)
days_to_add = 7
res_date = given_date + timedelta(days=days_to_add, hours=12)
print(res_date)
"
Write a Python function to print the root of the quadratic equation	"def quadratic_root(A, B, C):
	import math
	d = ((B**2) - 4 * A * C)

	if d >= 0:
        s = (-B + (d)**0.5) / (2 * A)
        p = (-B - (d)**0.5) / (2 * A)
        print(math.floor(s), math.floor(p))
	else:
        print('The roots are imaginary')
"
and textwrap modules	"import sys
import textwrap
module_name = ', '.join(sorted(sys.builtin_module_names))
print(textwrap.fill(module_name, width=70))
"
write a program to convert given dictonary to list of list key value pairs	"

d = {'Food': 'Fish&Chips', '2012': 'Olympics', 'Capital': 'London'}
list_key_value = [[k, v] for k, v in d.items()]
print(f'lsit_key_value:{list_key_value}')
"
python program to add three list	"def add_list(num1, num2, num3):
	result = map(lambda x, y, z: x + y + z, num1, num2, num3)
	print(""\nNew list after adding above three lists:"")
	print(list(result))


nums1 = [1, 2, 3]
nums2 = [4, 5, 6]
nums3 = [7, 8, 9]


add_list(nums1, nums2, nums3)
"
"nested tuples Using "", "" operator during concatenation"	"

test_tup1 = (3, 4)
test_tup2 = (5, 6)


print(""The original tuple 1 : "" + str(test_tup1))
print(""The original tuple 2 : "" + str(test_tup2))


res = ((test_tup1, ) + (test_tup2, ))


print(""Tuples after Concatenating : "" + str(res))
"
80 class to show implementation of custom sequence of tuple	"class CustomTuple:
	

	def __init__(self):
        self.list_ = (1, 2, 3, 4)

	def __len__(self):
        return len(self.list_)

	def __getitem__(self, i):
        if isinstance(i, int):
            if i < 0:
                i = len(self.list_) + i

            if i < 0 or i >= len(self.list_):
                raise IndexError('Invalid Input')
            else:
                return self.list_[i]
"
The consequences of modifying a list when looping through it	"a = [1, 2, 3, 4, 5]
for i in a:
	if not i % 2:
        a.remove(i)
print(a)
b = [2, 4, 5, 6]
for i in b:
	if not i % 2:
        b.remove(i)
print(b)
"
Alternate cases in String	"test_str = ""geeksforgeeks""
res = """"
for idx in range(len(test_str)):
	if not idx % 2:
        res = res + test_str[idx].upper()
	else:
        res = res + test_str[idx].lower()
print(res)
"
case.	"

class IOString(object):
	def __init__(self):
        self.s = """"

	def getString(self):
        self.s = input()

	def printString(self):
        print(self.s.upper())


strObj = IOString()
strObj.getString()
strObj.printString()
"
list for the below list	"

def insertion_sort(alist):
	for i in range(1, len(alist)):
        temp = alist[i]
        j = i - 1
        while (j >= 0 and temp < alist[j]):
            alist[j + 1] = alist[j]
            j = j - 1
        alist[j + 1] = temp


alist = [2, 3, 5, 6, 4, 5]
insertion_sort(alist)
print('Sorted list: ', end='')
print(alist)
"
number by given shifts	"def bit_mul(n, shift):
	return n << shift
"
print the result	"def isPalindrome(s):
	if (s == s[::-1]):
        print(""Given string is palindrome"")
	else:
        print(""Given string is not palindrome"")


s = ""malayalam""
isPalindrome(s)
"
Write a Python Program to Print all Pythagorean Triplets in the Range	"

limit = 10
c = 0
m = 2
while(c < limit):
	for n in range(1, m + 1):
        a = m * m - n * n
        b = 2 * m * n
        c = m * m + n * n
        if(c > limit):
            break
        if(a == 0 or b == 0 or c == 0):
            break
        print(a, b, c)
	m = m + 1
"
a given string	"str1 = 'TestStringwith123456789'
no_of_letters, no_of_digits = 0, 0
for c in str1:
	no_of_letters += c.isalpha()
	no_of_digits += c.isnumeric()


print(no_of_letters)
print(no_of_digits)
"
loan amount, interest rate, annual payments and tenure.	"import itertools


def loan_schedule(principal, interest_rate, annual_payment, tenure):
	if(tenure <= 0):
        print(""Invalid tenure"", tenure)
        raise ValueError
	if(interest_rate > 1 or interest_rate < 0):
        print(""Invalid interest rate"", interest_rate,
              "" Expected between 0 and 1"")
        raise ValueError
	cashflows = [principal, *list(itertools.repeat(-annual_payment, tenure))]
	effective_interest_rate = 1 + interest_rate
	return [
        val for val in list(
            itertools.accumulate(
                cashflows,
                lambda bal,
                pmt: (
                    bal
                            * effective_interest_rate
                    + pmt))) if val > 0]
"
(both included). and then the program should print the dictionary.	"n = 8
d = dict()
for i in range(1, n + 1):
	d[i] = i * i * i
print(d)
"
parameter.	"class Person:
	name = ""Person""

	def __init__(self, name=None):
        self.name = name


jeffrey = Person(""Jeffrey"")
print(""%s name is %s"" % (Person.name, jeffrey.name))
nico = Person()
nico.name = ""Nico""
print(""%s name is %s"" % (Person.name, nico.name))
"
write a function to find common words from two strings	"

def commonWords(str1, str2):

	count = {}

	for word in str1.split():
        count[word] = count.get(word, 0) + 1

	for word in str2.split():
        count[word] = count.get(word, 0) + 1

	return [word for word in count if count[word] > 1]
"
or 5 below 500.	"n = 0
for i in range(1, 500):
	if not i % 5 or not i % 3:
        n = n + i
print(n)
"
Write a function to generate permutation of list of numbers	"

def permute(nums):
	def backtrack(first=0):
        if first == n:
            output.append(nums[:])
        for i in range(first, n):
            nums[first], nums[i] = nums[i], nums[first]
            backtrack(first + 1)

            nums[first], nums[i] = nums[i], nums[first]

	n = len(nums)
	output = []
	backtrack()
	return output
"
60 write a  program to sort words in alphabetic order	"

my_str = input(""Enter a string: "")
"
write a python function to convert Celsius to Fahrenheit.	"

def celsius_to_fahrenheit(degrees):
	return ((degrees * 1.8) + 32)
"
Write a python function to identify type of given data structure	"

def ds_type(ds):
	return(type(ds))


l = [1, 2, 3, 4]
ds_type(l)
"
Write a function to calculate Volume of Pentagonal Pyramid	"def volumePentagonal(a, b, h):
	return (0.83) * a * b * h
"
Write a python program to print the smallest number in a list	"

list1 = [10, 20, 1, 45, 99]

print(""Smallest element is:"", min(list1))
"
Merge two dictionaries in a single expression	"currentEmployee = {1: 'Scott', 2: ""Eric"", 3: ""Kelly""}
formerEmployee = {2: 'Eric', 4: ""Emma""}
allEmployee = {**currentEmployee, **formerEmployee}
print(allEmployee)
"
consonants and should contain vowels only.	"def find_substr():
	import re
	v = ""aeiou""
	c = ""qwrtypsdfghjklzxcvbnm""
	m = re.findall(r""(?<=[%s])([%s]{2,})[%s]"" % (c, v, c), input(), flags=re.I)
	print('\n'.join(m or ['-1']))
"
15 write a program to Remove Tuples of Length K Using list comprehension	"
test_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)]
print(""The original list : "" + str(test_list))
K = 1
res = [ele for ele in test_list if len(ele) != K]
print(""Filtered list : "" + str(res))
"
Write a function for vertical concatenating of a matrix	"def vertical_concatenation():
	test_list = [[""this"", ""is""], [""program"", ""for""],
                 [""vertical"", ""concatenation""]]
	print(""The original list : "" + str(test_list))
	res = []
	N = 0
	while N != len(test_list):
        temp = ''
        for idx in test_list:
            try:
                temp = temp + idx[N]
            except IndexError:
                pass
        res.append(temp)
        N = N + 1
	res = [ele for ele in res if ele]
	print(""List after column Concatenation : "" + str(res))


vertical_concatenation()
"
"prints ""Inside B"""	"def A():
	B()


def B():
	print(""Inside B"")


A()
"
35 how to open xml file element tree	"

tree = ET.parse('filename.xml')
tree_root = tree.getroot()
"
write a python program to find index of max element	"

lst = [40, 10, 20, 30]


def maxIndex(lst):
	return max(range(len(lst)), key=lst.__getitem__)


print(maxIndex(lst))
"
Write a function to compute 5/0 and use try/except to catch the exceptions.	"def throws():
	return 5 / 0


try:
	throws()
except ZeroDivisionError:
	print(""division by zero!"")
except Exception:
	print('Caught an exception')
finally:
	print('In finally block for cleanup')
"
with side as length, width and height as input	"def rec_prism_surface_area(length, width, height):
	surface_area = 2 * ((length * width) +
                        (width * height) + (height * length))
	return surface_area
"
progression or not	"def is_geometric(li):
	if len(li) <= 1:
        return True
	
	ratio = li[1] / float(li[0])
	for i in range(1, len(li)):
        if li[i] / float(li[i - 1]) != ratio:
            return False
	return True
"
write a function to calculate BMI given height in meters and weights in kgs	"

def bmi(height, weight):
	return weight / (height * height)
"
m at height h	"def cal_pe(mass: float, height: float) -> float:
	g = 9.8
	return (mass * g * height)
"
Write a python program to print the combination of tuples in list of tuples	"
test_list = [([1, 2, 3], 'gfg'), ([5, 4, 3], 'cs')]

res = [(tup1, tup2) for i, tup2 in test_list for tup1 in i]


print(""The list tuple combination : "" + str(res))
"
python function to print all time when angle between hour hand and minute	"def printTime(theta):
	for hh in range(0, 12):
        for mm in range(0, 60):
            if (calcAngle(hh, mm) == theta):
                print(hh, "":"", mm, sep="""")
                return
	print(""Input angle not valid."")
	return


theta = 90.0
printTime(theta)
"
24 convert string to intern string	"def str_to_intern_str(a):
	import sys
	b = sys.intern(a)
	if a is b:
        print('Sentence is interned')
	else:
        raise ValueError('This should not happen')
"
and prints it.	"test_list = [{'END': [5, 6, 5]}, {'is': [10, 2, 3]}, {'best': [4, 3, 1]}]
res = [{} for idx in range(len(test_list))]
idx = 0
for sub in test_list:
	for key, val in sub.items():
        for ele in val:
            res[idx][key] = ele
            idx += 1
        idx = 0
print(""Records after conversion : "" + str(res))
"
Write a function that returns cosine value of the input	"def derivative_cos(x: float) -> float:
	import math
	return -(math.sin(x))
"
username	"

name = input()
print('Hello ' + name)
"
enumerate	"
l1 = [""eat"", ""sleep"", ""repeat""]
for ele in enumerate(l1):
	print(ele)
"
write a program to print the nth fibonacci number	"n1 = 1
n2 = 1
n = 5
for _ in range(n):
	n1, n2 = n2, n1 + n2
print(n2)
"
are square of numbers between 1 and 20 (both included).	"def printList():
	li = list()
	for i in range(1, 21):
        li.append(i**2)
	print(li)
"
Write a python program to implement bubble sort and print the result	"from random import randint


N = 7
a = []


for i in range(N):
	a.append(randint(1, 20))
print(a)


for i in range(N - 1):
	for j in range(N - i - 1):
        if a[j] > a[j + 1]:
            b = a[j]
            a[j] = a[j + 1]
            a[j + 1] = b


print(a)
"
29 write a program to sort a list using bubblesort	"

def bubblesort(arr):
	n = len(arr)

	for i in range(n - 1):
        for j in range(n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
	return arr


print(bubblesort([1, 33, 192, 21, 0]))
"
write a Python program to find a list of uncommon words	"

def UncommonWords(A, B):

	count = {}

	for word in A.split():
        count[word] = count.get(word, 0) + 1

	for word in B.split():
        count[word] = count.get(word, 0) + 1

	return [word for word in count if count[word] == 1]


A = ""Geeks for Geeks""
B = ""Learning from Geeks for Geeks""


print(UncommonWords(A, B))
"
Sort JSON keys in Python and write it into a file	"import json
sampleJson = {""id"": 1, ""name"": ""value2"", ""age"": 29}


with open(""sampleJson.json"", ""w"") as write_file:
	json.dump(sampleJson, write_file, indent=4, sort_keys=True)
print(""Done writing JSON data into a file"")
"
A recursive function to find nth catalan number	"def catalan(n):
	if n <= 1:
        return 1

	res = 0
	for i in range(n):
        res += catalan(i) * catalan(n - i - 1)

	return res


for i in range(10):
	print(catalan(i))
"
64 function to build a time elapsed closures	"def time_elsaped():
	start = perf_counter()

	def inner():
        nonlocal perf_counter
        return perf_counter() - start
	return inner
"
write a python program to check tuple are immutable	"a = (1, 2, 3)
try:
	a = a + 1
except Exception as e:
	print(e)
"
it	"li = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
evenNumbers = map(lambda x: x**2, filter(lambda x: x % 2 == 0, li))
print(evenNumbers)
"
write a program to move numbers to the end of a string	"

str1 = 'hi 123 how are you doing? 567 is with you. Take care of 89'

res = ''
dig = ''


for ele in str1:
	if ele.isdigit():
        dig += ele
	else:
        res += ele

res += dig


print(""Strings after digits at end : "" + str(res))
"
write Python code to demonstrate to remove the tuples if certain criteria met	"ini_tuple = [('b', 100), ('c', 200), ('c', 45),
             ('d', 876), ('e', 75)]
print(""intial_list"", str(ini_tuple))


result = []
for i in ini_tuple:
	if i[1] <= 100:
        result.append(i)
print(""Resultant tuple list: "", str(result))
"
Find the middle element of a random number list	"my_list = [4, 3, 2, 9, 10, 44, 1]
print(""mid value is "", my_list[int(len(my_list) / 2)])
"
Write a function that returns sum of all elements in the list	"def sum_elements(l: list):
	return sum(l)
"
write a Python function to Remove the Given Key from a Dictionary	"def deletekey(dict, key):
	if key in dict:
        del dict[key]
	return dict
"
Write a Python program to print the list of all keywords	"import keyword
print(""Python keywords are..."")
print(keyword.kwlist)
"
(printable ascii characters)	"from functools import reduce


input_str = 'tsai'
res = reduce(lambda x, y: x if ord(x) > ord(y) else y, input_str)
print(f""{res}"")
"
write a python program to print all the prime numbers within an interval	"

lower = 900
upper = 1000


print(""Prime numbers between"", lower, ""and"", upper, ""are:"")


for num in range(lower, upper + 1):
	
	if num > 1:
        for i in range(2, num):
            if (num % i) == 0:
                break
        else:
            print(num)
"
value of a number	"def dtanh(x):
	

	return 1 - (math.tanh(x)**2)
"
write  Function to left rotate n by d bits	"def leftRotate(n, d):
	INT_BITS = 32
	return (n << d) | (n >> (INT_BITS - d))


n = 16
d = 2


print(""Left Rotation of"", n, ""by"", d, ""is"", end="" "")
print(leftRotate(n, d))
"
Write a python function that Print all the Numbers Present in the Text File	"

def print_number(fname):
	with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            for i in words:
                for letter in i:
                    if(letter.isdigit()):
                        print(letter)
"
write a program to find log of a number	"import math


num = 5
base = 7


print(""Log_x_b"", math.log(num, base))
"
Write a function to return the curved surface area of a cone	"def cal_cone_curved_surf_area(slant_height, radius):
	pi = 3.14
	return pi * radius * slant_height
"
common keys	"dict1 = {'a': 12, 'for': 25, 'c': 9}
dict2 = {'Geeks': 100, 'geek': 200, 'for': 300}
for key in dict2:
	if key in dict1:
        dict2[key] = dict2[key] + dict1[key]
	else:
        pass
"
another given string.	"def is_anagram(str1, str2):
	list_str1 = list(str1)
	list_str1.sort()
	list_str2 = list(str2)
	list_str2.sort()

	return (list_str1 == list_str2)
"
write a python function to convert iterable to pairwise iterable	"def pairwise(iterable):
	from itertools import tee
	a, b = tee(iterable)
	next(b, None)
	return zip(a, b)
"
write a python function to return the number of lines in a file	"def count_lines(filename):
	with open(filename, 'r') as f:
        contents = f.read().split('\n')
        return len(contents)
"
Write a function to find time for a given angle.	"def calcAngle(hh, mm):
	hour_angle = 0.5 * (hh * 60 + mm)
	minute_angle = 6 * mm
	angle = abs(hour_angle - minute_angle)
	angle = min(360 - angle, angle)
	return angle
"
Write a program that will determine the memory usage by python process	"import os
import psutil
print(psutil.Process(os.getpid()).memory_info().rss / 1024 ** 2)
"
write a python function to calculate weighted average of two or more numbers	"

def weighted_average(nums, weights):
	return sum(x * y for x, y in zip(nums, weights)) / sum(weights)
"
Compute the product of every pair of numbers from two lists	"list1 = [1, 2, 3]
list2 = [5, 6, 7]
final = [a * b for a in list1 for b in list2]
print(f""Product of every pair of numbers from two lists:{final}"")
"
using eval() to get the required result	"res = eval(temp)
"
write a python program to remove empty list from list and print it	"list1 = [2, 5, 6, [], 8, [], [], 0]
list2 = []
for i in list1:
	if not isinstance(i, list):
        list2.append(i)
print(list2)
"
Write a python function to find uncommon words between two sentences given	"

def UncommonWords(A, B):
	count = {}
	for word in A.split():
        count[word] = count.get(word, 0) + 1
	for word in B.split():
        count[word] = count.get(word, 0) + 1

	return [word for word in count if count[word] == 1]
"
Write a Python program to print trace of an array/ matrix	"import numpy as np
A = np.array([[4, 5, 8], [5, 5, 5], [2, 3, 6]])
print(""Trace of the matrix A: "", np.trace(A))
"
write a python function to print whether the given year is a leap year or not	"def leapYear(year):
	if (year % 4) == 0:
        if (year % 100) == 0:
            if (year % 400) == 0:
                print(""{0} is a leap year"".format(year))
            else:
                print(""{0} is not a leap year"".format(year))
        else:
            print(""{0} is a leap year"".format(year))
	else:
        print(""{0} is not a leap year"".format(year))
"
characters that have even indexes.	"s = input()
s = s[::2]
print(s)
"
list of dictionaries Using generator expression	"

test_list = [{'gfg': 1, 'best': 2}, {'gfg': 4, 'best': 5}]


print(""The original list : "" + str(test_list))


res = [tuple(sub[""gfg""] for sub in test_list),
       tuple(sub[""best""] for sub in test_list)]


print(""Segregated values of keys are : "" + str(res))
"
Given String	"def check(string, sub_str):
	if (string.find(sub_str) == -1):
        print(""NO"")
	else:
        print(""YES"")


string = ""geeks for geeks""
sub_str = ""geek""
check(string, sub_str)
"
or not.	"my_list = [{}, {}, {}]
my_list1 = [{1, 2}, {}, {}]
print(all(not d for d in my_list))
print(all(not d for d in my_list1))
"
next() + list comprehension	"

test_list = ["""", """", ""Akshat"", ""Nikhil""]


print(""The original list : "" + str(test_list))
K = 2
test_list.reverse()
test_list = iter(test_list)
for idx in range(0, K):
	res = next(sub for sub in test_list if sub)


print(""The Kth non empty string from rear is : "" + str(res))
"
a single line.	"l = []
for i in range(2000, 3201):
	if (i % 7 == 0) and (i % 5 != 0):
        l.append(str(i))
print(','.join(l))
"
prints a new list	"list1 = [1, 2, 3, 4, 5]
list2 = [5, 4, 3, 2, 1]
diff_list = [a - b for (a, b) in zip(list1, list2)]
print(diff_list)
"
This function subtracts two numbers	"def subtract(x, y):
	return x - y
"
67 Write a Python function to the push the first number to the end of a list.	"def move_last(num_list):
	a = [num_list[0] for i in range(num_list.count(num_list[0]))]
	x = [i for i in num_list if i != num_list[0]]
	x.extend(a)
	return(x)
"
57 write a python function to implement the tanh activation function	"

import math


def tanh(x):
	return (math.exp(2 * x) - 1) / (math.exp(2 * x) + 1)
"
write a python function to remove vowels from a string	"def vowel_remover(text):
	string = """"
	for l in text:
        if l.lower() != ""a"" and l.lower() != ""e"" and l.lower(
        ) != ""i"" and l.lower() != ""o"" and l.lower() != ""u"":
            string += l
	return string
"
add 1 to obtain 3n + 1. Repeat the process until you reach 1.	"def collatz_sequence(x):
	num_seq = [x]
	if x < 1:
        return []
	while x > 1:
        if x % 2 == 0:
            x = x / 2
        else:
            x = 3 * x + 1
        num_seq.append(x)
	return num_seq
"
Write a Python function to to find the sum of all digits of a given integer	"def sum_of_digits(num):
	if num == 0:
        return 0
	else:
        return num % 10 + sum_of_digits(int(num / 10))
"
Write a Python function to print whether the given Date is valid or not	"def date_validator(d, m, y):
	import datetime
	try:
        s = datetime.date(y, m, d)
        print(""Date is valid."")
	except ValueError:
        print(""Date is invalid."")
"
write a python function to sort the dictionary by values	"

def sort_dict_by_value(d, reverse=False):
	return dict(sorted(d.items(), key=lambda x: x[1], reverse=reverse))
"
Set the values in the new list to upper case	"list = ""AMITKAYAL""
newlist = [x.upper() for x in list]
print(f""New list to upper case:{newlist}"")
"
64 write a program to print all disarium numbers between 1 and 100	"

def calculateLength(n):
	length = 0
	while(n != 0):
        length = length + 1
        n = n // 10
	return length


def sumOfDigits(num):
	rem = sum = 0
	len = calculateLength(num)

	while(num > 0):
        rem = num % 10
        sum = sum + (rem**len)
        num = num // 10
        len = len - 1
	return sum


result = 0

print(""Disarium numbers between 1 and 100 are"")
for i in range(1, 101):
	result = sumOfDigits(i)

	if(result == i):
        print(i),
"
Generate weighted random numbers	"import random
randomList = random.choices(
	range(
        10, 40, 5), cum_weights=(
        5, 15, 10, 25, 40, 65), k=6)
print(randomList)
"
write a python function to get 10 best Artists playing on Apple iTunes	"def get_artists():
	import requests
	url = 'https://itunes.apple.com/us/rss/topsongs/limit=10/json'
	response = requests.get(url)
	data = response.json()
	for artist_dict in data['feed']['entry']:
        artist_name = artist_dict['im:artist']['label']
        print(artist_name)
"
Write a python function to implement tower of hanoi	"

def hanoi(disks, source, auxiliary, target):
	if disks == 1:
        print('Move disk 1 from peg {} to peg {}.'.format(source, target))
        return

	hanoi(disks - 1, source, target, auxiliary)
	print('Move disk {} from peg {} to peg {}.'.format(disks, source, target))
	hanoi(disks - 1, auxiliary, source, target)
"
element if found	"

def linear_search(alist, key):
	
	for i in range(len(alist)):
        if alist[i] == key:
            return i
	return -1


alist = [2, 3, 5, 6, 4, 5]


key = 6

index = linear_search(alist, key)
if index < 0:
	print(f'{key} was not found.')
else:
	print(f'{key} was found at index {index}.')
"
given integers	"a, b = 312, 410
print(len(str(a * b)))
"
Write a Python function to clear a set.	"def clear_set(set_input):
	setp_copy = set_input.copy()
	setp_copy.clear()
	return setp_copy
"
write a Python function to convert Fraction to Mixed Number	"

def reduce_frac(n, d):
	for i in range(min(n, d), 0, -1):
        if not n % i and not d % i:
            return '{}/{}'.format(n // i, d // i)


def mixed_number(frac):
	n, d = map(int, frac.lstrip('-').split('/'))
	sign = '-' if frac.startswith('-') else ''

	if not n % d:
        return sign + str(n // d)
	n, r = divmod(n, d)
	return sign + '{} {}'.format(n, reduce_frac(r, d)).lstrip('0 ')


print(mixed_number(""5/4""))
"
Write a function to return the volume of a cone	"def cal_cone_volume(height, radius):
	pi = 3.14
	return pi * (radius**2) * height / 3
"
Write a program to print a given string, replacing all the vowels with '_'	"st = ""Where is this going? Could you please help me understand!""
vowels = ""AEIOUaeiou""


for v in vowels:
	st = st.replace(v, '_')


print(st)
"
dictionaries.	"list_of_dicts = [{""key1"": ""val1"", ""Country"": ""India""},
                 {""Country"": ""USA"", ""foo"": ""bar""},
                 {""foo"": ""bar"", ""foo2"": ""bar2""}]
unique_keys = []
for d in list_of_dicts:
	for key in d:
        if key not in unique_keys:
            unique_keys.append(key)
print(f""Number of unique keys: {len(unique_keys)}"")
"
Write a Python Program to Print all Pythagorean Triplets in the Range	"

limit = 10
c = 0
m = 2
while(c < limit):
	for n in range(1, m + 1):
        a = m * m - n * n
        b = 2 * m * n
        c = m * m + n * n
        if(c > limit):
            break
        if(a == 0 or b == 0 or c == 0):
            break
        print(a, b, c)
	m = m + 1
"
write a python program to replace blank space to 1	"my_string = 'balaji'
k = [print(i) for i in my_string if i not in ""aeiou""]
print('Not a vowel', k)
"
67 write a program to multiply two matrices using nested loops	"

X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]


Y = [[5, 8, 1, 2],
     [6, 7, 3, 0],
     [4, 5, 9, 1]]


result = [[0, 0, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]]


for i in range(len(X)):

	for j in range(len(Y[0])):

        for k in range(len(Y)):
            result[i][j] += X[i][k] * Y[k][j]


for r in result:
	print(r)
"
write a function to merge two sorted lists	"def merge_lists(lst1, lst2):
	
	res = []
	
	if len(lst1) == 0 or len(lst2) == 0:
        res.extend(lst1 + lst2)
        return res

	last_processed_i_idx = 0
	last_processed_j_idx = 0
	for i_idx, i in enumerate(lst1):
        for j_idx, j in enumerate(lst2, start=last_processed_j_idx + 1):
            if i < j:
                res.append(i)
                last_processed_i_idx = i_idx
                break
            elif i > j:
                res.append(j)
                last_processed_j_idx = j_idx
                continue
            else:
                res.append(i)
                last_processed_i_idx = i_idx
                res.append(j)
                last_processed_j_idx = j_idx
                break

	if len(lst1) == last_processed_i_idx:
        res.extend(lst2[last_processed_j_idx + 1:])

	if len(lst2) == last_processed_j_idx:
        res.extend(lst1[last_processed_i_idx + 1:])
	return res
"
Print the final dictionary	"
test_list = [2323, 82, 129388, 234, 95]

print(""The original list is : "" + str(test_list))

res = dict()
for ele in test_list:

	mid_idx = len(str(ele)) // 2
	key = int(str(ele)[:mid_idx])
	val = int(str(ele)[mid_idx:])

	res[key] = val

print(""Constructed Dictionary : "" + str(res))
"
in reverse order.	"s = input()
s = s[::-1]
print(s)
"
print the result	"letters = list(map(lambda x: x, 'human'))
print(letters)
"
write a python function to check if all elements in a list are equal.	"

def all_equal(lst):
	return len(set(lst)) == 1
"
write a program to print least frequent character in a string	"

str1 = ""watch the match""
all_freq = {}
for i in str1:
	if i in all_freq:
        all_freq[i] += 1
	else:
        all_freq[i] = 1
res = min(all_freq, key=all_freq.get)
print(""Minimum of all characters is: "" + str(res))
"
whether all the numbers are different from each other	"def test_distinct(data):
	if len(data) == len(set(data)):
        return True
	else:
        return False
"
Convert generator to a list	"gen = (i for i in range(5))
a_list = list(gen)
"
write a python program to print the factorial of a number	"num = 5
fact = 1
while num > 0:
	fact *= num
	num -= 1
print(fact)
"
write a python program that asks for user input and prints the given input	"a = input(""User Input"")
print(a)
"
Write a Python program to convert two equal length sets to dictionary	"keys = {'Ten', 'Twenty', 'Thirty'}
values = {10, 20, 30}
sampleDict = dict(zip(keys, values))
print(sampleDict)
"
python code to merge dictionaries	"def merge1():
	test_list1 = [{""a"": 1, ""b"": 4}, {""c"": 10, ""d"": 15},
                  {""f"": ""gfg""}]
	test_list2 = [{""e"": 6}, {""f"": 3, ""fg"": 10, ""h"": 1},
                  {""i"": 10}]
	print(""The original list 1 is : "" + str(test_list1))
	print(""The original list 2 is : "" + str(test_list2))
	for idx in range(0, len(test_list1)):
        id_keys = list(test_list1[idx].keys())
        for key in test_list2[idx]:

            if key not in id_keys:
                test_list1[idx][key] = test_list2[idx][key]

	print(""The Merged Dictionary list : "" + str(test_list1))
"
from 1 to 10 and values are cubes of the key	"cube_dict = {}
for i in range(1, 11):
	cube_dict[i] = i ** 3
"
[5,6,77,45,22,12,24].	"li = [5, 6, 77, 45, 22, 12, 24]
li = [x for x in li if x % 2 != 0]
print(li)
"
Dictionary and lambda	"a, b = 10, 20
print((b, a)[a < b])
print({True: a, False: b}[a < b])
print((lambda: b, lambda: a)[a < b]())
"
Write a Python function to print number with commas as thousands separators	"def formattedNumber(n):
	return (""{:,}"".format(n))
"
25. Python Program to Convert Decimal to Binary	"dec = 344
print(""The decimal value of"", dec, ""is:"")
print(bin(dec), ""in binary."")
"
Write a python function to  add only even numbers in a list	"

from functools import reduce


input_list = [x for x in range(100)]


def sum_even(it):
	return reduce(lambda x, y: x + y if (y % 2) == 0 else x, it, 0)


res = sum_even(input_list)


print('Sum of even numbers in the list is ', res)
"
write a program to find index of a word in given string	"txt = ""Hello, welcome to my world.""
x = txt.index(""welcome"")
print(x)
"
28. Python Program to Swap Two Numbers	"
a = float(input("" Please Enter the First Value a: ""))
b = float(input("" Please Enter the Second Value b: ""))


print(""Before Swapping two Number: a = {0} and b = {1}"".format(a, b))


temp = a
a = b
b = temp


print(""After Swapping two Number: a = {0} and b = {1}"".format(a, b))
"
occurrence of an input from the list	"list1 = [5, 20, 15, 20, 25, 50, 20]


def removeValue(sampleList, val):
	return [value for value in sampleList if value != val]


resList = removeValue(list1, 20)
print(resList)
"
write a function to calculate the frequency of a number in a list	"

def frequency(list, num):
	count = 0
	for item in list:
        if item == num:
            count = count + 1
	return count
"
write a python function to insert an element into sorted python list	"

def insert(list, n):

	for i in range(len(list)):
        if list[i] > n:
            index = i
            break

	list = list[:i] + [n] + list[i:]
	return list
"
the keys	"def sort_list_with_key():
	animals = [
        {'type': 'lion', 'name': 'Mr. T', 'age': 7},
        {'type': 'tiger', 'name': 'scarface', 'age': 3},
        {'type': 'puma', 'name': 'Joe', 'age': 4}]
	print(sorted(animals, key=lambda animal: -animal['age']))
"
16 write a python program to extract priority elements in tuple list	"
test_list = [(5, 1), (3, 4), (9, 7), (10, 6)]

prior_list = [6, 4, 7, 1]

res = []
for sub in test_list:
	for val in prior_list:
        if val in sub:
            res.append(val)
print(res)
"
characters which are present at an even index number	"def printEveIndexChar(str):
	for i in range(0, len(str) - 1, 2):
        print(""index["", i, ""]"", str[i])
"
keys.	"def print_dict_keys_val_1():
	d = dict()
	d[1] = 1
	d[2] = 2**2
	d[3] = 3**2
	print(d)
"
are square of numbers between 1 and 20 (both included).	"def printTuple():
	li = list()
	for i in range(1, 21):
        li.append(i**2)
	print(tuple(li))
"
Counting total alphanumeric in a string	"str1 = ""abc4234AFde""
digitCount = 0
for i in range(0, len(str1)):
	char = str1[i]
	if(char.isalpha()):
        digitCount += 1
print('Number of alphanumeric: ', digitCount)
"
Parenthesized using Stack	"

class Stack:
	def __init__(self):
        self.items = []

	def is_empty(self):
        return self.items == []

	def push(self, data):
        self.items.append(data)

	def pop(self):
        return self.items.pop()


s = Stack()
exp = ""(x+y""

for c in exp:
	if c == '(':
        s.push(1)
	elif c == ')':
        if s.is_empty():
            is_balanced = False
            break
        s.pop()
else:
	if s.is_empty():
        is_balanced = True
	else:
        is_balanced = False

if is_balanced:
	print('Expression is correctly parenthesized.')
else:
	print('Expression is not correctly parenthesized.')
"
modified in last x hours given by the user	"import glob
import os
import random
import datetime


def retrieve_last_files(src_dir_path, last_modified_hour):
	if(os.path.exists(src_dir_path) == False):
        print(""Destination Path doesn't exist"")
        return
	if(last_modified_hour < 0 or last_modified_hour > 24):
        print(""Invalid delta requested"")
        raise ValueError

	files_in_dir = glob.glob(src_dir_path + ""/*.*"")
	if (len(files_in_dir) <= 0):
        print(""No files present in:"", src_dir_path)
        return
	return [
        filename for filename in files_in_dir if (
            datetime.datetime.fromtimestamp(
                os.path.getmtime(filename)) < datetime.datetime.now() +
            datetime.timedelta(
                hours=last_modified_hour))]
"
write a python function to return the sum of first n numbers	"def sum_of_nums(n):
	if n <= 1:
        return n
	else:
        return n + sum_of_nums(n - 1)
"
multiples of 3 from a series	"import pandas as pd
import numpy as np
ser = pd.Series(np.random.randint(1, 10, 7))
print(np.argwhere(ser.values % 3 == 0))
"
write a Python function to find volume of the Pentagonal Prism	"

def volume(b, h):
	return (5 * b * h) / 2


a = 5
b = 3
h = 7


print(""volume ="", volume(b, h))
"
value using not + all()	"test_tup = (10, 4, 5, 6, None)
print(""The original tuple : "" + str(test_tup))
res = not all(test_tup)
print(""Does tuple contain any None value ? : "" + str(res))
"
and returns True if the two are equal, and False otherwise	"

def check_assert(item1, item2):
	try:
        assert item1 == item2
        return True
	except AssertionError:
        return False
"
89 write a python program to flatten Tuples List to String and print it	"

test_list = [('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]
print(""The original list : "" + str(test_list))
s = ''
for i in test_list:
	for j in i:
        s += ' ' + j + ' '
print(f' string after flattening is {s}')
"
Write a program to check whether a file/path/direcory exists or not	"file_path = ""path/here""
import os.path
os.path.exists(file_path)
"
write a python program to print the words in a sentence in reverse order	"sentence = 'the quick brown fox'
words = sentence.split(' ')
words.reverse()
print(' '.join(words))
"
after the first list	"lst1 = eval(input(""Enter list : ""))
lst2 = eval(input(""Enter list : ""))
print(lst1 + lst2)
"
of digits of the number = the number)	"

from itertools import chain


def check_armstrong(n):
	sum_of_digits = sum(map(lambda x: int(x) ** 3, chain(str(n))))
	if sum_of_digits == n:
        return True
	else:
        return False
"
34. write a Python function to Find LCM and returb the value	"def compute_lcm(x, y):
	if x > y:
        greater = x
	else:
        greater = y

	while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1

	return lcm
"
Write a Python program to find the first repeated word in a given string.	"def first_repeated_word(str1):
	temp = set()
	for word in str1.split():
        if word in temp:
            return word
        else:
            temp.add(word)
	return 'None'
"
Write a Python function to Count Set Bits in a Number	"

def count_set_bits(n):
	count = 0
	while n:
        n &= n - 1
        count += 1
	return count
"
Write a function to return the area of an ellipse	"def cal_area_ellipse(minor, major):
	pi = 3.14
	return pi * (minor * major)
"
return the modified text	"def caesar_cipher(text, shift=1):
	alphabet = string.ascii_lowercase
	shifted_alphabet = alphabet[shift:] + alphabet[:shift]
	table = str.maketrans(alphabet, shifted_alphabet)
	return text.translate(table)
"
write a python function to read first n lines from a file	"

def file_read_from_head(fname, nlines):
	from itertools import islice
	with open(fname) as f:
        for line in islice(f, nlines):
            print(line)
"
77 Write a Python function to calculate the geometric sum of n-1.	"def geometric_sum(n):
	if n < 0:
        return 0
	else:
        return 1 / (pow(2, n)) + geometric_sum(n - 1)
"
write a python function to get the type of a variable	"def get_type(var):
	return(type(var))
"
write a python program to demonstarate working of map	"
def addition(n):
	return n + n


numbers = (1, 2, 3, 4)
result = map(addition, numbers)
print(list(result))
"
set of addition problems	"def carry_number(x, y):
	ctr = 0
	if(x == 0 and y == 0):
        return 0
	z = 0
	for i in reversed(range(10)):
        z = x % 10 + y % 10 + z
        if z > 9:
            z = 1
        else:
            z = 0
        ctr += z
        x //= 10
        y //= 10
	if ctr == 0:
        return ""No carry operation.""
	elif ctr == 1:
        return ctr
	else:
        return ctr
"
write a Python program to Sum all the items in a dictionary	"

my_dict = {'data1': 100, 'data2': -54, 'data3': 247}
print(f'Sum all the items in a dictionary:{sum(my_dict.values())}')
"
write a program to find and print the remainder of two number	"

num1 = 12
num2 = 10


ratio = num1 % num2
print(f'remainder:{ratio}')
"
with same arguments	"def product(a, b):
	return a * b


def subtract(a, b):
	return a - b


b = True
print((product if b else subtract)(1, 1))
"
write a program to print difference in between today and given date	"

import datetime
dd = int(input(""date: ""))
mm = int(input(""month: ""))
yy = int(input(""year: ""))
a = datetime.date(yy, mm, dd)
x = date.today()
print(x - a)
"
string and print it	"

l = ['hello', 'guys', 'have',
     'a', 'nice', 'day']
l = ' '.join(l)
print(l)
"
edges, circumradius	"import math


def apothem_of_polygon(number_of_edges, circumradius):
	return circumradius * math.cos(180 / number_of_edges)
"
itertools.combinations_with_replacement(iterable, r)	"def random_combination_with_replacement(iterable, r):
	import random
	pool = tuple(iterable)
	n = len(pool)
	indices = sorted(random.choices(range(n), k=r))
	return tuple(pool[i] for i in indices)
"
keys. The function should just print the keys only.	"def print_dict_keys_val_4():
	d = dict()
	for i in range(1, 21):
        d[i] = i**2
	for k in d.keys():
        print(k)
"
write Python program to find key with Maximum value in Dictionary	"

Tv = {'BreakingBad': 100, 'GameOfThrones': 1292, 'TMKUC': 88}


Keymax = max(Tv, key=Tv.get)
print(Keymax)
"
keys.	"def print_dict_keys_val_2():
	d = dict()
	for i in range(1, 21):
        d[i] = i**2
	print(d)
"
printing initial string	"print(""initial string : "", ini_string)

result = re.sub('[\\W_]+', '', ini_string)
"
Write Python Program to Find the Area of a Rectangle Using Classes	"class rectangle():
	def __init__(self, breadth, length):
        self.breadth = breadth
        self.length = length

	def area(self):
        return self.breadth * self.length


a = 15
b = 10
obj = rectangle(a, b)
print(""Area of rectangle:"", obj.area())
"
Adding Element to a List	"animals = ['cat', 'dog', 'rabbit']
animals.append('guinea pig')
print('Updated animals list: ', animals)
"
write a python program to print the last 3 items in a list	"my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(my_list[-3:])
"
Write a python program to extract and print words that starts with vowel	"

test_list = [""all"", ""love"", ""and"", ""get"", ""educated"", ""by"", ""gfg""]

res = []
vow = ""aeiou""
for sub in test_list:
	flag = False
	for ele in vow:
        if sub.startswith(ele):
            flag = True
            break
	if flag:
        res.append(sub)
print(""The extracted words : "" + str(res))
"
write a python function that takes in two numbers and returns their LCM	"def lcm(num1, num2):
	bigger = num1 if num1 > num2 else num2
	while True:
        if (bigger % num1 == 0) and (bigger % num2 == 0):
            break
        bigger += 1
	return bigger
"
Write a Python program to get the difference between the two lists	"list1 = [1, 2, 3, 4]
list2 = [1, 2]
print(list(set(list1) - set(list2)))
"
characters and print the output.	"from itertools import groupby


def modified_encode(alist):
	def ctr_ele(el):
        if len(el) > 1:
            return [len(el), el[0]]
        else:
            return el[0]
	return [ctr_ele(list(group)) for key, group in groupby(alist)]


n_list = [1, 1, 2, 3, 4, 4, 5, 1]
print(""Original list:"")
print(n_list)
print(""\nList reflecting the modified run-length encoding from the said list:"")
print(modified_encode(n_list))
"
printing result	"print(""The minimum occurring element is : "" + str(tar_ele))
"
Write a Python program to print the even numbers from a given list	"def is_even_num(l):
	enum = []
	for n in l:
        if n % 2 == 0:
            enum.append(n)
	return enum
	print(is_even_num([1, 2, 3, 4, 5, 6, 7, 8, 9]))
"
directory only at topmost level	"import os


def get_filesize_for_dir(src_dir_path):
	if(os.path.exists(src_dir_path) == False):
        print(""Destination Path doesn't exist"")
        return
	files_in_dir = glob.glob(src_dir_path + ""/*.*"")
	if (len(files_in_dir) <= 0):
        print(""No files present in:"", src_dir_path)
        return
	total_size = 0
	for filename in files_in_dir:
        
        total_size += os.stat(filename)[6]
	return total_size
"
cost as list	"

class Food(object):
	def __init__(self, name, price):
        self.name = name
        self.price = price

	def getprice(self):
        return self.price

	def __str__(self):
        return self.name + ' : ' + str(self.getprice())


def buildmenu(names, costs):
	menu = []
	for i in range(len(names)):
        menu.append(Food(names[i], costs[i]))
	return menu


names = ['Coffee', 'Tea', 'Pizza', 'Burger', 'Fries', 'Apple', 'Donut', 'Cake']


costs = [250, 150, 180, 70, 65, 55, 120, 350]


Foods = buildmenu(names, costs)


n = 1
for el in Foods:
	print(n, '. ', el)
	n = n + 1
"
second one into the first	"a = {""a"": 1, ""b"": 3}
b = {""c"": 1, ""d"": 3}
a.update(b)
"
Write a function to return the area of a rhombus	"def area(d1, a):
	d2 = (4 * (a**2) - d1**2)**0.5
	area = 0.5 * d1 * d2
	return(area)
"
the digits of the given integer	"def reverse(n):
	s = str(n)
	p = s[::-1]
	return p
"
characters which are present at an even index number	"def printEveIndexChar(str):
	for i in range(0, len(str) - 1, 2):
        print(""index["", i, ""]"", str[i])
"
accept user input	"str = input(""Enter your input: "")
print(""Received input is : "", str)
"
16 how to add list numbers in python	"numbers = [1, 2, 3, 4, 5, 1, 4, 5]
Sum = sum(numbers)
"
and returns its inversion	"def invert_dict(input_dict):
	my_inverted_dict = {value: key for key, value in input_dict.items()}
	return my_inverted_dict
"
after removing the value 24 in [12,24,35,24,88,120,155].	"li = [12, 24, 35, 24, 88, 120, 155]
li = [x for x in li if x != 24]
print(li)
"
first half values in one line and the last half values in one line.	"tp = (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
tp1 = tp[:5]
tp2 = tp[5:]
print(tp1)
print(tp2)
"
with this logger.	"import logging


def create_logging_level(user_func, user_filename, user_loglevel):
	logger = logging.getLogger('simple_example')
	logger.setLevel(user_loglevel)
	ch = logging.FileHandler(user_filename)
	ch.setLevel(user_loglevel)
	logger.addHandler(ch)

	if callable(user_func):
        user_func(logger)
"
Write a Python Program to Check if a Number is an Armstrong Number	"

def amstrong_check(n):
	a = list(map(int, str(n)))
	b = list(map(lambda x: x**3, a))
	if(sum(b) == n):
        return True
	else:
        return False
"
Write a python program to print odd numbers in a List	"
list1 = [10, 21, 4, 45, 66, 93, 11]

odd_nos = list(filter(lambda x: (x % 2 != 0), list1))

print(""Odd numbers in the list: "", odd_nos)
"
check if all char are alphanumeric	"word = ""Hello World""
check = word.isalnum()
print(f""All char are alphanumeric?:{check}"")
"
function takes to execute	"def timed(fn):
	from time import perf_counter
	from functools import wraps

	@ wraps(fn)
	def inner(*args, **kwargs):
        start = perf_counter()
        result = fn(*args, **kwargs)
        end = perf_counter()
        elapsed = end - start

        args_ = [str(a) for a in args]
        kwargs_ = ['{0}={1}'.format(k, v) for k, v in kwargs.items()]
        all_args = args_ + kwargs_
        args_str = ','.join(all_args)  

        print(f'{fn.__name__}({args_str}) took {elapsed} seconds')

        return result
	
	return inner
"
regular expression	"

def Find(string):
	regex = r""(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\"".,<>?«»“”‘’]))""
	url = re.findall(regex, string)
	return [x[0] for x in url]
"
62 write a program to sort the elements of the array	"

arr = [5, 2, 8, 7, 1]
temp = 0
print(""Elements of original array: "")
for i in range(0, len(arr)):
	print(arr[i], end="" "")

for i in range(0, len(arr)):
	for j in range(i + 1, len(arr)):
        if(arr[i] > arr[j]):
            temp = arr[i]
            arr[i] = arr[j]
            arr[j] = temp

print()

print(""Elements of array sorted in ascending order: "")
for i in range(0, len(arr)):
	print(arr[i], end="" "")
"
first two terms	"n1, n2 = 0, 1
count = 0
fab_list = []
"
9 write a python program to omit K length rows and print the list	"list1 = [[4, 7],
         [8, 10, 12, 8],
         [10, 11],
         [6, 8, 10]]
"
Write a function to return the total surface area of a cube of side a	"def cal_surface_area_cube(a):
	return 6 * (a**2)
"
values of dictionary comprising of strings only.	"def mean_key_val_diff(input_dict):
	sum_diff = 0
	for key, val in input_dict.items():
        sum_diff += abs(len(val) - len(key))
	return sum_diff / len(input_dict)
"
"nested tuples using + operator + "", "" operator during initialization"	"
test_tup1 = (3, 4),
test_tup2 = (5, 6),

print(""The original tuple 1 : "" + str(test_tup1))
print(""The original tuple 2 : "" + str(test_tup2))
res = test_tup1 + test_tup2
print(""Tuples after Concatenating : "" + str(res))
"
into a list of values corresponding to the user specified key	"

def pluck(lst, key):
	return [x.get(key) for x in lst]
"
write a python program to swap two numbers	"num1 = 130
num2 = 34
num1, num2 = num2, num1
"
Write a Python program to check/test multiple variables against a value	"a = 10
b = 20
c = 30
if 10 in {a, b, c}:
	print(""True"")
else:
	print(""False"")
"
Convert decimal number to octal	"print('%o,' % (8))
"
17 split list into lists of equal length python	"[lst[i:i + n] for i in range(0, len(lst), n)]
"
and b is odd	"

n = 10
a = []
b = []
_ = [a.append(i) if i % 2 == 0 else b.append(i) for i in range(n)]


def add(a, b):
	return [a + b for a, b in (zip(a, b))]


add(a, b)
"
Replacing a string with another string	"word = ""Hello World""
replace = ""Bye""
input = ""Hello""
after_replace = word.replace(input, replace)
print(f""String ater replacement: {after_replace}"")
"
string return 'Not found' and print the output.	"def find_Index(str1, pos):
	if len(pos) > len(str1):
        return 'Not found'

	for i in range(len(str1)):

        for j in range(len(pos)):

            if str1[i + j] == pos[j] and j == len(pos) - 1:
                return i

            elif str1[i + j] != pos[j]:
                break

	return 'Not found'
"
printNationality.	"class American(object):
	@ staticmethod
	def printNationality():
        print(""America"")


anAmerican = American()
anAmerican.printNationality()
American.printNationality()
"
numbers to negative numbers and returns the new list	"def make_all_negative(nums):
	return [num if num < 0 else -num for num in nums]
"
write a python program to convert a set to a list	"myset = {1, 2, 4, 7}
mylist = list(myset)
"
Write a Python program to find the second largest number in a list.	"def second_largest(numbers):
	count = 0
	n1 = n2 = float('-inf')
	for x in numbers:
        count += 1
        if x > n2:
            if x >= n1:
                n1, n2 = x, n1
        else:
            n2 = x


return n2 if count >= 2 else None


print(second_largest([1, 2, -8, -2, 0]))
"
99 Write a Python class to convert a roman numeral to an integer.	"class Solution:
	def roman_to_int(self, s):
        rom_val = {'I': 1, 'V': 5, 'X': 10,
                   'L': 50, 'C': 100, 'D': 500, 'M': 1000}
        int_val = 0
        for i in range(len(s)):
            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:
                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]
            else:
                int_val += rom_val[s[i]]
        return int_val
"
write Python Program to Read the Contents of a File in Reverse Order	"filename = input(""Enter file name: "")
for line in reversed(list(open(filename))):
	print(line.rstrip())
"
M and radius R	"def cal_mi_sphere(mass: float, radius: float) -> float:
	return (7 / 5) * mass * (radius**2)
"
11. Python Program to Check if a Number is Odd or Even	"num = int(input(""Enter a number: ""))
if (num % 2) == 0:
	print(""{0} is Even"".format(num))
else:
	print(""{0} is Odd"".format(num))
"
Convert dictionary to JSON	"import json
person_dict = {'name': 'Bob',
               'age': 12,
               'children': None
               }
person_json = json.dumps(person_dict)
print(person_json)
"
48 write a python Program to multiply two matrices and print the result	"X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]
Y = [[5, 8, 1, 2],
     [6, 7, 3, 0],
     [4, 5, 9, 1]]
result = [[0, 0, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]]


for i in range(len(X)):
	for j in range(len(Y[0])):
        for k in range(len(Y)):
            result[i][j] += X[i][k] * Y[k][j]


for r in result:
	print(r)
"
input by console.	"def NumGenerator(n):
	for i in range(n + 1):
        if i % 5 == 0 and i % 7 == 0:
            yield i


n = int(raw_input())
values = []
for i in NumGenerator(n):
	values.append(str(i))
print("","".join(values))
"
Write a function to remove a given date type elements from a list.	"

def removeDataType(li, dType):
	res = []
	for i in li:
        if not isinstance(i, dType):
            res.append(i)
	return res
"
Write a Python Program to Find the Intersection of Two Lists	"

def main(alist, blist):
	def intersection(a, b):
        return list(set(a) & set(b))
	return intersection(alist, blist)
"
write a python program that asks for user input and prints the given input	"a = input(""User Input"")
print(a)
"
Write a Python program to print the calendar of any given year	"import calendar
year = 2020
print(calendar.calendar(year))
"
write Python program to demonstrate working of Cummulative Records Product	"

def prod(val):
	res = 1
	for ele in val:
        res *= ele
	return res


test_list = [(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]


print(""The original list : "" + str(test_list))
res = prod(int(j) for i in test_list for j in i)


print(""The Cummulative product of list is : "" + str(res))
"
95 write a program to Remove leading zeros from an IP address	"

def removeLeadingZeros(ip):
	modified_ip = re.sub(regex, '.', ip)
	print(modified_ip)


if __name__ == '__main__':

	ip = ""216.08.094.196""
	removeLeadingZeros(ip)
"
test if string contains digits	"word = ""Hello World""
check = word.isdigit()
print(f""String contains digits?:{check}"")
"
upper case letters and lower case letters.	"s = raw_input()
d = {""UPPER CASE"": 0, ""LOWER CASE"": 0}
for c in s:
	if c.isupper():
        d[""UPPER CASE""] += 1
	elif c.islower():
        d[""LOWER CASE""] += 1
	else:
        pass
print(""UPPER CASE"", d[""UPPER CASE""])
print(""LOWER CASE"", d[""LOWER CASE""])
"
22.  Python Program to Find the Sum of Natural Numbers	"num = 16


if num < 0:
	print(""Enter a positive number"")
else:
	sum = 0
	while(num > 0):
        sum += num
        num -= 1
	print(""The sum is"", sum)
"
Write a function to return the area of a right angle triangle	"

def cal_rt_triangle_area(base: float, height: float) -> float:
	if base and height:
        return (base * height) / 2
	else:
        return None
"
generating a reliable secure random number	"import secrets
print(""Random integer number generated using secrets module is "")
number = secrets.randbelow(30)
print(number)
"
Dictionaries to List of Lists Using loop + enumerate()	"

test_list = [{'Nikhil': 17, 'Akash': 18, 'Akshat': 20},
             {'Nikhil': 21, 'Akash': 30, 'Akshat': 10},
             {'Nikhil': 31, 'Akash': 12, 'Akshat': 19}]


print(""The original list is : "" + str(test_list))


res = []
for idx, sub in enumerate(test_list, start=0):
	if idx == 0:
        res.append(list(sub.keys()))
        res.append(list(sub.values()))
	else:
        res.append(list(sub.values()))


print(""The converted list : "" + str(res))
"
Function to rotate string left and right by d length	"

def rotate(input, d):

	Lfirst = input[0: d]
	Lsecond = input[d:]
	Rfirst = input[0: len(input) - d]
	Rsecond = input[len(input) - d:]

	print(""Left Rotation : "", (Lsecond + Lfirst))
	print(""Right Rotation : "", (Rsecond + Rfirst))


input = 'GeeksforGeeks'
d = 2
rotate(input, d)
"
Write a Python function to return Pell's Sequence	"def pell_seq(n):
	if n >= 0:
        if n == 0:
            return 0
        elif n == 1:
            return 1
        else:
            return 2 * pell_seq(n - 1) + pell_seq(n - 2)
"
Write a function that returns tan value of the input	"def tan(x: float) -> float:
	import math
	return math.tan(x)
"
Write a Python program to shuffle and print a deck of card	"

import itertools
import random


deck = list(itertools.product(range(1, 14), [
            'Spade', 'Heart', 'Diamond', 'Club']))


random.shuffle(deck)


print(""You got:"")
for i in range(5):
	print(deck[i][0], ""of"", deck[i][1])
"
Function for nth Fibonacci number	"
def Fibonacci(n):
	if n < 0:
        print(""Incorrect input"")
	
	elif n == 0:
        return 0
	
	elif n == 1:
        return 1
	else:
        return Fibonacci(n - 1) + Fibonacci(n - 2)
"
write a python program to remove punctuations from a string	"

punctuations = '''!()-[]{};:'""\\,<>./?@#$%^&*_~'''
my_str = ""Hello!!!, she said ---and went.""
no_punct = """"
for char in my_str:
	if char not in punctuations:
        no_punct = no_punct + char
"
Write a function to return the area of a circle of raidus r	"def cal_area_circle(r):
	pi = 3.14
	return pi * r**2
"
Write a python function to perform quicksort sort on a list of numbers given	"

def partition(array, low, high):
	i = low - 1   
	pivot = array[high]  

	for j in range(low, high):

        if array[j] < pivot:

            i += 1
            array[i], array[j] = array[j], array[i]

	array[i + 1], array[high] = array[high], array[i + 1]
	return i + 1


def quick_sort(array, low, high):
	if low < high:
        temp = partition(array, low, high)
        quick_sort(array, low, temp - 1)
        quick_sort(array, temp + 1, high)
"
(GCD)(Euclidean algorithm) and print the result.	"

a = int(input())
b = int(input())


while a != 0 and b != 0:
	if a > b:
        a %= b
	else:
        b %= a


gcd = a + b
print(gcd)
"
Write a program to print the union of two sets	"

Set1 = {""1"", ""2"", ""3""}
Set2 = {""a"", ""b"", ""c""}
Set = Set1.union(Set2)


print(Set)
"
by the given mean and standard deviation	"def shift_and_scale(list_of_nums, mean, std):
	return [(x - mean) / std for x in list_of_nums]
"
Creating copies of mutable objects	"my_list1 = [[1, 2, 3]] * 2
print('initially ---> ', my_list1)
"
write a python python program to find the L.C.M. of two input number	"def compute_lcm(x, y):
	if x > y:
        greater = x
	else:
        greater = y

	while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1

	return lcm


num1 = 54
num2 = 24


print(""The L.C.M. is"", compute_lcm(num1, num2))
"
Write a function to return the volume of a cuboid	"def cal_cuboid_volume(length: float, breadth: float, height: float) -> float:
	return length * breadth * height
"
numbers to positive numbers and returns the new list	"def make_all_positive(nums):
	return [num if num > 0 else -num for num in nums]
"
The output should output after sorting the key alphanumerically.	"freq = {}  
line = input()
for word in line.split():
	freq[word] = freq.get(word, 0) + 1


words = freq.keys()
words.sort()


for w in words:
	print(""%s:%d"" % (w, freq[w]))
"
Write a function that generates Factorial of number	"def factorial(n):
	if n == 0 or n == 1:
        return 1
	else:
        return n * factorial(n - 1)
"
write Python3 code to demonstrate to create a substring from a string	"

ini_string = 'xbzefdgstb'


print(""initial_strings : "", ini_string)


sstring_strt = ini_string[:2]
sstring_end = ini_string[3:]


print(""print resultant substring from start"", sstring_strt)
print(""print resultant substring from end"", sstring_end)
"
Note : Number can be anything	"def add_unlimited(*args):
	return sum(args)
"
write a python program which takes input a string and print reverse string	"name = input(""Enter String"")
print(name[::-1])
"
and returns its inversion	"def invert_dict(input_dict):
	my_inverted_dict = {value: key for key, value in input_dict.items()}
	return my_inverted_dict
"
comprehension + zip()	"
test_str = 'helloworld'
print(""The original string is : "" + str(test_str))
vow = 'a e i o u'.split()
temp = dict(zip(vow, vow[1:] + [vow[0]]))
res = """".join([temp.get(ele, ele) for ele in test_str])
print(""The replaced string : "" + str(res))
"
given number of minutes for a certain FPS.	"def number_of_frames(minutes, fps):
	return (minutes * 60) * fps
"
write a python function that takes in two numbers and returns their HCF	"def hcf(num1, num2):
	smaller = num1 if num1 < num2 else num2
	for i in range(1, smaller + 1):
        if (num1 % i == 0) and (num2 % i == 0):
            hcf = i
	return hcf
"
no using closer	"

def fib():
	cache = {1: 1, 2: 1}

	def calc_fib(n):
        if n not in cache:
            print(f'Calculating fib({n})')
            cache[n] = calc_fib(n - 1) + calc_fib(n - 2)
        return cache[n]
	return calc_fib
"
digit as the value of a.	"a = raw_input()
n1 = int(""%s"" % a)
n2 = int(""%s%s"" % (a, a))
n3 = int(""%s%s%s"" % (a, a, a))
n4 = int(""%s%s%s%s"" % (a, a, a, a))
print(n1 + n2 + n3 + n4)
"
write a function to print the time it takes to run a function	"

def time_it(fn, *args, repetitons=1, **kwargs):
	start = time.perf_counter()
	if (repetitons <= 0):
        raise ValueError(""repetitions should be greater that 0"")
	if (not(isinstance(repetitons, int))):
        raise ValueError(""Repetions must be of type Integer"")
	for _ in range(repetitons):
        fn(*args, **kwargs)
	stop = time.perf_counter()
	return ((stop - start) / repetitons)
"
using dictionary comprehension	"input = [{""foo"": ""bar"", ""Hello"": ""World""},
         {""key1"": ""val1"", ""key2"": ""val2""},
         {""sample_key"": ""sample_val""}]
merged_dict = {key: value for d in input for key, value in d.items()}
"
list negative, else return False	"

def are_all_negative(arr):
	filt_arr = list(filter(lambda x: x < 0, arr))
	if len(filt_arr) == len(arr):
        return True
	else:
        return False
"
Write a function to Subtracts two lists element wise	"def sub_listelements(l1: list, l2: list):
	return [i - j for i, j in zip(l1, l2)]
"
person	"def bmi_calculator(height, weight):
	bmi = weight / (height**2)
	return bmi
"
[12,24,35,70,88,120,155].	"li = [12, 24, 35, 70, 88, 120, 155]
li = [x for x in li if x % 5 != 0 and x % 7 != 0]
print(li)
"
dictionaries and print it	"

test_dict = {""Gfg"": 20, ""is"": 36, ""best"": 100}
print(""The original dictionary is : "" + str(test_dict))
K = 4

s = list(test_dict.keys())
print(s)
q = list(test_dict.values())
t = []
for i in q:
	t.append(i // K)
print(t)
q = []
d = {}
for i in range(K):
	for i in range(0, len(s)):
        d[s[i]] = t[i]
	q.append(d)
print(q)
"
Write a python program to print the uncommon elements in List	"

test_list1 = [[1, 2], [3, 4], [5, 6]]
test_list2 = [[3, 4], [5, 7], [1, 2]]

res_list = []
for i in test_list1:
	if i not in test_list2:
        res_list.append(i)
for i in test_list2:
	if i not in test_list1:
        res_list.append(i)

print(""The uncommon of two lists is : "" + str(res_list))
"
Python program to reverse the string	"def string_reverse(str1):
	rstr1 = ''
	index = len(str1)
	while index > 0:
        rstr1 += str1[index - 1]
        index = index - 1
	return rstr1


print(string_reverse('1234abcd'))
"
write a function to find length of list	"def tuple_lenght(t):
	return len(t)
"
array.	"first_array = [1, 2, 3, 4, 5, 6, 7]
second_array = [3, 7, 2, 1, 4, 6]


def finder(first_array, second_array):
	return(sum(first_array) - sum(second_array))


missing_number = finder(first_array, second_array)


print(missing_number)
"
Count the number of spaces in a sring	"s = ""Count, the number of spaces""
lenx = s.count(' ')
print(f""number of spaces in sring: {lenx}"")
"
Write a function that returns a dictionary sorted descending by its keys	"def descending_dict_keysort(d: dict):
	return {
        key: val for key,
        val in sorted(
            d.items(),
            reverse=True,
            key=lambda ele: ele[0])}
"
new string	"def removeChars(str, n):
	return str[n:]
"
Write a program to reverse a string	"

string = 'Today is bad day'
string[::-1]
"
Write a Python function to remove leading zeros from an IP address	"import re
regex = '\\.[0]*'


def remove_leading_zeros(ip):
	modified_ip = re.sub(regex, '.', ip)
	return modified_ip
"
Write a function to return the perimeter of an equilateral triangle	"def cal_perimeter_eq_triangle(a):
	return 3 * a
"
Write a python program to check whether Entered caharacter is Vowel or not	"letter = input(""Enter a Single Character: "")
if letter == ""A"" or letter == ""a"" or letter == ""E"" or letter == ""e"" or letter == ""I"" or letter == ""i"" or letter == ""o"" or letter == ""O"" or letter == ""U"" or letter == ""u"":
	print(""{} is Vowel"".format(letter))
else:
	print(""{} is co nsonent (Not Vowel)"".format(letter))
"
width. The Rectangle class has a method which can compute the area.	"class Rectangle(object):
	def __init__(self, l, w):
        self.length = l
        self.width = w

	def area(self):
        return self.length * self.width
"
write python function to detect if an year is leap year	"def is_leap_year(year):
	if (year % 4) == 0:
        if (year % 100) == 0:
            if (year % 400) == 0:
                return True
            else:
                return False
        else:
            return True
	else:
        return False
"
write a python function to return the exponential of a number	"def get_exponential_value(i):
	import math
	return(math.exp(i))
"
write a python function for binary search	"

def binary_search(arr, low, high, x):
	if high >= low:

        mid = (high + low) // 2
        if arr[mid] == x:
            return mid
        elif arr[mid] > x:
            return binary_search(arr, low, mid - 1, x)

        else:
            return binary_search(arr, mid + 1, high, x)
	else:
        return -1
"
Subtract a week from a given date	"from datetime import datetime, timedelta
given_date = datetime(2020, 2, 25)
days_to_subtract = 7
res_date = given_date - timedelta(days=days_to_subtract)
print(res_date)
"
lowercase letters in a given string	"str1 = 'TestStringInCamelCase'
no_of_ucase, no_of_lcase = 0, 0
for c in str1:
	if c >= 'A' and c <= 'Z':
        no_of_ucase += 1
	if c >= 'a' and c <= 'z':
        no_of_lcase += 1


print(no_of_lcase)
print(no_of_ucase)
"
26. Python Program to Convert Decimal to Octal	"dec = 344
print(""The decimal value of"", dec, ""is:"")
print(oct(dec), ""in octal."")
"
element in a line	"

def custom_print(l):
	for _ in l:
        print(_)
"
50 function to check whether a given name is function or method	"def inspect_func(fn):
	from inspect import isfunction, ismethod
	print(f'{fn} is method {ismethod(func)}')
	print(f'{fn} is function {isfunction(func)}')
"
Calculate number of days between two given dates	"from datetime import datetime


date_1 = datetime(2020, 2, 25).date()
date_2 = datetime(2020, 9, 17).date()
delta = None
if date_1 > date_2:
	delta = date_1 - date_2
else:
	delta = date_2 - date_1
print(""Difference is"", delta.days, ""days"")
"
and also include spaces	"def extract_alpha(my_string):
	return """".join([c for c in my_string if (c.isalpha() or c.isspace())])
"
another given string.	"def is_anagram(str1, str2):
	list_str1 = list(str1)
	list_str1.sort()
	list_str2 = list(str2)
	list_str2.sort()

	return (list_str1 == list_str2)
"
percentage	"def cal_sp_after_discount(sp: float, discount: float) -> float:
	return sp * (1 - discount / 100)
"
or	"x = [[[value1]]]  
"
Write a Python program to subtract five days from current date	"from datetime import date, timedelta
dt = date.today() - timedelta(5)
print('Current Date :', date.today())
print('5 days before Current Date :', dt)
"
write a function to calculate area of a triangle given height and base	"

def area_triangle(base, height):
	return 0.5 * base * height
"
provided circumference	"

def area_of_circle(circumference):
	circumference = float(circumference)
	PI = 3.14
	area = (circumference * circumference) / (4 * PI)
	print(f'Area Of a Circle {area}')
"
Write a program to check and print whether a number is palindrome or not	"num = 12321
temp = num
rev = 0
while num > 0:
	dig = num % 10
	rev = rev * 10 + dig
	num //= 10
if temp == rev:
	print(""The number is a palindrome!"")
else:
	print(""The number isn't a palindrome!"")
"
write a program to print binary of a decimal number n	"

binaryNum = [0] * n
i = 0
while (n > 0):
	binaryNum[i] = n % 2
	n = int(n / 2)
	i += 1


for j in range(i - 1, -1, -1):
	print(binaryNum[j], end="""")
"
23 write a program to print even length words in a string	"
def printWords(s):
	s = s.split(' ')
	for word in s:
        if len(word) % 2 == 0:
            print(word)
"
number, merge all overlapping intervals.	"org_intervals = [[1, 3], [2, 6], [5, 10], [11, 16], [15, 18], [19, 22]]
i = 0
while i < len(org_intervals) - 1:
	if org_intervals[i + 1][0] < org_intervals[i][1]:
        org_intervals[i][1] = org_intervals[i + 1][1]
        del org_intervals[i + 1]
        i = i - 1
	i = i + 1
print(org_intervals)
"
41 how to sort a list in python using lambda	"data = [(""Apples"", 5, ""20""), (""Pears"", 1, ""5""), (""Oranges"", 6, ""10"")]


data.sort(key=lambda x: x[0])
"
write a Python program to create multiple list	"

obj = {}
for i in range(1, 11):
	obj[str(i)] = []
print(f'create multiple list:{obj}')
"
than the specified number.	"def sum_of_cubes(n):
	n -= 1
	total = 0
	while n > 0:
        total += n * n * n
        n -= 1
	return total


print(""Sum of cubes: "", sum_of_cubes(3))
"
array of integers except the one at i.	"def product(nums):
	new_nums = []

	for i in nums:
        nums_product = 1

        for j in nums:
            if j != i:
                nums_product = nums_product * j
        new_nums.append(nums_product)

	return new_nums
"
python program to multiply all the numbers in given list	"def multiply(numbers):
	total = 1
	for x in numbers:
        total *= x
	return total


print(multiply((8, 2, 3, -1, 7)))
"
Write a function to return day of a week, given the number	"

def give_day(n):
	day_dict = {
        1: 'Sunday',
        2: 'Monday',
        3: 'Tuesday',
        4: 'Wednesday',
        5: 'Thursday',
        6: 'Friday',
        7: 'Saturday'}
	return day_dict[n]
"
number	"def checkString(str):

	flag_l = False
	flag_n = False

	for i in str:

        
        if i.isalpha():
            flag_l = True

        
        if i.isdigit():
            flag_n = True

	return flag_l and flag_n
"
Write a python  class to implement LRU Cache	"

class DLinkedNode:
	def __init__(self):
        self.key = 0
        self.value = 0
        self.prev = None
        self.next = None


class LRUCache(object):

	def __init__(self, capacity):
        self.capacity = capacity
        self.head = DLinkedNode()
        self.tail = DLinkedNode()
        self.cache = {}
        self.size = 0
        self.head.next = self.tail
        self.tail.prev = self.head

	def add_node(self, node):
        node.next = self.head.next
        node.prev = self.head
        self.head.next.prev = node
        self.head.next = node

	def remove_node(self, node):
        next = node.next
        prev = node.prev
        prev.next = next
        next.prev = prev

	def move_to_head(self, node):
        self.remove_node(node)
        self.add_node(node)

	def tail_off(self):
        res = self.tail.prev
        self.remove_node(res)
        return res

	def get(self, key):
        node = self.cache.get(key, None)
        if not node:
            return -1

        self.move_to_head(node)
        return node.value

	def put(self, key, value):
        node = self.cache.get(key, None)
        if not node:
            node = DLinkedNode()
            node.key = key
            node.value = value
            self.cache[key] = node
            self.add_node(node)
            self.size += 1
            if self.size > self.capacity:
                last_node = self.tail_off()
                del self.cache[last_node.key]
                self.size -= 1
        else:
            node.value = value
            self.move_to_head(node)
"
Add week (7 days) and 12 hours to a given date	"from datetime import datetime, timedelta
given_date = datetime(2020, 3, 22, 10, 00, 00)
days_to_add = 7
res_date = given_date + timedelta(days=days_to_add, hours=12)
print(res_date)
"
write Python Program to Multiply Two Matrices and print result.	"X = [[1, 2, 3],
     [4, 5, 6],
     [7, 8, 9]]

Y = [[10, 11, 12],
     [13, 14, 15],
     [16, 17, 18]]

result = [[0, 0, 0],
          [0, 0, 0],
          [0, 0, 0]]
for i in range(len(X)):
	for j in range(len(Y[0])):
        for k in range(len(Y)):
            result[i][j] += X[i][k] * Y[k][j]
for r in result:
	print(r)
"
Write a function to return the volume of a hemi sphere	"def cal_hemisphere_volume(radius: float) -> float:
	pi = 3.14
	return (2 / 3) * pi * (radius**3)
"
13. python function to find the average of given numbers	"def average():
	numbers = []

	def add(number):
        numbers.append(number)
        total = sum(numbers)
        count = len(numbers)
        return total / count
	return add


a = average()
a(10)
a(20)
a(45)
"
88 Write a Python fuction to print the depth of a dictionary.	"def dict_depth(d):
	if isinstance(d, dict):
        return 1 + (max(map(dict_depth, d.values())) if d else 0)
	return 0


dic = {'a': 1, 'b': {'c': {'d': {}}}}
print(dict_depth(dic))
"
write a python function to convert a given string into a list of words.	"

import re


def words(s, pattern='[a-zA-Z-]+'):
	return re.findall(pattern, s)
"
Addition of two vector	"v1 = [1, 2, 3]
v2 = [1, 2, 3]
s1 = [0, 0, 0]


for i in range(len(v1)):
	s1[i] = v1[i] + v2[i]
print(f""New Vector:{s1}"")
"
write a function that converts a integer dictionary into a list of tuples.	"def dict_to_tuple(input_dict):
	out_tuple = [(a, b) for a, b in input_dict.items()]
	return out_tuple
"
another way to append data to tuple	"tup = ([],)
print('tup before: ', tup)
tup[0].append(1)
print('tup after: ', tup)
"
write a python function to convert degree fahrenheit to degree celsius	"def celsius(fahrenheit):
	return (fahrenheit - 32) / 1.8
"
write a program to break up string into individual elements	"

str1 = ""whatisthis""

split_string = list(''.join(str1))

print(split_string)
"
change this value for a different result	"num = 16


if num < 0:
	print(""Enter a positive number"")
else:
	print(""The sum is"", recur_sum(num))
"
Write a function to implement Gnome Sort	"def gnomeSort(arr, n):
	index = 0
	while index < n:
        if index == 0:
            index = index + 1
        if arr[index] >= arr[index - 1]:
            index = index + 1
        else:
            arr[index], arr[index - 1] = arr[index - 1], arr[index]
            index = index - 1
	return arr


arr = [34, 2, 10, -9]
n = len(arr)
arr = gnomeSort(arr, n)
print(""Sorted seqquence after applying Gnome Sort :"")
for i in arr:
	print(i)
"
Bubble sort in python	"list1 = [1, 5, 3, 4]


for i in range(len(list1) - 1):
	for j in range(i + 1, len(list1)):
        if(list1[i] > list1[j]):
            temp = list1[i]
            list1[i] = list1[j]
            list1[j] = temp
print(""Bubble Sorted list: "", list1)
"
write a function to find common words from two strings	"

def commonWords(str1, str2):

	count = {}

	for word in str1.split():
        count[word] = count.get(word, 0) + 1

	for word in str2.split():
        count[word] = count.get(word, 0) + 1

	return [word for word in count if count[word] > 1]
"
the given list and return None if the list is empty	"def largest_and_smallest(list_of_nums):
	if list_of_nums:
        return max(list_of_nums), min(list_of_nums)
	else:
        return
"
Insert a number at the beginning of the queue	"q = [1, 2, 3, 4]
q.insert(0, 5)
print(f""Revised List:{q}"")
"
of elements is the highest.	"print(max(num, key=sum))
"
92 Write a python function to round off a given decimal number	"

def apply_round(num):
	return round(num)
"
access Last characters in a string	"word = ""Hello World""
letter = word[-1]
print(f""First Charecter in String:{letter}"")
"
write a program Creating a Dictionary	"Dict = {1: 'Geeks', 'name': 'For', 3: 'Geeks'}


print(""Accessing a element using get:"")
print(Dict.get(3))
"
alphanumeric character	"

import re


regex = '[a-zA-z0-9]$'


def check(string):
	if(re.search(regex, string)):
        print(""Accept"")
	else:
        print(""Discard"")
"
write a program to split and join a string with a hyphen delimiter	"

str1 = ""part of speech""
delimiter = ""-""


list_str = str1.split("" "")


new_str = delimiter.join(list_str)


print(""Delimited String is: "" + new_str)
"
write a program to convert key-values list to flat dictionary and print it	"

from itertools import product
test_dict = {'month': [1, 2, 3],
             'name': ['Jan', 'Feb', 'March']}

print(""The original dictionary is : "" + str(test_dict))


res = dict(zip(test_dict['month'], test_dict['name']))


print(""Flattened dictionary : "" + str(res))
"
Python program to compute sum of digits in number	"def sumDigits(no):
	return 0 if no == 0 else int(no % 10) + sumDigits(int(no / 10))


n = 1234511
print(sumDigits(n))
"
Write a python program to print all the values in a dictionary.	"d = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
print(d.values())
"
76 write a python program  to print Dictionary values String Length Summation	"

test_dict = {'gfg': '2345',
             'is': 'abcde',
             'best': 'qwerty'}
print(""The original dictionary is : "" + str(test_dict))
list1 = list(test_dict.values())
print(list1)
s = """".join(i for i in list1)
print(f'Summation of string values is {len(s)}')
"
write a python program to calculate the time taken	"

activities = {8: 'Sleeping',
              9: 'Commuting',
              17: 'Working',
              18: 'Commuting',
              20: 'Eating',
              22: 'Resting'}


time_now = localtime()
hour = time_now.tm_hour


for activity_time in sorted(activities.keys()):
	if hour < activity_time:
        print(activities[activity_time])
        break
else:
	print('Unknown, AFK or sleeping!')
"
second one into the first	"a = {""a"": 1, ""b"": 3}
b = {""c"": 1, ""d"": 3}
a.update(b)
"
initialize sum	"sum = 0
"
illustrate the test for equality (==) vs. identity (is)	"a = 'hello world!'
b = 'hello world!'
print('a is b,', a is b)
print('a == b,', a == b)
"
write a python program that multiplies a tuple n times and print the result	"my_tuple = (1, 2, 3)
n = 3
print(my_tuple * 3)
"
edges, circumradius	"import math


def area_of_polygon(number_of_edges, circumradius):
	return number_of_edges * 2 * circumradius * math.sin(
        180 / number_of_edges) * circumradius * math.cos(180 / number_of_edges) * 0.5
"
the list after	"

class Node:
	def __init__(self, val):
        self.val = val
        self.next = None


class LList:
	def __init__(self):
        self.head = None


def create_linked_list(*args):
	linked_list = LList()
	linked_list.head = Node(args[0])
	prev = linked_list.head

	for i in range(1, len(args)):
        entry = Node(args[i])
        prev.next = entry
        prev = entry
	return
"
given string	"str1 = ""Emma is a data scientist who knows Python. Emma works at google.""
print(f""Original String is: {str1}"")


index = str1.rfind(""Emma"")
print(f""Last occurrence of Emma starts at {index}"")
"
Write a function that returns derivative derivative relu value of the input	"def derivative_relu(x: float) -> float:
	x = 1 if x > 0 else 0
	return x
"
print it.	"ini_list = [{'a': [1, 2, 3], 'b':[4, 5, 6]},
            {'c': [7, 8, 9], 'd':[10, 11, 12]}]
temp_dict = {}
result = []
for ini_dict in ini_list:
	for key in ini_dict.keys():
        if key in temp_dict:
            temp_dict[key] += ini_dict[key]
        else:
            temp_dict[key] = ini_dict[key]
for key in temp_dict.keys():
	result.append(tuple([key] + temp_dict[key]))
print(""Resultant list of tuples: {}"".format(result))
"
Write a Python function that calculate area of a equilateral polygon	"

import math


def area(no_of_sides, circumradius):
	side_length = 2 * circumradius * math.sin(math.pi / no_of_sides)
	apothem = circumradius * math.cos(math.pi / no_of_sides)
	return no_of_sides / 2 * side_length * apothem
"
write a python function to pickle data to a file	"def pickle_data(data, pickle_file):
	import pickle
	with open(pickle_file, 'wb') as f:
        pickle.dump(data, f, pickle.HIGHEST_PROTOCOL)
	return None
"
sets have any elements in common. If yes display the common elements	"set1 = {10, 20, 30, 40, 50}
set2 = {60, 70, 80, 90, 10}
if set1.isdisjoint(set2):
	print(""Two sets have no items in common"")
else:
	print(""Two sets have items in common"")
	print(set1.intersection(set2))
"
print the key element if found	"

def binary_search(alist, key):
	
	start = 0
	end = len(alist)
	while start < end:
        mid = (start + end) // 2
        if alist[mid] > key:
            end = mid
        elif alist[mid] < key:
            start = mid + 1
        else:
            return mid
	return -1


alist = [2, 3, 5, 6, 4, 5]


key = 6

index = binary_search(alist, key)
if index < 0:
	print(f'{key} was not found.')
else:
	print(f'{key} was found at index {index}.')
"
Write a function to merge two lists element wise	"def merge_lists(l1: list, l2: list):
	return list(zip(l1, l2))
"
write a python program that would swap variable values	"a = 10
b = 15
a, b = b, a
"
write a Python Program to Add two binary numbers and print the sum	"num1 = '00001'
num2 = '10001'
sum = bin(int(num1, 2) + int(num2, 2))
print(sum)
"
and prints it	"hexadecimal_num = 'FF'
decimal_num = int(hexadecimal_num, 16)
print(decimal_num)
"
write a python program to converts list of mix data to comma separated string	"data = [2, 'hello', 3, 3.4]


print(','.join(map(str, data)))
"
and radius R	"def cal_mi_ring(mass: float, radius: float) -> float:
	return mass * (radius**2)
"
write a python program to add two hexadecimal numbers	"
a = ""B""
b = ""C""
sum = hex(int(a, 16) + int(b, 16))
print(sum[2:])
"
Write a python program to check if a number is an Armstrong number.	"n = int(input(""Enter any number: ""))
a = list(map(int, str(n)))
b = list(map(lambda x: x**3, a))
if(sum(b) == n):
	print(""The number is an armstrong number. "")
else:
	print(""The number isn't an arsmtrong number. "")
"
8. python function to identify profane words	"def profane_filter(str):
	profane_word_url = ""https://raw.githubusercontent.com/RobertJGabriel/Google-profanity-words/master/list.txt""
	file = urllib.request.urlopen(profane_word_url)
	for line in file:
        decoded_line = line.decode(""utf-8"")
	return decoded_line
	str = re.findall(r'\w+', str)
	return [i for i in str if i in decoded_line]
"
valid or not	"

import re

regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'


def check(email):
	if(re.search(regex, email)):
        print(""Valid Email"")

	else:
        print(""Invalid Email"")
"
initializing string	"test_str = ""Helloworld""

print(""The original string is : "" + test_str)

all_freq = {}
for i in test_str:
	if i in all_freq:
        all_freq[i] += 1
	else:
        all_freq[i] = 1
res = max(all_freq, key=all_freq.get)

print(""The maximum of all characters in Helloworld is : "" + str(res))
"
print True or False.	"

def is_Sublist(l, s):
	sub_set = False
	if s == []:
        sub_set = True
	elif s == l:
        sub_set = True
	elif len(s) > len(l):
        sub_set = False

	else:
        for i in range(len(l)):
            if l[i] == s[0]:
                n = 1
                while (n < len(s)) and (l[i + n] == s[n]):
                    n += 1

                if n == len(s):
                    sub_set = True

	return sub_set


a = [2, 4, 3, 5, 7]
b = [4, 3]
c = [3, 7]
print(is_Sublist(a, b))
print(is_Sublist(a, c))
"
enumerate()	"

test_list = [{""Gfg"": 3, 4: 9}, {""is"": 8, ""Good"": 2}, {""Best"": 10, ""CS"": 1}]


print(""The original list : "" + str(test_list))


res = {idx: val for idx, val in enumerate(test_list)}
print(""The constructed dictionary : "" + str(res))
"
15 inclusive.	"import random
print(random.randrange(7, 16))
"
flat dictionary	"

def values_only(flat_dict):
	return list(flat_dict.values())
"
ideal gas equation Pressure P and Volume V given	"

def find_temp_of_ideal_gas(pressure: float, volume: float, n: float) -> float:
	r = 8.3145  
	return (pressure * volume) / n * r
"
k consecutive numbers Return True if its possible otherwise return False	"

import collections


def isPossibleDivide(nums, k):

	d = collections.Counter(nums)
	for num in sorted(d.keys()):
        if num in d:
            for i in range(k - 1, -1, -1):
                d[num + i] -= d[num]
                if d[num + i] == 0:
                    del d[num + i]
                if d[num + i] < 0:
                    return False

	return (True if not d else False)
"
73 write a program to shuffle and print the list [3,6,7,8].	"from random import shuffle


li = [3, 6, 7, 8]
shuffle(li)
print(li)
"
series in a given list	"def cal_total_res_in_series(res_list: list) -> float:
	return sum(res_list)
"
39 how to remove integer from string in python	"s = '12abcd405'
result = ''.join([i for i in s if not i.isdigit()])
"
write a python function to find leftmost item greater than or equal to x	"def find_ge(a, x):
	from bisect import bisect_left
	i = bisect_left(a, x)
	if i != len(a):
        return a[i]
	raise ValueError
"
unique elements of the first list	"def unique_list(l):
	x = []
	for a in l:
        if a not in x:
            x.append(a)
	return x


print(unique_list([1, 2, 3, 3, 3, 3, 4, 5]))
"
write a program Creating an empty Dictionary	"Dict = {}
print(""Empty Dictionary: "")
print(Dict)
"
14 Write a python program to find elements with the same index and print them	"

list1 = [3, 1, 2, 5, 4, 10, 6, 9]

list2 = []
for idx, ele in enumerate(list1):
	if idx == ele:
        list2.append(ele)

print(""Filtered elements : "" + str(list2))
"
in a String	"

string = 'This is an Assignment'
count = 0
for i in string:
	if(i.islower()):
        count = count + 1
print(""The number of lowercase characters is:"")
print(count)
"
20 how to check if a list is a subset of another list	"if(all(x in test_list for x in sub_list)):
	flag = True
"
Absolute function	"def absolute_value(num):
	

	if num >= 0:
        return num
	else:
        return -num


print(absolute_value(2))
print(absolute_value(-4))
"
provided by the user	"

my_str = ""Hello this Is an Example With cased letters""


words = [word.lower() for word in my_str.split()]
words.sort()


print(""The sorted words are:"")
for word in words:
	print(word)
"
and radius R	"def cal_mi_ring(mass: float, radius: float) -> float:
	return mass * (radius**2)
"
parenthesis is given as input	"

def generateParenthesis(n):

	def backtrack(S='', left=0, right=0):
        if len(S) == 2 * n:
            output.append(S)
            return
        if left < n:
            backtrack(S + '(', left + 1, right)
        if right < left:
            backtrack(S + ')', left, right + 1)

	output = []
	backtrack()
	return output
"
29. Python Program to Find HCF or GCD	"

def compute_hcf(x, y):
	if x > y:
        smaller = y
	else:
        smaller = x
	for i in range(1, smaller + 1):
        if((x % i == 0) and (y % i == 0)):
            hcf = i
	return hcf


num1 = 54
num2 = 24

print(""The H.C.F. is"", compute_hcf(num1, num2))
"
33 write a python program to delete all occurences of character and print it	"

test_str = ""TheSchoolofAI""

rem_char = ""e""

res = test_str.replace(rem_char, """")

print(""The string after character deletion : "" + str(res))
"
list.	"import math


def bin_search(li, element):
	bottom = 0
	top = len(li) - 1
	index = -1
	while top >= bottom and index == -1:
        mid = int(math.floor((top + bottom) / 2.0))
        if li[mid] == element:
            index = mid
        elif li[mid] > element:
            top = mid - 1
        else:
            bottom = mid + 1
	return index
"
Write a lambda function to convert centimeters to inches	"

def cm_to_inch(x): return x / 2.54
"
Appears in the Text File	"def count_letter(fname, l):
	k = 0
	with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            for i in words:
                for letter in i:
                    if(letter == l):
                        k = k + 1
	return k
"
write python code to print temperature in celsius to fahrenheit	"celsius = 37.5
fahrenheit = (celsius * 1.8) + 32
print(
	'%0.1f degree Celsius is equal to %0.1f degree Fahrenheit' %
	(celsius, fahrenheit))
"
Write a Python function to Find the Sum of Sine Series	"

def sin(x, n):
	sine = 0
	for i in range(n):
        sign = (-1)**i
        pi = 22 / 7
        y = x * (pi / 180)
        sine = sine + ((y**(2.0 * i + 1)) / math.factorial(2 * i + 1)) * sign
	return sine
"
write a python program to replace the first character of a given word	"word = ""goal""
word = ""f"" + word[1:]
print(word)
"
the first set	"firstSet = {23, 42, 65, 57, 78, 83, 29}
secondSet = {57, 83, 29, 67, 73, 43, 48}


intersection = firstSet.intersection(secondSet)
for item in intersection:
	firstSet.remove(item)
print(""First Set after removing common element "", firstSet)
"
3x3 matrix	"X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]
"
sorted list for the below list	"

def cocktail_shaker_sort(alist):
	def swap(i, j):
        alist[i], alist[j] = alist[j], alist[i]

	upper = len(alist) - 1
	lower = 0

	no_swap = False
	while (not no_swap and upper - lower > 1):
        no_swap = True
        for j in range(lower, upper):
            if alist[j + 1] < alist[j]:
                swap(j + 1, j)
                no_swap = False
        upper = upper - 1

        for j in range(upper, lower, -1):
            if alist[j - 1] > alist[j]:
                swap(j - 1, j)
                no_swap = False
        lower = lower + 1


alist = [2, 3, 5, 6, 4, 5]
cocktail_shaker_sort(alist)
print('Sorted list: ', end='')
print(alist)
"
Write a Python Program to Map Two Lists into a Dictionary	"

def map_dict(keys, values):
	return dict(zip(keys, values))
"
write a python function to return the nth fibonacci number	"def fib(n):
	if n <= 1:
        return n
	else:
        return (fib(n - 1) + fib(n - 2))
"
numbers, where n is the input	"def sum_first_n(n):
	return (n * (n + 1)) // 2
"
write a program to calculate exponents of an input	"input = 9
exponent = 2
final = pow(input, exponent)
print(f'Exponent Value is:{final}')
"
write a python program to remove an element from a list	"li = [1, 2, 3, 4]
li.remove(1)
li
"
between 100 and 200 inclusive.	"import random


print(random.sample([i for i in range(100, 201) if i % 2 == 0], 5))
"
Write a Python Program to prints Common Letters in Two Input Strings	"

s1 = 'python'
s2 = 'schoolofai'
a = list(set(s1) & set(s2))
print(""The common letters are:"")
for i in a:
	print(i)
"
value of the list.	"a = []
n = int(input(""Enter the number of elements in list:""))
for x in range(0, n):
	element = int(input(""Enter element"" + str(x + 1) + "":""))
	a.append(element)
temp = a[0]
a[0] = a[n - 1]
a[n - 1] = temp
print(""New list is:"")
print(a)
"
Convert string into a datetime object	"from datetime import datetime
date_string = ""Feb 25 2020  4:20PM""
datetime_object = datetime.strptime(date_string, '%b %d %Y %I:%M%p')
print(datetime_object)
"
comprehension.	"import random
print(random.choice([i for i in range(201) if i % 5 == 0 and i % 7 == 0]))
"
dictionary comprehension	"

ip_str = 'Hello, have you tried our tutorial section yet?'
ip_str = ip_str.casefold()
count = {x: sum([1 for char in ip_str if char == x]) for x in 'aeiou'}
print(count)
"
49. Python Program to Count the Number of Each Vowel	"vowels = 'aeiou'

ip_str = 'Hello, have you tried our tutorial section yet?'
ip_str = ip_str.casefold()
count = {}.fromkeys(vowels, 0)
for char in ip_str:
	if char in count:
        count[char] += 1


print(count)
"
write a program to increment number which is at end of string	"

import re

str1 = 'count001'


res = re.sub(r'[0-9]+$',
             lambda x: f""{str(int(x.group())+1).zfill(len(x.group()))}"",
             str1)

print(""Incremented numeric String : "" + str(res))
"
write a python program that prints the area of a square	"side = 5
print(f'Area: {side * side}')
"
Write a Python program to sort a tuple by its float element.	"price = [('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]
print(sorted(price, key=lambda x: float(x[1]), reverse=True))
"
Occurrence in String	"

test_str = 'Gfg is best . Gfg also has Classes now. Classes help understand better . '


print(""The original string is : "" + test_str)


repl_dict = {'Gfg': 'It', 'Classes': 'They'}


test_list = test_str.split(' ')
res = ' '.join([repl_dict.get(val) if val in repl_dict.keys() and test_list.index(val) != idx
                else val for idx, val in enumerate(test_list)])


print(""The string after replacing : "" + res)
"
in a String using Sets	"

def count_vowels(s):
	count = 0
	vowels = set(""aeiou"")
	for letter in s:
        if letter in vowels:
            count += 1
	return count
"
46 factorial of number using recursion	"def factorial(n: int):
	if n < 1:
        return 1
	else:
        return n * factorial(n - 1)
"
Write a python function to generate permuations of a list of given numbers	"

def permute(nums):
	def backtrack(first=0):
        if first == n:
            output.append(nums[:])
        for i in range(first, n):
            nums[first], nums[i] = nums[i], nums[first]

            backtrack(first + 1)

            nums[first], nums[i] = nums[i], nums[first]

	n = len(nums)
	output = []
	backtrack()
	return output
"
their sum	"

def map_reduce(lst):
	return reduce(lambda x, y: x + y, filter(lambda x: x % 2 == 0, lst))


print(map_reduce([1, 2, 3, 4, 5]))
"
reverse the string	"rev_str = reversed(my_str)
"
provided list	"def print_alternate_numbers(list1):
	print(list1[::2])
"
a single line.	"values = []
for i in range(1000, 3001):
	s = str(i)
	if (int(s[0]) % 2 == 0) and (int(s[1]) % 2 == 0) and (int(s[2]) % 2 == 0) and (int(s[3]) % 2 == 0):
        values.append(s)
print("","".join(values))
"
54 Write a Python function to check if a number is a perfect square	"def is_perfect_square(n):
	x = n // 2
	y = set([x])
	while x * x != n:
        x = (x + (n // x)) // 2
        if x in y:
            return False
        y.add(x)
	return True
"
Write a function that joins elements of list	"def join_elements(l: list) -> str:
	return (''.join(str(l)))
"
provided dates	"

def days_diff(start, end):
	return (end - start).days
"
Python math module.	"import random
print(random.random() * 100 - 5)
"
reverse a number in Python	"number = 1367891
revs_number = 0
while (number > 0):
	remainder = number % 10
	revs_number = (revs_number * 10) + remainder
	number = number // 10
print(""The reverse number is : {}"".format(revs_number))
"
write a python list comprehension to flatten a list of lists	"list_of_list = [[1, 2, 3], [4, 5, 6], [7, 8]]
flatten = [y for x in list_of_list for y in x]
"
a list	"def find_evennumbers(input_list):
	list_using_comp = [var for var in input_list if var % 2 == 0]
	return list_using_comp
"
character in a string input by console.	"dic = {}
s = input()
for s in s:
	dic[s] = dic.get(s, 0) + 1
print('\n'.join(['%s,%s' % (k, v) for k, v in dic.items()]))
"
write a python function to reverse user provided list and return the result	"def reverselist(inlist):
	inlist = inlist[::-1]
	return inlist


result = reverselist([1, 2])
"
write a python function to return sum of the powers between two numbers	"

def sum_of_powers(end, power=2, start=1):
	return sum([(i) ** power for i in range(start, end + 1)])
"
elements of fibonacci series	"

N = int(input(""Please enter a number ""))
first = 0
second = 1
print(first)
print(second)
for a in range(1, N - 1):
	third = first + second
	print(third)
	first, second = second, third
"
"write a python program that would print ""Hello World"""	"print(""Hello World"")
"
56 write a  program to find HCF	"

def hcf(x, y):
	if x > y:
        smaller = y
	else:
        smaller = x
	for i in range(1, smaller + 1):
        if((x % i == 0) and (y % i == 0)):
            hcf = i
	return hcf


num1 = int(input(""Enter first number: ""))
num2 = int(input(""Enter second number: ""))
print(""The H.C.F. of"", num1, ""and"", num2, ""is"", hcf(num1, num2))
"
write a python function to obtain the square root of a number	"
def squareRoot(n):
	x = n
	y = 1
	e = 0.000001
	while(x - y > e):
        x = (x + y) / 2
        y = n / x
	return x
"
Write a function to get the Cumulative sum of a list	"
def Cumulative(lists):
	cu_list = []
	length = len(lists)
	cu_list = [sum(lists[0:x:1]) for x in range(0, length + 1)]
	return cu_list[1:]
"
write a program to find length of list	"t = 1, 2, 3, 4, 5
print(f'tuple length: {len(t)}')
"
Return the largest item from the given list	"aList = [4, 6, 8, 24, 12, 2]
print(max(aList))
"
write a python program that prints every third character in a sentence	"sentence = 'the quick brown fox'
print(sentence[::3])
"
dictionaries. Print the combined dictionary.	"test_list = [{'tsai': [1, 5, 6, 7], 'good': [9, 6, 2, 10], 'CS': [4, 5, 6]},
             {'tsai': [5, 6, 7, 8], 'CS': [5, 7, 10]},
             {'tsai': [7, 5], 'best': [5, 7]}]
res = dict()
for inner_dict in test_list:
	for inner_list in inner_dict:
        if inner_list in res:
            res[inner_list] += (inner_dict[inner_list])
        else:
            res[inner_list] = inner_dict[inner_list]
print(""The concatenated dictionary : "" + str(res))
"
the first set	"firstSet = {23, 42, 65, 57, 78, 83, 29}
secondSet = {57, 83, 29, 67, 73, 43, 48}


intersection = firstSet.intersection(secondSet)
for item in intersection:
	firstSet.remove(item)
print(""First Set after removing common element "", firstSet)
"
Driver Code	"s = ""hello world""
printWords(s)
"
remove punctuation from the string	"no_punct = """"
for char in my_str:
	if char not in punctuations:
        no_punct = no_punct + char
"
Write a recursive function to calculate the sum of numbers from 0 to 10	"def calculateSum(num):
	if num:
        return num + calculateSum(num - 1)
	else:
        return 0


res = calculateSum(10)
print(res)
"
and print the new combined dictionary.	"test_dict1 = {'Gfg': 1, 'is': 2, 'best': 3}
test_dict2 = {'Gfg': 4, 'is': 10, 'for': 7, 'geeks': 12}
prio_dict = {1: test_dict2, 2: test_dict1}
res = prio_dict[2].copy()
for key, val in prio_dict[1].items():
	res[key] = val
print(""The dictionary after combination : "" + str(res))
"
3 write a python program to convert a string to a char array	"

def char_array(string):
	return list(string)
"
79 class to show implementation of custom sequence of list	"class CustomList:
	

	def __init__(self):
        self.list_ = [1, 2, 3, 4]

	def __len__(self):
        return len(self.list_)

	def __getitem__(self, i):
        if isinstance(i, int):
            if i < 0:
                i = len(self.list_) + i

            if i < 0 or i >= len(self.list_):
                raise IndexError('Invalid Input')
            else:
                return self.list_[i]
"
Write a function to determine the bits used by any number	"

def totalBits(n):
	return f'total number of bits used in {n} is : {len(bin(n)[2: ])}'
"
write a python program to make use of regular expression for matching	"

s = 'foo123bar'
m = re.findall('123', s)
print('find the number position:', m)
"
22 how to check if string is in byte formate pythin	"isinstance(string, bytes)
"
42 write a function to subtract two matrices in python	"matrix1 = [[0, 1, 2],
           [3, 5, 5],
           [6, 7, 8]]


matrix2 = [[1, 2, 3],
           [4, 5, 6],
           [7, 8, 9]]


def subtractTheMatrix(matrix1, matrix2):
	matrix1Rows = len(matrix1)
	matrix2Rows = len(matrix2)
	matrix1Col = len(matrix1[0])
	matrix2Col = len(matrix2[0])

	
	if(matrix1Rows != matrix2Rows or matrix1Col != matrix2Col):
        return ""ERROR: dimensions of the two arrays must be the same""

	matrix = []
	rows = []

	for i in range(0, matrix1Rows):
        for j in range(0, matrix2Col):
            rows.append(0)
        matrix.append(rows.copy())
        rows = []

	for i in range(0, matrix1Rows):
        for j in range(0, matrix2Col):
            matrix[i][j] = matrix1[i][j] - matrix2[i][j]

	return matrix
"
Write a function that will convert a string into camelCase	"

from re import sub


def camelCase(string):
	string = sub(r""(_|-)+"", "" "", string).title().replace("" "", """")
	return string[0].lower() + string[1:]
"
sentence	"sentence = 'this is my sentence and i will write it my way'
maxlength = 3
result = [word for word in sentence.split(' ') if len(word) <= minlength]
"
write a list comprehension for printing rows into columns and vv	"

def unpack(a, b, c, d):
	print(a + d)


x = [1, 2, 3, 4]
unpack(*x)
"
3x4 matrix	"Y = [[5, 8, 1, 2],
     [6, 7, 3, 0],
     [4, 5, 9, 1]]
"
print it	"from functools import reduce
nums = [1, 2, 3, 4, 5, 10, 20, 30, 40, 50]
total_sum = reduce(lambda a, b: a + b, nums)
print(f'Sum: {total_sum}')
"
Please write a program to shuffle and print the list [3,6,7,8].	"from random import shuffle
li = [3, 6, 7, 8]
shuffle(li)
print(li)
"
Write a Python function to find the N-th number which is both square and cube	"def nth_sq_and_cube(N):
	R = N**6
	return R
"
38. Python Program to Find Sum of Natural Numbers Using Recursion	"def recur_sum(n):
	if n <= 1:
        return n
	else:
        return n + recur_sum(n - 1)
"
Write a Python function to Find the Power of a Number Using Recursion	"

def power(base, exp):
	if(exp == 1):
        return(base)
	if(exp != 1):
        return(base * power(base, exp - 1))
"
Write a python program for print all elements with digit 7.	"
test_list = [56, 72, 875, 9, 173]

K = 7

res = [ele for ele in test_list if str(K) in str(ele)]

print(""Elements with digit K : "" + str(res))
"
write a python program to print if year is a leap year or not	"year = 2000
if (year % 4) == 0:
	if (year % 100) == 0:
        if (year % 400) == 0:
            print(""{0} is a leap year"".format(year))
        else:
            print(""{0} is not a leap year"".format(year))
	else:
        print(""{0} is a leap year"".format(year))
else:
	print(""{0} is not a leap year"".format(year))
"
write a program to Pretty Print a dictionary with dictionary values.	"test_dict = {'tsai': {'rate': 5, 'remark': 'good'}, 'cs': {'rate': 3}}
print(""The Pretty Print dictionary is : "")
for sub in test_dict:
	print(f""\n{sub}"")
	for sub_nest in test_dict[sub]:
        print(sub_nest, ':', test_dict[sub][sub_nest])
"
Write a Python program to sort (Descending) a dictionary by value.	"d = {1: 2, 3: 4, 4: 3, 2: 1, 0: 0}


print({k: v for k, v in sorted(d.items(), key=lambda x: x[1], reverse=True)})
"
python program to Filter String with substring at specific position	"def f_substring():
	test_list = ['program ', 'to', 'filter', 'for', 'substring']
	print(""The original list is : "" + str(test_list))
	sub_str = 'geeks'
	i, j = 0, 5
	res = list(filter(lambda ele: ele[i: j] == sub_str, test_list))
	print(""Filtered list : "" + str(res))
"
Write a function that returns a dictionary sorted ascending by its values	"def ascending_dict_valuesort(d: dict):
	return {key: val for key, val in sorted(d.items(), key=lambda ele: ele[1])}
"
return thrice of their sum	"def sum_thrice(x, y, z):
	sum1 = x + y + z
	if x == y == z:
        sum1 = sum1 * 3
	return sum1


print(sum_thrice(1, 2, 3))
print(sum_thrice(3, 3, 3))
"
Write a program to calculate Binary Ones Complement of a number	"a = 60


c = ~a
print(""Binary Ones Complement"", c)
"
obtained should be printed in a comma-separated sequence	"items = []
for i in range(100, 401):
	s = str(i)
	if (int(s[0]) % 2 == 0) and (int(s[1]) % 2 == 0) and (int(s[2]) % 2 == 0):
        items.append(s)
print("","".join(items))
"
write Program to demonstrate conditional operator	"a, b = 10, 20
min = a if a < b else b
print(min)
"
Replacing a string with another string	"word = ""Hello World""
replace = ""Bye""
input = ""Hello""
after_replace = word.replace(input, replace)
print(f""String ater replacement: {after_replace}"")
"
and digits	"

print(""Input a string: "")
str1 = input()


no_of_letters, no_of_digits = 0, 0


for c in str1:
	if (c >= 'a' and c <= 'z') or (c >= 'A' and c <= 'Z'):
        no_of_letters += 1
	if c >= '0' and c <= '9':
        no_of_digits += 1


print(""Input string is: "", str1)
print(""Total number of letters: "", no_of_letters)
print(""Total number of digits: "", no_of_digits)
"
write a progarm to adds every 3rd number in a list	"from functools import reduce
input_list = [x for x in range(10)]
reduce(
	(lambda x, y: x + y),
	[val for idx, val in enumerate(input_list) if(idx + 1) % 3 == 0])
"
"an odd number""."	"def checkValue(n):
	if n % 2 == 0:
        print(""It is an even number"")
	else:
        print(""It is an odd number"")
"
Write a python program to print dimension in centimeter to feet	"cm = 50
feet = 0.0328 * cm
print(""The dimension in feet "", round(feet, 2))
"
write a python function to locate the rightmost value less than x	"def find_lt(a, x):
	from bisect import bisect_left
	i = bisect_left(a, x)
	if i:
        return a[i - 1]
	raise ValueError
"
of numbers between 1 and 20 (both included).	"squaredNumbers = map(lambda x: x**2, range(1, 21))
print(squaredNumbers)
"
Write a function to Filter String with substring at specific position	"def f_substring():
	test_list = ['program ', 'to', 'filter', 'for', 'substring']
	print(""The original list is : "" + str(test_list))
	sub_str = 'geeks'
	i, j = 0, 5
	res = list(filter(lambda ele: ele[i: j] == sub_str, test_list))
	print(""Filtered list : "" + str(res))
"
write a python program to print the words in a sentence in reverse order	"sentence = 'the quick brown fox'
words = sentence.split(' ')
words.reverse()
print(' '.join(words))
"
39. Python Program to Find Factorial of Number Using Recursion	"def recur_factorial(n):
	if n == 1:
        return n
	else:
        return n * recur_factorial(n - 1)


num = 7
"
print it : Example : # Input ['a', 'b', 'c', 'd']# Output abcd	"

s = ['a', 'b', 'c', 'd']
x = """".join(s)
print(x)
"
comprehension.	"import random


print(random.choice([i for i in range(201) if i % 5 == 0 and i % 7 == 0]))
"
is input by console.	"def NumGenerator(n):
	for i in range(n + 1):
        if i % 5 == 0 and i % 7 == 0:
            yield i
"
write a python function to print a given string n times	"def printn(string, n):
	print(string * n)
"
write a python function to flatten one level of nesting	"def flatten(list_of_lists):
	from itertools import chain
	return chain.from_iterable(list_of_lists)
"
write a python program to add two lists using map and lambda	"nums1 = [1, 2, 3]
nums2 = [4, 5, 6]
result = map(lambda x, y: x + y, nums1, nums2)
print(list(result))
"
sentence	"sentence = 'this is my sentence and i will write it my way'
maxlength = 3
result = [word for word in sentence.split(' ') if len(word) <= minlength]
"
43 write a to time a python script	"from datetime import datetime
start = datetime.now()
do_something(): ...
print(datetime.now() - start)
"
Write a Python Program to prints Common Letters in Two Input Strings	"

s1 = 'python'
s2 = 'schoolofai'
a = list(set(s1) & set(s2))
print(""The common letters are:"")
for i in a:
	print(i)
"
Write a python program to print positive Tuples in List.	"
test_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)]


print(""The original list is : "" + str(test_list))


res = [sub for sub in test_list if all(ele >= 0 for ele in sub)]


print(""Positive elements Tuples : "" + str(res))
"
combinations of the string in lexicographic sorted order.	"def get_ordered_combinations_with_replacement(string, k):
	[print(''.join(x))
     for x in combinations_with_replacement(sorted(string), int(k))]
"
returns it	"def invert_dict(dictionary):
	inverted_dict = {value: key for key, value in dictionary.items()}
	return inverted_dict
"
write a python program to find string in a list and print it	"list1 = [1, 2.0, 'have', 'a', 'nice', 'day']


s = 'nice'
for i in list1:
	if i == s:
        print(f'{s} is  present in the list')
"
Write a Python function to add two given lists using map and lambda.	"def add_two_lists(list_1, list_2):
	result = map(lambda x, y: x + y, list_1, list_2)
	return result
"
88 write a program to find variance of a dataset	"

def variance(X):
	mean = sum(X) / len(X)
	tot = 0.0
	for x in X:
        tot = tot + (x - mean)**2
	return tot / len(X)
"
write a python function to read a CSV file and print its content	"def read_csv(filename):
	import csv
	with open(filename, newline='') as f:
        reader = csv.reader(f)
        for row in reader:
            print(row)
"
Tuple List	"
test_list = [(5, 4, 2), (1, 3, 4), (5, 7, 8), (7, 4, 3)]
print(""The original list is : "" + str(test_list))
K = 1
s = []
for i in range(0, len(test_list) - 1):
	s.append(abs(test_list[i][K] - test_list[i + 1][K]))
print(s)
"
Number	"

def collatz(n):
	while n > 1:
        print(n, end=' ')
        if (n % 2):
            
            n = 3 * n + 1
        else:
            
            n = n // 2
	print(1, end='')
"
Write a Python Program to print all the Divisors of an Integer	"

n = 60
print(""The divisors of the number are:"")
for i in range(1, n + 1):
	if(n % i == 0):
        print(i)
"
occurrences of the character 'c' with  (X, c) in the string.	"def compress(text):
	from itertools import groupby
	for k, g in groupby(text):
        print(""({}, {})"".format(len(list(g)), k), end="" "")
"
Numbers from 1 to N	"

maximum = int(input("" Please Enter the Maximum Value : ""))


for number in range(1, maximum + 1):
	if(number % 2 == 0):
        print(""{0}"".format(number))
"
write a python program to remove punctuations in a string	"punctuations = '''!()-[]{};:'""\\,<>./?@#$%^&*_~'''
string = ''.join(e for e in d if e not in punctuations)
"
Sort the string list alphabetically	"

thislist = [""orange"", ""mango"", ""kiwi"", ""pineapple"", ""banana""]
thislist.sort()
print(f""Sorted List:{thislist}"")
"
30 get rid of all null values in array python	"mylist = [1, 2, 3, '', 4]
mylist = [i for i in mylist if i]
"
Write a Python program to Find the day of week of a given date	"from datetime import datetime
given_date = datetime(2020, 7, 26)
print(given_date.strftime('%A'))
"
42 write a program to swap two variables	"x = input('Enter value of x: ')
y = input('Enter value of y: ')

temp = x
x = y
y = temp

print('The value of x after swapping: {}'.format(x))
print('The value of y after swapping: {}'.format(y))
"
Write a program that adds the square of two numbers and prints it	"

a = 32
b = 21


result = a**2 + b**2
print(result)
"
Create a plain list	"

def plainlist(n=100000):
	my_list = []
	for i in range(n):
        if i % 5 == 0:
            my_list.append(i)
	return my_list
"
13. Python Program to Find the Largest Among Three Numbers	"

num1 = 10
num2 = 14
num3 = 12


if (num1 >= num2) and (num1 >= num3):
	largest = num1
elif (num2 >= num1) and (num2 >= num3):
	largest = num2
else:
	largest = num3


print(""The largest number is"", largest)
"
write a python program to swap two numbers	"a = 1
b = 2
a, b = b, a
"
Write a function to calculate volume of Triangular Pyramid	"def volumeTriangular(a, b, h):
	return (0.1666) * a * b * h
"
the shorter one	"def print_shorter(str1, str2):
	if (len(str1) > len(str2)):
        print(str2)
	else:
        print(str1)
"
write a python program to add two matrices and print them	"X = [[1, 2, 3],
     [4, 5, 6],
     [7, 8, 9]]


Y = [[9, 8, 7],
     [6, 5, 4],
     [3, 2, 1]]


result = [[X[i][j] + Y[i][j] for j in range
           (len(X[0]))] for i in range(len(X))]


for r in result:
	print(r)
"
write a python program to multiply three numbers	"num1 = 1.5
num2 = 6.3
num3 = -2.3
product = num1 * num2 * num3
print(f'Product: {product}')
"
write a python function to return the largest value in a dictionary	"

def dic_largest(dic):
	return max(dic.values())
"
write a python function to convert a list to string	"s = ['I', 'want', 4, 'apples', 'and', 18, 'bananas']
listToStr = ' '.join(map(str, s))
print(listToStr)
"
above given lists.	"set1 = set([1, 3, 6, 78, 35, 55])
set2 = set([12, 24, 35, 24, 88, 120, 155])
set1 &= set2
li = list(set1)
print(li)
"
first row.	"import csv


def read_csv_length(csv_file_name, delimiter_pattern):
	if(os.path.exists(csv_file_name) == False):
        print(""Destination File doesn't exist"")
        return
	with open(csv_file_name, newline='') as csvfile:
        csv_reader = csv.reader(csvfile, delimiter=delimiter_pattern)
        csv_list = list(csv_reader)
        return len(csv_list), len(csv_list[0])
"
provided by the user	"def sortwords(my_str):
	words = my_str.split()
	words.sort()
	return ' '.join(words)
"
Write a lambda function to to give character from it's ascii value	"

def ascii(a): return chr(a)
"
5. python function to strip vowels from a string	"def strip_vowel_str(str):
	vowels = ['a', 'e', 'i', 'o', 'u']
	return """".join([x for x in str if x not in vowels])
"
write a program to increment number which is at end of string	"

import re

str1 = 'count001'


res = re.sub(r'[0-9]+$',
             lambda x: f""{str(int(x.group())+1).zfill(len(x.group()))}"",
             str1)

print(""Incremented numeric String : "" + str(res))
"
"remembering only the element just seen."""	"def unique_justseen(iterable, key=None):
	import operator
	from itertools import groupby
	
	
	return map(next, map(operator.itemgetter(1), groupby(iterable, key)))
"
vale for a radius	"

class CirclePerimeter():
	def __init__(self, radius):
        self.radius = radius

	def perimeter(self):
        return 2 * 3.14 * self.radius


a = 6
obj = CirclePerimeter(a)
print(""Perimeter of rectangle:"", obj.perimeter())
"
13 how to add a blank line in python	"print("""")
"
45 write a program to display the calender	"

yy = int(input(""Enter year: ""))
mm = int(input(""Enter month: ""))

print(calendar.month(yy, mm))
"
Write a Python Program to Find the Second Largest Number in a List	"a = [11, 22, 33, 44, 55, 66, 77, 88, 99]
a.sort()
print(""Second largest element is:"", a[n - 2])
"
13. Python Program to Find the Largest Among Three Numbers	"

num1 = 10
num2 = 14
num3 = 12


if (num1 >= num2) and (num1 >= num3):
	largest = num1
elif (num2 >= num1) and (num2 >= num3):
	largest = num2
else:
	largest = num3


print(""The largest number is"", largest)
"
8 write a python function to accept a key, value pair and return a dictionary	"

def create_dictionary(key, value):
	return {str(key): value}
"
element from both lists in the pair	"firstList = [2, 3, 4, 5, 6, 7, 8]
secondList = [4, 9, 16, 25, 36, 49, 64]
result = zip(firstList, secondList)
resultSet = set(result)
print(resultSet)
"
10. python function to find the area of a circle	"def circle_area(r):
	return 22 / 7 * r**2
"
Write a function that finds a list is homogeneous	"

def homoList(li):
	res = True
	for i in li:
        if not isinstance(i, type(li[0])):
            res = False
            break
	return res
"
write a python function to add two user provided numbers and return the sum	"

def add_two_numbers(num1, num2):
	sum = num1 + num2
	return sum
"
Write a Python function to return octal value of a given integer	"def int_to_oct(a):
	return oct(a)
"
write a python program to print only dictionary keys as list	"

d = {""john"": 40, ""peter"": 45}
print(list(d.keys()))
"
write a python program to swap two numbers and print it	"num1 = 5
num2 = 10
temp = num1
num1 = num2
num2 = temp
print(""The value of num1 after swapping: {}"".format(num1))
print(""The value of num2 after swapping: {}"".format(num2))
"
Write a python  program to print only even length words in a sentence	"

def printEvenLengthWords(s):
	s = s.split(' ')
	for word in s:
        if len(word) % 2 == 0:
            print(word)
"
tuple or string	"def check_inst_tup_str(obj):
	if isinstance(obj, set):
        return ""set""
	elif isinstance(obj, tuple):
        return ""tuple""
	else:
        return ""unknown""


check_inst_tup_str({1})
"
Write a function that returns derivative of log of a function	"def derivative_log(x: float) -> float:
	return (1 / x)
"
Write a function to merge two lists element wise	"

def merge_lists(l1: list, l2: list):
	return list(zip(l1, l2))
"
Write a Python Program to print the LCM of Two Numbers	"

def lcm(a, b):
	lcm.multiple = lcm.multiple + b
	if((lcm.multiple % a == 0) and (lcm.multiple % b == 0)):
        return lcm.multiple
	else:
        lcm(a, b)
	return lcm.multiple


lcm.multiple = 0
a = 4
b = 7
if(a > b):
	LCM = lcm(b, a)
else:
	LCM = lcm(a, b)


print(LCM)
"
they add up to a specific target.	"input_array = [2, 7, 11, 15]
target = 26
result = []


for i, num in enumerate(input_array):
	for j in range(i + 1, len(input_array)):
        print(i, j)
"
Write a Python function to calculate factorial of a given no using class	"

class Fact:
	def __init__(self):
        self.cache = {0: 1, 1: 1}

	def fact(self, n):
        if n not in self.cache:
            self.cache[n] = self.fact(n - 1) * n
        return self.cache[n]
"
number and its cube in each tuple	"
list1 = [1, 2, 5, 6]

res = [(val, pow(val, 3)) for val in list1]

print(res)
"
frequencies	"string_words = '''This assignment is of 900 marks. Each example if 9 marks.
If your example is similar to someone else, then you score less.
The formula we will use is 9/(repeated example). That means if 9 people write same example,
then you get only 1. So think different! (if examples are mentioned here and in the sample file, you will score less)'''
word_list = string_words.split()
word_freq = [word_list.count(n) for n in word_list]
print(""Pairs (Words and Frequencies:\n {}"".format(
	str(list(zip(word_list, word_freq)))))
"
or tuple or string and returns the new sorted sequence	"def selection_sort(list_to_be_sorted):
	sorted_list = list_to_be_sorted[:]
	for i in range(len(sorted_list)):
        new_min = sorted_list[i]
        new_min_old_place = i
        for j in range(i + 1, len(sorted_list)):
            if new_min > sorted_list[j]:
                new_min = sorted_list[j]
                new_min_old_place = j
        old_val = sorted_list[i]
        sorted_list[i] = new_min
        sorted_list[new_min_old_place] = old_val
	return sorted_list
"
numerical range.	"

import random
for x in range(6):
	print('{:04.3f}'.format(random.uniform(x, 100)), end=' ')
"
Write a function to remove punctuation from the string	"def r_punc():
	test_str = ""end, is best : for ! Nlp ;""
	print(""The original string is : "" + test_str)
	punc = r'!()-[]{};:\, <>./?@#$%^&*_~'
	for ele in test_str:
        if ele in punc:
            test_str = test_str.replace(ele, """")
	print(""The string after punctuation filter : "" + test_str)
"
Python program to find the  difference between two times	"

def difference(h1, m1, h2, m2):

	t1 = h1 * 60 + m1
	t2 = h2 * 60 + m2
	if (t1 == t2):
        print(""Both are same times"")
        return
	else:
        diff = t2 - t1
	h = (int(diff / 60)) % 24
	m = diff % 60
	print(h, "":"", m)


difference(7, 20, 9, 45)
difference(15, 23, 18, 54)
difference(16, 20, 16, 20)
"
and print the result	"from itertools import permutations
import string
s = ""GEEK""
a = string.ascii_letters
p = permutations(s)


d = []
for i in list(p):
	if (i not in d):
        d.append(i)
        print(''.join(i))
"
6 write a program to remove empty List from List using list comprehension	"test_list = [5, 6, [], 3, [], [], 9]
print(""The original list is : "" + str(test_list))
res = [ele for ele in test_list if ele != []]
print(""List after empty list removal : "" + str(res))
"
list elements into sublists and print the output.	"from itertools import groupby


def pack_consecutive_duplicates(l_nums):
	return [list(group) for key, group in groupby(l_nums)]


n_list = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]
print(""Original list:"")
print(n_list)
print(""\nAfter packing consecutive duplicates of the said list elements into sublists:"")
print(pack_consecutive_duplicates(n_list))
"
write a python function to load pickle data from a file	"def load_pickle_data(pickle_file):
	import pickle
	with open(pickle_file, 'rb') as f:
        data = pickle.load(f)
	return data
"
Write a python program to print positive Tuples in List.	"
test_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)]


print(""The original list is : "" + str(test_list))


res = [sub for sub in test_list if all(ele >= 0 for ele in sub)]


print(""Positive elements Tuples : "" + str(res))
"
input parameters.	"n = int(input())
sum = 0.0
for i in range(1, n + 1):
	sum += float(float(i) / (i + 1))
print(sum)
"
23 function to intern a sentence.	"def check_intern(a, b):
	if a is b:
        print(f'{a} and {b} is interned by Python')
	else:
        print(f'{a} and {b} is not interned by Python')
"
61 implementation of local cooncept	"def inner_show():
	x = 'Hola'

	def inner():
        nonlocal x
        x = 'Hola World'
        print(f'Inner function x is {x}')
	inner()
	print(f'outer function x is {x}')
"
Write a Python program to check whether an element exists within a tuple.	"tuplex = (""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e"")
print(""e"" in tuplex)
"
54 Write a python function that implements the ReLU function	"

def relu(arr):
	return [x if x > 0 else 0 for x in arr]
"
Write a Python Program to Check if a Number is an Armstrong Number	"

def amstrong_check(n):
	a = list(map(int, str(n)))
	b = list(map(lambda x: x**3, a))
	if(sum(b) == n):
        return True
	else:
        return False
"
Write a python program to print odd numbers in given range	"lower = int(input(""Enter the lower limit for the range:""))
upper = int(input(""Enter the upper limit for the range:""))
for i in range(lower, upper + 1):
	if(i % 2 != 0):
        print(i)
"
write a python function to convert a user provided date to iso representation	"

from datetime import datetime


def to_iso_date(d):
	return d.isoformat()
"
string encoded by utf-8.	"s = input()
u = unicode(s, ""utf-8"")
print(u)
"
Write a Python function to find the maximum ODD number from a given list	"def odd_max_checker(list1):
	maxnum = 0
	for num in list1:
        if num % 2 != 0:
            if num > maxnum:
                maxnum = num
	return maxnum
"
characters and print the output.	"from itertools import groupby


def modified_encode(alist):
	def ctr_ele(el):
        if len(el) > 1:
            return [len(el), el[0]]
        else:
            return el[0]
	return [ctr_ele(list(group)) for key, group in groupby(alist)]


n_list = [1, 1, 2, 3, 4, 4, 5, 1]
print(""Original list:"")
print(n_list)
print(""\nList reflecting the modified run-length encoding from the said list:"")
print(modified_encode(n_list))
"
Write a python function to generate random number between 2 integers	"def random_number(a, b):
	import random
	return random.randint(a, b)
"
Write a python program to Count and print the Number of Words in a Text File	"

fname = input(""Enter file name: "")

num_words = 0

with open(fname, 'r') as f:
	for line in f:
        words = line.split()
        num_words += len(words)
print(""Number of words:"")
print(num_words)
"
Write a program that will determine the object type	"

def typeIdentifier(object):
	return f'object type : {type(object)}'
"
console and generate a list and a tuple which contains every number.	"values = input()
l = values.split("","")
t = tuple(l)
print(l)
print(t)
"
27 write a function to convert any number to its equivalent fractions.	"def no_to_fraction(no_):
	from fractions import Fractions
	return Fractions(no_)
"
44 Define a python function that can read text file from a given URL	"import requests


def read_data(url):
	data = requests.get(url).text
	return data
"
letters in a string	"sentence = 'The Quick Brown Fox'
lowercase = 0
uppercase = 0
for c in sentence:
	if c.isupper():
        uppercase += 1
	elif c.islower():
        lowercase += 1
	else:
        pass
print(f'Lowercase: {lowercase}, Uppercase: {uppercase}')
"
write a function to check if a upper case letter exists in a given string	"

def check_upper(str1):

	for char in str1:
        k = char.isupper()
        if k == True:
            return True
	if(k != 1):
        return False
"
write a python program to check if a number is prime or not	"

num = 407


if num > 1:
	for i in range(2, num):
        if (num % i) == 0:
            print(num, ""is not a prime number"")
            print(i, ""times"", num // i, ""is"", num)
            break
	else:
        print(num, ""is a prime number"")
else:
	print(num, ""is not a prime number"")
"
return boolean value	"

def pair_sum(x, k):

	for idx in range(len(x)):
        for ix in range(idx + 1, len(x)):
            if x[idx] + x[ix] == k:
                return True
	return False


test_list = [[1, 5, 3, 6], [4, 3, 2, 1], [7, 2, 4, 5], [6, 9, 3, 2]]

print(""The original list is : "" + str(test_list))

k = 8

res = [ele for ele in test_list if pair_sum(ele, k)]

print(""Filtered Rows : "" + str(res))
"
Write a function that returns lowercase string	"def str_lowercase(s: str):
	return s.lower()
"
write a Python program to convert Python objects into JSON strings.	"

python_dict = {""name"": ""David"", ""age"": 6, ""class"": ""I""}
json_dict = json.dumps(python_dict, sort_keys=True, indent=4)
print(f""json dict : {json_dict}"")
"
38 how to read a specific line from a text file in python	"line = open(""file.txt"", ""r"").readlines()[7]
"
first number by second number and return the quotient and remainder	"def divide_first_number_by_second(num1, num2):
	return (num1 // num2), (num1 % num2)
"
dictionary input	"def flatten_dict(dd, separator='_', prefix=''):
	flattened = {prefix + separator + k if prefix else k: v
                 for kk, vv in dd.items()
                 for k, v in flatten_dict(vv, separator, kk).items()
                 } if isinstance(dd, dict) else {prefix: dd}
	return flattened
"
print it	"

test_dict = {'Gfg': 4, 'is': 2, 'best': 3, 'for': 6, 'geeks': 1}
print(""The original dictionary : "" + str(test_dict))
d = {}
K = 2
for keys, values in test_dict.items():
	if values > K:
        d.update({keys: 2 * values})
	else:
        d.update({keys: values})
print(d)
"
write a python function that returns the input list sorted in ascending order	"def sort_ascending(list_to_be_sorted):
	return sorted(list_to_be_sorted)
"
multidimensional list row by row.	"a = [[2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20]]
for record in a:
	print(record)
"
write a python program to add and print two user defined list using map	"input_string = input(""Enter a list element separated by space "")
list1 = input_string.split()
input_string = input(""Enter a list element separated by space "")
list2 = input_string.split()
list1 = [int(i) for i in list1]
list2 = [int(i) for i in list2]
result = map(lambda x, y: x + y, list1, list2)
print(list(result))
"
elements within the list	"s1 = eval(input(""Enter list ""))
mean = sum(s1) / len(s1)
print(""Mean of sample is : "" + str(mean))
"
write a python program that multiplies a tuple n times and print the result	"my_tuple = (1, 2, 3)
n = 3
print(my_tuple * 3)
"
Write a python Program to Flatten and print a List	"

a = [[1, [[2]], [[[3]]]], [[4], 5]]
def flatten(l): return sum(map(flatten, l), []) if isinstance(l, list) else [l]


print(flatten(a))
"
Bubble sort in python	"list1 = [1, 5, 3, 4]


for i in range(len(list1) - 1):
	for j in range(i + 1, len(list1)):
        if(list1[i] > list1[j]):
            temp = list1[i]
            list1[i] = list1[j]
            list1[j] = temp
print(""Bubble Sorted list: "", list1)
"
given pattern	"

import re


def match(pattern, string):
	if re.match(pattern, string):
        return True
	return False
"
75 write a program to find the power of a number	"

a = 10
b = 3


result = a**b


print(a, "" to the power of "", b, "" is = "", result)
"
repeatedly until the result has a single digit.	"def add_digits(num):
	return (num - 1) % 9 + 1 if num > 0 else 0
"
whose each element is 0.	"array = [[[0 for col in range(8)] for col in range(5)] for row in range(3)]
print(array)
"
3, leave it unchanged.	"def add_string(str1):
	length = len(str1)

	if length > 2:
        if str1[-3:] == 'ing':
            str1 += 'ly'
	else:
        str1 += 'ing'

	return str1
"
write a python function to convert a user provided string to camelcase	"

from re import sub


def camel(s):
	s = sub(r""(_|-)+"", "" "", s).title().replace("" "", """")
	return ''.join([s[0].lower(), s[1:]])
"
Using list comprehension	"test_list = [([1, 2, 3], 'gfg'), ([5, 4, 3], 'cs')]
print(""The original list : "" + str(test_list))
res = [(tup1, tup2) for i, tup2 in test_list for tup1 in i]
print(""The list tuple combination : "" + str(res))
"
write a Python program to print even Numbers in a List	"

list1 = [10, 21, 4, 45, 66, 93]
even_nos = [num for num in list1 if num % 2 == 0]
print(""Even numbers in the list: "", even_nos)
"
in Sublist	"

a = [['A', 34], ['B', 21], ['C', 26]]
for i in range(0, len(a)):
	for j in range(0, len(a) - i - 1):
        if(a[j][1] > a[j + 1][1]):
            temp = a[j]
            a[j] = a[j + 1]
            a[j + 1] = temp
"
and values	"

dctA = {'a': 1, 'b': 2, 'c': 3}
dctB = {'b': 4, 'c': 3, 'd': 6}


for item in dctA.items() & dctB.items():
	print(item)
"
tuples Using map() + split() + tuple()	"

test_list = ['4, 1', '3, 2', '5, 3']


print(""The original list : "" + str(test_list))


res = [tuple(map(int, sub.split(', '))) for sub in test_list]


print(""The list after conversion to tuple list : "" + str(res))
"
in a dictionary	"input_dict = {'key_a': 10, 'kEy': 2, 'Key_B': 13}
for key in list(input_dict.keys()):
	new_key = key[0].upper() + key[1:-1] + key[-1].upper()
	input_dict[new_key] = input_dict[key]
	if key != new_key:
        del input_dict[key]
"
54 write a  program to find the sum of natural numbers	"

num = int(input(""Enter a number: ""))

if num < 0:
	print(""Enter a positive number"")
else:
	sum = 0
	
	while(num > 0):
        sum += num
        num -= 1
	print(""The sum is"", sum)
"
write a program to print 5 random numbers between 100 and 200	"import random
print(random.sample(range(100, 200), 5))
"
Counting total Digits in a string	"str1 = ""abc4234AFde""
digitCount = 0
for i in range(0, len(str1)):
	char = str1[i]
	if(char.isdigit()):
        digitCount += 1
print('Number of digits: ', digitCount)
"
common elements in two lists	"

def common_member(a, b):
	a_set = set(a)
	b_set = set(b)

	if (a_set & b_set):
        print(a_set & b_set)
	else:
        print(""No common elements"")
"
12  write a python function to return the third last element of an array	"

def return_last(arr):
	return arr[-3]
"
57 function to any implementation	"def any_imp(a):
	return any(a)
"
Write a Python program to print the number words in a sentence	"test_string = ""India is my country""
res = len(test_string.split())
print(f""The number of words in string are : {res}"")
"
Given a Python list. Turn every item of a list into its square	"aList = [1, 2, 3, 4, 5, 6, 7]
aList = [x * x for x in aList]
print(aList)
"
repetition number of characters of a given string and print the output.	"from itertools import product


def all_repeat(str1, rno):
	chars = list(str1)
	results = []
	for c in product(chars, repeat=rno):
        results.append(c)
	return results
	print(all_repeat('xyz', 3))
"
string format	"from datetime import datetime
given_date = datetime(2020, 2, 25)
string_date = given_date.strftime(""%Y-%m-%d %H:%M:%S"")
print(string_date)
"
Python program to calculate area of a circle	"

def area(a):
	from math import pi
	r = float(input(""Input the radius of the circle : ""))
	return ""The area of the circle with radius "" +        str(r) + "" is: "" + str(pi * a ** 2)


print(area(5))
"
Write a python function to append or extend two lists	"

def list_op(l1, l2, op):
	if(op == 'append'):
        return(l1.append(l2))
	else:
        return(l1.extend(l2))


a = ['Hey', 'you', 'there!']
b = [1, 2, 3]
op = 'e'


list_op(a, b, op)


print(a)
"
number is divisible by every digit it contains.	"def divisible_by_digits(start_num, end_num):
	return [n for n in range(start_num, end_num + 1)
            if not any(map(lambda x: int(x) == 0 or n % int(x) != 0, str(n)))]
"
write a  program for Deleting entire Dictionary	"Dict = {1: 'Geeks', 'name': 'For', 3: 'Geeks'}


Dict.clear()
print(""\nDeleting Entire Dictionary: "")
print(Dict)
"
Write a program to print the length of a list	"

my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9]


print(len(my_list))
"
write a python function to pad a user provided number to specified length	"

def pad_number(n, l):
	return str(n).zfill(l)
"
removed item	"my_list1 = [4, 3, 2, 9, 10, 44, 1, 9, 12]
index = 4
print(f""Sum of two list:,{my_list1.pop(index)}"")
"
Unpacking of iterables	"val1, *vals = [1, 2, 3, 4, 5]
print('val1:', val1)
print('vals:', vals)
"
35. write a Python function To Calculate Volume OF Cylinder	"def volume(r, h):
	vol = 22 / 7 * r * r * h
	return vol
"
collection of distinct numbers	"def permute(nums):
	result_perms = [[]]
	for n in nums:
        new_perms = []
        for perm in result_perms:
            for i in range(len(perm) + 1):
                new_perms.append(perm[:i] + [n] + perm[i:])
                result_perms = new_perms
	return result_perms
"
write a python function to generate wordcloud on given text or file	"

def get_word(data):
	if not (isinstance(data, str) or os.path.isfile(data)):
        raise TypeError(""Text must be string or a File object."")
	from wordcloud import WordCloud, STOPWORDS
	import matplotlib.pyplot as plt
	stopwords = set(STOPWORDS)
	if os.path.isfile(data):
        with open(data, 'r') as f:
            data = f.read()

	data = ' '.join(data.lower().split(' '))
	wordcloud = WordCloud(width=400, height=400,
                          background_color='white',
                          stopwords=stopwords,
                          min_font_size=15).generate(data)

	
	plt.figure(figsize=(8, 8), facecolor=None)
	plt.imshow(wordcloud)
	plt.axis(""off"")
	plt.tight_layout(pad=0)

	plt.show()
"
Write a function that returns Gets the derivative of exponential of x	"def derivative_exp(x: float) -> float:
	import math
	return math.exp(x)
"
Write a function that finds a list is homogeneous	"

def homoList(li):
	res = True
	for i in li:
        if not isinstance(i, type(li[0])):
            res = False
            break
	return res
"
27 write a python funtion to execute bash commands	"subprocess.call([""sudo"", ""apt"", ""update""])
"
Write a program to extract each digit from an integer, in the reverse order	"number = 7536
while (number > 0):
	digit = number % 10
	number = number // 10
	print(digit, end="" "")
"
velocity u, time t and acceleration a	"def cal_final_velocity(initial_velocity: float,
                       accelration: float, time: float) -> float:
	return initial_velocity + accelration * time
"
a Year and print them	"

def day_occur_time(year):
	days = [""Monday"", ""Tuesday"", ""Wednesday"",
            ""Thursday"", ""Friday"", ""Saturday"",
            ""Sunday""]
	L = [52 for i in range(7)]

	pos = -1
	day = datetime.datetime(year, month=1, day=1).strftime(""%A"")
	for i in range(7):
        if day == days[i]:
            pos = i
	if calendar.isleap(year):
        L[pos] += 1
        L[(pos + 1) % 7] += 1
	else:
        L[pos] += 1

	for i in range(7):
        print(days[i], L[i])
"
following tuple to 333	"tuple1 = (11, [22, 33], 44, 55)
tuple1[1][1] = 333
print(tuple1)
"
a list	"def find_evennumbers(input_list):
	list_using_comp = [var for var in input_list if var % 2 == 0]
	return list_using_comp
"
Write a function to get n elements of the fibonacci series	"def fibonacci(n):
	n1, n2 = 0, 1
	count = 0

	if n <= 0:
        print('Please enter a positive integer')
	elif n == 1:
        print(""Fibonacci sequence:"")
        print(n1)
	else:
        print(""Fibonacci sequence:"")
        while count < n:
            print(n1)
            nth = n1 + n2
            
            n1, n2 = n2, nth
            count += 1
"
Python program to implement Pigeonhole Sort */	"def pigeonhole_sort(a):
	my_min = min(a)
	my_max = max(a)
	size = my_max - my_min + 1
	holes = [0] * size
	for x in a:
        assert type(x) is int, ""integers only please""
        holes[x - my_min] += 1
	i = 0
	for count in range(size):
        while holes[count] > 0:
            holes[count] -= 1
            a[i] = count + my_min
            i += 1


a = [8, 3, 2, 7, 4, 6, 8]
print(""Sorted order is : "", end="" "")
pigeonhole_sort(a)
for i in range(0, len(a)):
	print(a[i], end="" "")
"
write a python function to print odd numbers between user provided ranges	"

def odd_numbers(lower, upper):
	for i in range(lower, upper + 1):
        if(i % 2 != 0):
            print(i)
"
Write a function that returns the exponential value of the input	"def exp(x) -> float:
	import math
	return math.exp(x)
"
write a python program Convert KM/H to MPH	"kmh = 50
mph = 0.6214 * kmh
print(""Speed:"", kmh, ""KM/H = "", mph, ""MPH"")
"
Write a function that generates fibbonacci series	"def Fibonacci(n: int) -> int:
	if n == 1:
        fibonacci = 0
	elif n == 2:
        fibonacci = 1
	else:
        fibonacci = Fibonacci(n - 1) + Fibonacci(n - 2)
	return fibonacci
"
20 function to print calendar	"def show_mm_calendar(mm: int, yyyy: int):
	import calendar
	print(calendar.month(yyyy, mm))
"
Alternate cases in String	"test_str = ""geeksforgeeks""
res = """"
for idx in range(len(test_str)):
	if not idx % 2:
        res = res + test_str[idx].upper()
	else:
        res = res + test_str[idx].lower()
print(res)
"
5 write a function to print the count of divisor using list comprehension	"def divisor_using_list(num: int):
	
	if isinstance(num, int):
        count = [i for i in range(1, num + 1) if not num % i]
        print(f'Number of divisor is {count}')
	else:
        raise ValueError('Invalid Input')
"
Write a Python Program to Remove and print the Duplicate Items from a List	"

a = [2, 3, 8, 9, 2, 4, 6]
b = set()
unique = []
for x in a:
	if x not in b:
        unique.append(x)
        b.add(x)
print(""Non-duplicate items:"")
print(unique)
"
write a python class called Person that has a name property	"class Person:
	def __init__(self, name):
        self.name = name
"
access first characters in a string	"word = ""Hello World""
letter = word[0]
print(f""First Charecter in String:{letter}"")
"
concatenation and return concatenated number as integer	"def concat_two_numbers(num1, num2):
	combined_num = str(num1) + str(num2)
	return int(combined_num)
"
list of dictionaries.	"test_list = [{""Gfg"": 3, ""b"": 7},
             {""is"": 5, 'a': 10},
             {""Best"": 9, 'c': 11}]
K = 'Best'
res = [sub[K] for sub in test_list if K in sub][0]
print(""The extracted value : "" + str(res))
"
Write a function that returns a dictionary sorted ascending by its values	"def ascending_dict_valuesort(d: dict):
	return {key: val for key, val in sorted(d.items(), key=lambda ele: ele[1])}
"
Write a Python function to return hexadecimal value of a given integer	"def int_to_hex(a):
	return hex(a)
"
given number	"my_list = [11, 45, 74, 89, 132, 239, 721, 21]


num = 3
result = list(filter(lambda x: (x % num == 0), my_list))


print(f""Numbers divisible by {num} are {result}"")
"
write a python function to return the length of user provided string in bytes	"

def byte_size(s):
	return len(s.encode('utf-8'))
"
prints the set	"my_set = {1, 2, 3}
my_list = [4, 5, 6]
my_set.update(my_list)
print(my_set)
"
numbers to negative numbers and returns the new list	"def make_all_negative(nums):
	return [num if num < 0 else -num for num in nums]
"
write a function to find uncommon words from two strings	"

def UncommonWords(str1, str2):

	count = {}

	for word in str1.split():
        count[word] = count.get(word, 0) + 1

	for word in str2.split():
        count[word] = count.get(word, 0) + 1

	return [word for word in count if count[word] == 1]
"
that each digit of the number is an even number.	"

values = []
for i in range(1000, 9999):
	s = str(i)
	if (int(s[0]) % 2 == 0) and (int(s[1]) % 2 == 0) and (int(s[2]) % 2 == 0) and (int(s[3]) % 2 == 0):
        values.append(s)
"
and print the result	"s = ""GEEK""
a = string.ascii_letters
p = permutations(s)


d = []
for i in list(p):
	if (i not in d):
        d.append(i)
        print(''.join(i))
"
on speend and given time	"def cal_distance(time: float, speed: float) -> float:
	return time * speed
"
Write a python program to Count and print the Number of Words in a Text File	"

fname = input(""Enter file name: "")

num_words = 0

with open(fname, 'r') as f:
	for line in f:
        words = line.split()
        num_words += len(words)
print(""Number of words:"")
print(num_words)
"
44 write a program to convert Celsius to Fahrenheit	"

celsius = float(input('Enter temperature in Celsius: '))
fahrenheit = (celsius * 1.8) + 32
print(
	'%0.1f  Celsius is equal to %0.1f degree Fahrenheit' %
	(celsius, fahrenheit))
"
using euclidian Algorithm	"def compute_hcf(x, y):
	while(y):
        x, y = y, x % y
	return x
"
ar[i]+ar[j] is divisible by k in a data list	"def divisible_sum_pairs(arr, k):
	count = 0
	n = len(arr)
	for i in range(n - 1):
        j = i + 1
        while j < n:
            if ((arr[i] + arr[j]) % k) == 0:
                count += 1
            j += 1
	return count


import math
"
write a python function to remove duplicate items from the list	"def remove_duplicatesinlist(lst):
	return len(lst) == len(set(lst))
"
number or not	"def power_checker(a, b):
	import math
	s = math.log(a, b)
	p = round(s)
	if (b**p) == a:
        return f'{a} is the power of {b}.'
	else:
        return f'{a} is NOT the power of {b}.'
"
Write a python program to reverse a list and print it.	"def Reverse(lst):
	return [ele for ele in reversed(lst)]


lst = [10, 11, 12, 13, 14, 15]
print(Reverse(lst))
"
numbers. Also, display the factors.	"def smallest_multiple(n):
	if (n <= 2):
        return n
	i = n * 2
	factors = [number for number in range(n, 1, -1) if number * 2 > n]
	print(factors)

	while True:
        for a in factors:
            if i % a != 0:
                i += n
                break
            if (a == factors[-1] and i % a == 0):
                return i
"
write a program to print length of a string	"

str1 = ""great way to learn!""
print(len(str1))
"
number via input paramters.	"def fibo(n):
	if n == 0:
        return 0
	elif n == 1:
        return 1
	else:
        return f(n - 1) + f(n - 2)
"
write a python function to count how many times the predicate is true	"def quantify(iterable, pred=bool):
	return sum(map(pred, iterable))
"
m at height h	"def cal_pe(mass: float, height: float) -> float:
	g = 9.8
	return (mass * g * height)
"
length 10	"

list1 = [5] * 10


print(list1)
"
Write a python function to count the number of Words in a Text File	"def check_words():
	fname = input(""file name: "")
	num_words = 0
	with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            num_words += len(words)
	print(""Number of words = "", num_words)
"
Numbers and print the result	"

number1 = input("" Please Enter the First Number: "")
number2 = input("" Please Enter the second number: "")


sum = float(number1) + float(number2)
print('The sum of {0} and {1} is {2}'.format(number1, number2, sum))
"
using rfind() + join()	"test_str = ""GFG is good""
print(""The original string is : "" + test_str)
rep_str = ""best""
res = test_str[: test_str.rfind(' ')] + ' ' + rep_str
print(""The String after performing replace : "" + res)
"
breadth & height as input	"def cuboid_volume(length, breadth, height):
	volume = length * breadth * height
	return volume
"
Write a function to remove empty list from a list using list comprehension	"def removeEmptyList(li):
	res = [ele for ele in li if ele != []]
	return res
"
write a Python program to Break a list into chunks of size N in Python	"

l = [1, 2, 3, 4, 5, 6, 7, 8, 9]
n = 4
x = [l[i:i + n] for i in range(0, len(l), n)]
print(x)
"
write a python Program to Solve Quadratic Equation	"a = 1
b = 5
c = 6
d = (b**2) - (4 * a * c)
sol1 = (-b - cmath.sqrt(d)) / (2 * a)
sol2 = (-b + cmath.sqrt(d)) / (2 * a)
print('The solution are {0} and {1}'.format(sol1, sol2))
"
19 Write a python function to remove i'th character from a string	"

def remove(string, i):
	a = string[: i]

	b = string[i + 1:]

	return a + b
"
each tuple element	"userInput = input(""Enter a tuple:"")
x = map(lambda x: len(x), tuple(x.strip() for x in userInput.split(',')))
print(list(x))
"
[12,24,35,70,88,120,155].	"li = [12, 24, 35, 70, 88, 120, 155]
li = [x for x in li if x % 5 != 0 and x % 7 != 0]
print(li)
"
Write a function that returns derivative of sine value of the input	"def derivative_sin(x: float) -> float:
	import math
	return math.cos(x)
"
86 Write a Python program to find the second smallest number in a list.	"def second_smallest(numbers):
	if (len(numbers) < 2):
        return numbers
	if ((len(numbers) == 2) and (numbers[0] == numbers[1])):
        return numbers
	dup_items = set()
	uniq_items = []
	for x in numbers:
        if x not in dup_items:
            uniq_items.append(x)
            dup_items.add(x)
	uniq_items.sort()
	return uniq_items[1]
"
Write a function that sorts list of numbers and returns top element	"

def biggest_no(l: list) -> int:
	sorted(l)
"
Write a Python function which returns the Modulo of the two given numbers.	"def mod(m, n):
	return m % n
"
write a function that merges two dictionaries	"def merge_dictionaries(dict1, dict2):
	return {**dict1, **dict2}
"
85 write a program to print perfect numbers from the given list of integers	"

def checkPerfectNum(n):
	i = 2
	sum = 1

	while(i <= n // 2):
        if (n % i == 0):
            sum += i

        i += 1
        if sum == n:
            print(n, end=' ')


if __name__ == ""__main__"":

	print(""Enter list of integers: "")
	list_of_intgers = list(map(int, input().split()))

	print(""Given list of integers:"", list_of_intgers)

	print(""Perfect numbers present in the list is: "")
	for num in list_of_intgers:
        checkPerfectNum(num)
"
array whose each element is 0.	"array = [[[0 for col in range(8)] for col in range(5)] for row in range(3)]
print(array)
"
Write a Python function to return cullen number	"def cullen_number(n):
	if n >= 0:
        return n * 2 ** n + 1
"
in it	"def num_of_words(st):
	return len(st.split())
"
write a python function to add two user provided numbers and return the sum	"def add_two_numbers(num1, num2):
	sum = num1 + num2
	return sum
"
Write a function to return the lateral surface area of a cone	"def cal_cone_lateral_surf_area(height, radius):
	pi = 3.14
	return pi * radius * (((height**2) + (radius**2))**(1 / 2))
"
Write a Python program to get the Fibonacci series between 0 to 50.	"x, y = 0, 1
while y < 50:
	print(y)
	x, y = y, x + y
"
23. Python Program To Display Powers of 2 Using Anonymous Function	"
terms = 10
result = list(map(lambda x: 2 ** x, range(terms)))
print(""The total terms are:"", terms)
for i in range(terms):
	print(""2 raised to power"", i, ""is"", result[i])
"
Value list and print it	"

test_dict = {""Gfg"": [4, 7, 5], ""Best"": [8, 6, 7], ""is"": [9, 3, 8]}
print(""The original dictionary is : "" + str(test_dict))
K = 1


s = []
for key, value in test_dict.items():
	s.append(value[K])
print(s)
"
Write a function to remove empty list from a list using list comprehension	"def removeEmptyList(li):
	res = [ele for ele in li if ele != []]
	return res
"
Adding Element to a List	"animals = ['cat', 'dog', 'rabbit']
animals.append('guinea pig')
print('Updated animals list: ', animals)
"
39 function to create a dictionary of mirror of letter.	"def letter_mirror():
	import string
	letter = string.ascii_lowercase
	rvr_letter = letter[::-1]
	dict_char = dict(zip(letter, rvr_letter))
	return dict_char
"
write a program to print count of vowels in a string	"st = ""ammaradil""
vowle = ['a', 'e', 'i', 'o', 'u']
count = 0


for s in st:
	if s in vowle:
        count = count + 1


print(""Count"", count)
"
write a python function to get dot product between two lists of numbers	"def dot_product(a, b):
	return sum(e[0] * e[1] for e in zip(a, b))
"
Write a function to Find the size of a Tuple in Python without garbage values	"Tuple = (10, 20)


def sizeOfTuple(tup):
	return f'Size of Tuple: {str(Tuple.__sizeof__())} bytes'
"
Driver Program	"

print(Fibonacci(9))
"
thea and distance for axis of rotation to place force applied is r	"def cal_torque(force: float, theta: float, r: float) -> float:
	import math
	return force * r * math.sin(theta)
"
write Python3 program for illustration of values() method of dictionary	"

dictionary = {""raj"": 2, ""striver"": 3, ""vikram"": 4}
print(dictionary.values())
"
Write a Python function to return binary value of a given integer	"def int_to_bin(a):
	return bin(a)
"
representing the lengths of the corresponding words	"

lst = [""ab"", ""cde"", ""erty""]
length_list = list(map((lambda element: len(element)), lst))
print(str(length_list))
"
Given a Python list. Turn every item of a list into its square	"aList = [1, 2, 3, 4, 5, 6, 7]
aList = [x * x for x in aList]
print(aList)
"
many times as its count.	"from collections import Counter
c = Counter(p=4, q=2, r=0, s=-2)
print(list(c.elements()))
"
Write a Python Program to Take in Two Strings and Print the Larger String	"

string1 = 'python'
string2 = 'theschoolofai'
count1 = 0
count2 = 0
for i in string1:
	count1 = count1 + 1
for j in string2:
	count2 = count2 + 1
if(count1 < count2):
	print(""Larger string is:"")
	print(string2)
elif(count1 == count2):
	print(""Both strings are equal."")
else:
	print(""Larger string is:"")
	print(string1)
"
Write a function that removes all special characters	"def clean_str(s):
	import re
	return re.sub('[^A-Za-z0-9]+', '', s)
"
and f(0)=1	"def f(n):
	if n == 0:
        return 0
	else:
        return f(n - 1) + 100


n = int(input(""Enter Number: ""))
print(""f(n-1)+100 = "", f(n))
"
charged particles with charge q1 and q2 at a distance d apart	"def cal_electrostatic_force(q1, q2, d):
	k = 9 * (10**9)
	return (k * q1 * q2) / (d**2)
"
characters that have even indexes.	"s = raw_input()
s = s[::2]
print(s)
"
write a python program to convert lower string to UPPERCASE	"

a = 'string'
print(f'convert lowercase to uppercase:{a.upper()}')
"
Write a python function to compute 5/0 using try except	"try:
	print(""Division = {}"".format(5 / 0))
except ZeroDivisionError:
	print(""5 cannot be divided by O"")
"
using replace() to create eval friendly string	"temp = test_str.replace(',', '+').replace('x', '*')
"
parallel in a given list	"def cal_total_res_in_parallel(res_list: list) -> float:
	return sum([1 / r for r in res_list])
"
58 python program to find ascii value of a character	"

c = input(""Enter a character: "")
print(""The ASCII value of '"" + c + ""' is"", ord(c))
"
square the number	"import random


min_value = 10
max_value = 20


def square(x):
	return x * x


def get_square_of_random_number(min_value, max_value):
	return square(random.randint(min_value, max_value))


get_square_of_random_number(min_value, max_value)
"
dictionary and value of the second dictionary	"test_dict1 = {""tsai"": 20, ""is"": 36, ""best"": 100}
test_dict2 = {""tsai2"": 26, ""is2"": 19, ""best2"": 70}
keys1 = list(test_dict1.keys())
vals2 = list(test_dict2.values())
res = dict()
for idx in range(len(keys1)):
	res[keys1[idx]] = vals2[idx]
print(""Mapped dictionary : "" + str(res))
"
23 Write a python program to filter similar case strings and print it	"

x = []
for i in test_list:
	if i.islower() or i.isupper():
        print(x.append(i))

print(x)
"
write a program to print number of characters in a string	"

str1 = 'It is a glorious day'


res = len(str1)


print(""The number of characters in string are : "", str(res))
"
Write a  python program to print the last element of a list	"list1 = ['p', 'r', 'o', 'b', 'e']


print(list1[-1])
"
Write a Python program to convert a list of tuples into a dictionary.	"l = [(""x"", 1), (""x"", 2), (""x"", 3), (""y"", 1), (""y"", 2), (""z"", 1)]
d = {}
for a, b in l:
	d.setdefault(a, []).append(b)
print(d)
"
Write a function to find the perimeter of a rectangle	"

def rectangle_perimeter(l, b):
	return 2 * (l + b)
"
order. The number is input from the user.	"

num = int(input(""Enter a number with multiple digit: ""))
n = 0
while num > 0:
	a = num % 10
	num = num - a
	num = num / 10
	print(int(a), end="""")
	n = n + 1
"
write a python program to print binary right shift on a variable	"a = 60
binary_right_shift = a >> 2
print(binary_right_shift)
"
40 write a function to return the nth fibonacci in python	"def Fibonacci(n):
	if n < 0:
        print(""Incorrect input"")
	elif n == 1:
        return 0
	elif n == 2:
        return 1
	else:
        return Fibonacci(n - 1) + Fibonacci(n - 2)
"
dictionaries. Print the combined dictionary.	"test_list = [{'tsai': [1, 5, 6, 7], 'good': [9, 6, 2, 10], 'CS': [4, 5, 6]},
             {'tsai': [5, 6, 7, 8], 'CS': [5, 7, 10]},
             {'tsai': [7, 5], 'best': [5, 7]}]
res = dict()
for inner_dict in test_list:
	for inner_list in inner_dict:
        if inner_list in res:
            res[inner_list] += (inner_dict[inner_list])
        else:
            res[inner_list] = inner_dict[inner_list]
print(""The concatenated dictionary : "" + str(res))
"
Write a Python program to sort list.	"numbers = [1, 3, 4, 2]
numbers.sort()
print(numbers)
"
Write a functin that returns the LCM of two input numbers	"

def lcm(a, b):
	if a > b:
        min_ = a
	else:
        min_ = b
	while True:
        if min_ % a == 0 and min_ % b == 0:
            break
        min_ += 1
	return min_
"
write a program to replace multiple words with a single word	"

str1 = 'CoffeeDay is best for coffee and having long conversations'

word_list = [""best"", 'long']

repl_word = 'good'

res = ' '.join(
	[repl_word if idx in word_list else idx for idx in str1.split()])


print(""String after multiple replace : "" + str(res))
"
write a python function to return an iterator over the last n items	"def tail(n, iterable):
	from collections import deque
	return iter(deque(iterable, maxlen=n))
"
Fibonacci series up to 100	"n = 100
result = []
a, b = 0, 1
while b < n:
	result. append(b)
	a, b = b, a + b
final = result
print(f""Fibonacci series up to 100:{final}"")
"
write a python program for creating the thread	"

def print_time(threadName, delay):
	count = 0
	while count < 5:
        time.sleep(delay)
        count += 1
        print(""%s: %s"" % (threadName, time.ctime(time.time())))
"
write a python function to convert a number from decimal to octal	"
def decToOctal(n):
	octalNum = [0] * 100
	i = 0
	while (n != 0):
        octalNum[i] = n % 8
        n = int(n / 8)
        i += 1
	for j in range(i - 1, -1, -1):
        print(octalNum[j], end="""")
"
write a python function to return the factorial of a number	"def fact(n):
	if n == 1:
        return n
	else:
        return n * fact(n - 1)
"
Write a function to merge meeting times given everyone's schedules	"

def merge_ranges(meetings):
	sorted_meetings = sorted(meetings)

	merged_meetings = [sorted_meetings[0]]

	for current_meeting_start, current_meeting_end in sorted_meetings[1:]:
        last_merged_meeting_start, last_merged_meeting_end = merged_meetings[-1]

        if (current_meeting_start <= last_merged_meeting_end):
            merged_meetings[-1] = (last_merged_meeting_start,
                                   max(last_merged_meeting_end,
                                       current_meeting_end))
        else:
            merged_meetings.append(
                (current_meeting_start, current_meeting_end))

	return merged_meetings
"
included)	"l = []
for i in range(2000, 3201):
	if (i % 7 == 0) and (i % 5 != 0):
        l.append(str(i))


print(','.join(l))
"
write a python function that takes in two numbers and returns their HCF	"def hcf(num1, num2):
	smaller = num1 if num1 < num2 else num2
	for i in range(1, smaller + 1):
        if (num1 % i == 0) and (num2 % i == 0):
            hcf = i
	return hcf
"
Write a function to print a string by repeating it n times	"

def print_repeatnstring(text: str, n: int) -> str:
	return text * n
"
write a python program to find N largest elements from a list	"l = [1000, 298, 3579, 100, 200, -45, 900]
n = 4
l.sort()
print(l[-n:])
"
We have to use the global keyword!	"

def my_func():
	global var
	print(var)  
	var = 'locally changed'  


var = 'global'
my_func()
print(var)
"
write a python function that would reverse the given string	"def reverse_string(str_to_be_reversed):
	return str_to_be_reversed[::-1]
"
Split Strings	"word = ""Hello World""
ksplit = word.split(' ')
print(f""Splited Strings: {ksplit}"")
"
Write a python function to find minimum edit distance between words given	"

def minDistance(word1, word2):
	m = len(word1)
	n = len(word2)

	if m * n == 0:
        return m + n

	d = [[0] * (n + 1) for _ in range(m + 1)]
	for i in range(m + 1):
        d[i][0] = i

	for j in range(n + 1):
        d[0][j] = j

	for i in range(m + 1):
        for j in range(n + 1):
            left = d[i - 1][j] + 1
            down = d[i][j - 1] + 1
            left_down = d[i - 1][j - 1]
            if word1[i - 1] != word2[j - 1]:
                left_down += 1
            d[i][j] = min(left, down, left_down)

	return d[m][n]
"
"string is ""yes"" or ""YES"" or ""Yes"", otherwise print ""No""."	"s = input()
if s == ""yes"" or s == ""YES"" or s == ""Yes"":
	print(""Yes"")
else:
	print(""No"")
"
100 and 200 inclusive.	"import random
print(random.sample(range(100), 5))
"
Write a Python function for Binary Search	"def binary_search(l, num_find):
	
	start = 0
	end = len(l) - 1
	mid = (start + end) // 2
	found = False
	position = -1
	while start <= end:
        if l[mid] == num_find:
            found = True
            position = mid
            break
        if num_find > l[mid]:
            start = mid + 1
            mid = (start + end) // 2
        else:
            end = mid - 1
            mid = (start + end) // 2
	return (found, position)
"
write a python function that returns the lcm of two numbers	"def lcm(x, y):
	if x > y:
        greater = x
	else:
        greater = y

	while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1

	return lcm
"
is is a palindrome or not	"

def isPalindrome(s):
	return s == s[::-1]
"
Write a function to multiplies two lists element wise only if numbers are odd	"def adds_listoddelements(l1: list, l2: list):
	return [i * j for i, j in zip(l1, l2) if i * j % 2 == 1]
"
28 to get a random element from an array in python	"import random
list_ = [1, 2, 3, 4]
random.choice(list_)
"
Write a python function to check if a number given is a Armstrong number	"

def isArmstrong(x):
	n = 0
	while (x != 0):
        n = n + 1
        x = x // 10
	temp = x
	sum1 = 0

	while (temp != 0):
        r = temp % 10
        sum1 = sum1 + r ** n
        temp = temp // 10

	return (sum1 == x)
"
Write a Python Program to Convert Binary to Gray Code	"

def binary_to_gray(n):
	
	n = int(n, 2)
	n ^= (n >> 1)

	return bin(n)[2:]
"
Split Strings	"word = ""Hello World""
ksplit = word.split(' ')
print(f""Splited Strings: {ksplit}"")
"
write Python Program to print the Union of two Lists	"l1 = [11, 22, 33, 44]
l2 = [55, 66, 77, 88]
union = list(set().union(l1, l2))
print('The Union of two lists is:', union)
"
given by path	"path = '/home'
import os
print(os.listdir(path))
"
simultaneously and adds corresponding values, print the result	"f_list = [1, 2, 3, 4]
s_list = [2, 3, 4, 5]
res = [f_n + s_n for f_n, s_n in zip(f_list, s_list)]
print(f""{res}"")
"
Write a python program to Count the Occurrences of a Word in a Text File	"

fname = input(""Enter file name: "")
word = 'the'
k = 0

with open(fname, 'r') as f:
	for line in f:
        words = line.split()
        for i in words:
            if(i == word):
                k = k + 1
print(f""Frequency of Occurrences of the word {a} is:"")
print(k)
"
9 sort a dictionary	"mydictionary: {1: 1, 7: 2, 4: 2, 3: 1, 8: 1}
sortedDictionary = sorted(mydictionary.keys())
"
3. python function to return the squares of a list of numbers	"def sq(n):
	return [i**2 for i in range(n)]
"
Write a python function to find the L.C.M. of two input number	"

def compute_lcm(x, y):

	
	if x > y:
        greater = x
	else:
        greater = y

	while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1

	return lcm
"
Write a Python function to check whether the input letter is a vowel or not	"def check_vowel_or_not(letter):
	result = str(letter) in ""aeiou""
	return result
"
lines after making all characters in the sentence capitalized.	"lines = []
while True:
	s = input()
	if s:
        lines.append(s.upper())
	else:
        break


for sentence in lines:
	print(sentence)
"
keys.	"def printDict():
	d = dict()
	for i in range(1, 21):
        d[i] = i**2
	print(d)
"
write a python function to count number of times a function is called	"def counter(fn):
	count = 0

	def inner(*args, **kwargs):
        nonlocal count
        count += 1
        print(f'Function {fn.__name__} was called {count} times.')
        return fn(*args, **kwargs)
	return inner
"
From given string replace each punctuation with #	"from string import punctuation


str1 = '/*Jon is @developer & musician!!'
replace_char = '#'
for char in punctuation:
	str1 = str1.replace(char, replace_char)


print(""The strings after replacement : "", str1)
"
and Multiple of 5 in a Given Range of Numbers	"lower = 1
upper = 100
for i in range(lower, upper + 1):
	if(i % 7 == 0 and i % 5 == 0):
        print(i)
"
list of dictionaries.	"test_list = [{""Gfg"": 3, ""b"": 7},
             {""is"": 5, 'a': 10},
             {""Best"": 9, 'c': 11}]
K = 'Best'
res = [sub[K] for sub in test_list if K in sub][0]
print(""The extracted value : "" + str(res))
"
Write a python program to remove 11 and 18 from a list. Print the final list.	"
list1 = [11, 5, 17, 18, 23, 50]

unwanted_num = {11, 18}

list1 = [ele for ele in list1 if ele not in unwanted_num]

print(""New list after removing unwanted numbers: "", list1)
"
write a python function to repeat a given string n times	"def repeat_string(string, frequency):
	return string * frequency
"
write a python program to Convert Celsius To Fahrenheit	"celsius = 37.5
fahrenheit = (celsius * 1.8) + 32
print(f'{celsius} degree Celsius is equal to {fahrenheit} degree Fahrenheit')
"
to tuple	"def compare_list_tuple():
	from timeit import timeit
	import random
	l = [random.randint(1, 100) for _ in range(100)]
	tu = tuple(l)
	list_time = timeit(stmt='max(l)', globals=locals(), number=1)
	tup_time = timeit(stmt='max(tu)', globals=locals(), number=1)
	if list_time > tup_time:
        print('Hence proved')
	else:
        raise ValueError('You did something Wrong')
"
his name:	"name = input(""Input your name: "")
print(""HELLO "", name)
"
print all values except the first 5 elements in the list.	"def printList():
	li = list()
	for i in range(1, 21):
        li.append(i**2)
	print(li[5:])
"
Reusing global variable names and UnboundLocalErrors	"def my_func():
	print(var)


var = 'global'
my_func()
"
Write a program to find and print if a number is a Harshad number	"

num = 156
rem = sum = 0

n = num
while(num > 0):
	rem = num % 10
	sum = sum + rem
	num = num // 10


if(n % sum == 0):
	print(str(n) + "" is a harshad number"")
else:
	print(str(n) + "" is not a harshad number"")
"
length, then the function should print al l strings line by line.	"def max_len_str(s1, s2):
	len1 = len(s1)
	len2 = len(s2)
	if len1 > len2:
        print(s1)
	elif len2 > len1:
        print(s2)
	else:
        print(s1)
        print(s2)
"
Write a python program to print the Sum of digits of a number	"n = 12345
q = 0
while(n > 0):
	r = n % 10
	q = q + r
	n = n // 10
print(""Sum of digits is: "" + str(q))
"
write a program to remove even numbers from a list using list comprehensions	"nums = [1, 2, 3, 4, 5, 6, 7, 8]
no_even_nums = [i for i in nums if i % 2 == 1]
"
write a Python Program to Check if a Number is Positive, Negative or 0	"

num = 10
if num > 0:
	print(""Positive number"")
elif num == 0:
	print(""Zero"")
else:
	print(""Negative number"")
"
Write a function that splits the elements of string	"def split_elements(s: str, seperator) -> list:
	return s.split(seperator)
"
function. The list is: [1,2,3,4,5,6,7,8,9,10].	"li = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
evenNumbers = filter(lambda x: x % 2 == 0, li)
print(evenNumbers)
"
64 write a program  to convert string to dictionary and print it	"
str = "" Jan = January; Feb = February; Mar = March""

dictionary = dict(subString.split(""="") for subString in str.split("";""))

print(dictionary)
"
50 write a python function to find the median on an array of numbers	"def median(arr):

	if len(arr) == 1:
        return arr[0]

	else:
        arr = sorted(arr)
        a = arr[0:round(len(arr) / 2)]
        b = arr[len(a):len(arr)]
	if len(arr) % 2 == 0:
        return (a[len(a) - 1] + b[0]) / 2
	else:
        return a[len(a) - 1]
"
write a python function to find leftmost value greater than x	"def find_gt(a, x):
	from bisect import bisect_right
	i = bisect_right(a, x)
	if i != len(a):
        return a[i]
	raise ValueError
"
"""roundrobin('ABC', 'D', 'EF') --> A D E B F C"""	"def roundrobin(*iterables):
	from itertools import islice, cycle
	
	num_active = len(iterables)
	nexts = cycle(iter(it).__next__ for it in iterables)
	while num_active:
        try:
            for next in nexts:
                yield next()
        except StopIteration:
            
            num_active -= 1
            nexts = cycle(islice(nexts, num_active))
"
write a python program to iterate through a string using for loop	"h_letters = []


for letter in 'human':
	h_letters.append(letter)


print(f""{h_letters}"")
"
write a python program to print all Prime numbers in an Interval	"start = 11
end = 25

for i in range(start, end):
	if i > 1:
        for j in range(2, i):
            if(i % j == 0):
                break
	else:
        print(i)
"
Write a python function to Compute LCM of two input number	"def compute_lcm(x, y):
	if x > y:
        greater = x
	else:
        greater = y
	while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1
	return lcm
"
dictionary and value of the second dictionary	"test_dict1 = {""tsai"": 20, ""is"": 36, ""best"": 100}
test_dict2 = {""tsai2"": 26, ""is2"": 19, ""best2"": 70}
keys1 = list(test_dict1.keys())
vals2 = list(test_dict2.values())
res = dict()
for idx in range(len(keys1)):
	res[keys1[idx]] = vals2[idx]
print(""Mapped dictionary : "" + str(res))
"
the string in lexicographic sorted order.	"def get_ordered_combinations(string, k):
	[print(''.join(x)) for i in range(1, int(k) + 1)
     for x in combinations(sorted(string), i)]
"
as input by user	"n = int(input(""Enter the number of elements to be inserted: ""))
a = []
for i in range(0, n):
	elem = int(input(""Enter element: ""))
	a.append(elem)
avg = sum(a) / n
print(""Average of elements in the list"", round(avg, 2))
"
write a function that merges two dictionaries	"def merge_dictionaries(dict1, dict2):
	return {**dict1, **dict2}
"
write a python program to search a key in the text file	"

fname = 'sample.txt'
l = 'keyword'  
k = 0

with open(fname, 'r') as f:
	for line in f:
        words = line.split()
        for i in words:
            if(i == l):
                k = k + 1
print(""Occurrences of the letter:"", k)
"
Python program to count number 4 in the given list	"def list_count_4(nums):
	count = 0
	for num in nums:
        if num == 4:
            count = count + 1

	return count


print(list_count_4([1, 4, 6, 7, 4]))
print(list_count_4([1, 4, 6, 4, 7, 4]))
"
resistance is R and voltage is V	"def cal_current(resistance: float, voltage: float) -> float:
	return voltage / resistance
"
pythonpython by TheRubberDucky on Nov 06 2020 Donate	"def getBaseTen(binaryVal):
	count = 0

	binaryVal = binaryVal[::-1]

	for i in range(0, len(binaryVal)):
        if(binaryVal[i] == ""1""):
            count += 2**i

	return count
"
parallel in a given list	"def cal_total_cap_in_parallel(cap_list: list) -> float:
	return sum(cap_list)
"
Write a function that returns derivative of sine value of the input	"def derivative_sin(x: float) -> float:
	import math
	return math.cos(x)
"
write a python program that asks for user input and prints the given input	"a = input(""User Input"")
print(a)
"
tuples. Print the final list.	"
test_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)]
K = 1
res = [ele for ele in test_list if len(ele) != K]

print(""Filtered list : "" + str(res))
"
2. python function to return the factorial of a number	"def fact(n):
	if n == 1:
        return n
	else:
        return n * fact(n - 1)
"
write a program to print the current date and time	"from datetime import datetime
now = datetime.now()
print(now)
"
and prints it.	"test_list = [{'END': [5, 6, 5]}, {'is': [10, 2, 3]}, {'best': [4, 3, 1]}]
res = [{} for idx in range(len(test_list))]
idx = 0
for sub in test_list:
	for key, val in sub.items():
        for ele in val:
            res[idx][key] = ele
            idx += 1
        idx = 0
print(""Records after conversion : "" + str(res))
"
perimeter of a rectangle	"def calculate_rect_properties(width, height):
	return {
        'perimeter': 2 * (width + height),
        'area': width * height
	}
"
write a python function to strip punctuations from a given string	"def strip_punctuations(s):
	return s.translate(str.maketrans('', '', string.punctuation))
"
provided number	"

def multiplication_table(n):
	for i in range(1, 11):
        print(n, 'x', i, '=', n * i)
"
write a python function to convert byte to UTF-8	"def byte_to_utf8(data):
	return data.decode(""utf-8"")


print(byte_to_utf8(data=b'r\xc3\xa9sum\xc3\xa9'))


def hanoi(disks, source, auxiliary, target):
	if disks == 1:
        print('Move disk 1 from peg {} to peg {}.'.format(source, target))
        return

	hanoi(disks - 1, source, target, auxiliary)
	print('Move disk {} from peg {} to peg {}.'.format(disks, source, target))
	hanoi(disks - 1, auxiliary, source, target)
"
37. Python Program to Display Fibonacci Sequence Using Recursion	"def recur_fibo(n):
	if n <= 1:
        return n
	else:
        return(recur_fibo(n - 1) + recur_fibo(n - 2))


nterms = 10


if nterms <= 0:
	print(""Plese enter a positive integer"")
else:
	print(""Fibonacci sequence:"")
	for i in range(nterms):
        print(recur_fibo(i))
"
18 function to print the hcf of two number	"def ret_hcf(x: int, y: int):
	if x > y:
        greater = x
	else:
        greater = y
	while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1
	return int(x * y / lcm)
"
write a program to print 5 even random numbers between 10 and 100	"import random
print(random.sample([i for i in range(10, 100) if i % 2 == 0], 5))
"
write a program to convert temperature from Celsius to Fahrenheit	"

Cel = 90

Far = 9.0 / 5.0 * Cel + 32

print(""Temperature:"", Cel, ""Celsius = "", Far, "" F"")
"
velocity u, time t and acceleration a	"def cal_displacement(initial_velocity: float,
                     accelration: float, time: float) -> float:
	return initial_velocity * time + .5 * accelration * (time)**2
"
write a python program to print len of each characters	"words = ['cat', 'window', 'defenestrate']
for w in words:
	print(w, len(w))
"
between 100 and 200 inclusive.	"import random
print(random.sample([i for i in range(100, 201) if i % 2 == 0], 5))
"
write a python program to print current date and time	"import datetime
print(datetime.datetime.now())
"
write a Python Program to Convert Celsius To Fahrenheit	"

celsius = 37.5
fahrenheit = (celsius * 1.8) + 32
print(
	'%0.1f degree Celsius is equal to %0.1f degree Fahrenheit' %
	(celsius, fahrenheit))
"
example to demonstrate usage of docstring	"def greet(name):
	
	print(""Hello, "" + name + "". Good morning!"")
"
Write a Python function to check all elements of a list are the same or not	"def check_equal(a):
	return a[1:] == a[:-1]
"
write a Python program to reverse a linked list	"

class Node:

	def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:

	def __init__(self):
        self.head = None

	def reverse(self):
        prev = None
        current = self.head
        while(current is not None):
            next = current.next
            current.next = prev
            prev = current
            current = next
        self.head = prev

	def push(self, new_data):
        new_node = Node(new_data)
        new_node.next = self.head
        self.head = new_node

	def printList(self):
        temp = self.head
        while(temp):
            print(temp.data)
            temp = temp.next


llist = LinkedList()
llist.push(20)
llist.push(4)
llist.push(15)
llist.push(85)


print(""Given Linked List"")
llist.printList()
llist.reverse()
print(""\nReversed Linked List"")
llist.printList()
"
Write a function to return the curved surface area of a cone	"def cal_cone_curved_surf_area(slant_height, radius):
	pi = 3.14
	return pi * radius * slant_height
"
Write a function to return the area of an ellipse	"def cal_area_ellipse(minor, major):
	pi = 3.14
	return pi * (minor * major)
"
to get the same string	"def findRotations(str):
	tmp = str + str
	n = len(str)
	for i in range(1, n + 1):
        substring = tmp[i: i + n]
        if (str == substring):
            return i
	return n
"
write a program to find exponential of a number	"import math


number = 3


print('Exponential', math.exp(number))
"
76 Write a Python function to converting an integer to a string in any base.	"def to_string(n, base):
	conver_tString = ""0123456789ABCDEF""
	if n < base:
        return conver_tString[n]
	else:
        return to_string(n // base, base) + conver_tString[n % base]
"
Write a program to find the median among three given number	"x = 10
y = 20
z = 30
if y < x and x < z:
	print(x)
elif z < x and x < y:
	print(x)
elif z < y and y < x:
	print(y)
elif x < y and y < z:
	print(y)
elif y < z and z < x:
	print(z)
elif x < z and z < y:
	print(z)
"
Removes all items from the list	"list = [{1, 2}, ('a'), ['1.1', '2.2']]
list.clear()
print('List:', list)
"
58 Write a python program that calculates and prints the area of an ellipse	"import math


class Ellipse:
	def __init__(self, a, b):
        self.major_axis = b
        self.minor_axis = a

	def area(self):
        return math.pi * self.major_axis * self.minor_axis


ellipse = Ellipse(2, 10)
print(ellipse.area())
"
write a python program to sort using list comprehensive	"pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]
pairs.sort(key=lambda pair: pair[1])
print(pairs)
"
1), (3, 1, 2), (3, 2, 1)]	"

import itertools
print(list(itertools.permutations([1, 2, 3])))
"
write a python program to check the length of list	"

sample_list = ['a', 'b', 'c']
print(f'length of sample_list is {len(sample_list)}')
"
Write a Python Program to Take in Two Strings and Print the Larger String	"

string1 = 'python'
string2 = 'theschoolofai'
count1 = 0
count2 = 0
for i in string1:
	count1 = count1 + 1
for j in string2:
	count2 = count2 + 1
if(count1 < count2):
	print(""Larger string is:"")
	print(string2)
elif(count1 == count2):
	print(""Both strings are equal."")
else:
	print(""Larger string is:"")
	print(string1)
"
This function computes GCD	"def compute_gcd(x, y):

	while(y):
        x, y = y, x % y
	return x
"
Write a python fuction to create an empty list	"
def emptylist():
	return list()
"
write a python program to make use of modulo operator	"

print(f'modulo 15 % 4: Sol->{15 % 4}')
"
write a program to print number of characters in a string	"

str1 = 'It is a glorious day'


res = len(str1)


print(""The number of characters in string are : "", str(res))
"
Tuple and print it	"

test_tuple = (4, 5, 'Gfg', 7.7, 'Best')
print(""The original tuple : "" + str(test_tuple))
a = tuple()
data_type = int
for i in test_tuple:
	if not isinstance(i, data_type):
        a = a + (i,)
print(list(a))
"
given n input by input parameters.	"def f(n):
	if n == 0:
        return 0
	else:
        return f(n - 1) + 100
"
similar initial element. Print out the output	"

test_list = [(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)]
print(""The original list is : "" + str(test_list))

res = []
for sub in test_list:
	if res and res[-1][0] == sub[0]:
        res[-1].extend(sub[1:])
	else:
        res.append([ele for ele in sub])
res = list(map(tuple, res))

print(""The extracted elements : "" + str(res))
"
write a python function to find H.C.F of two numbers	"def compute_hcf(x, y):
	if x > y:
        smaller = y
	else:
        smaller = x
	for i in range(1, smaller + 1):
        if((x % i == 0) and (y % i == 0)):
            hcf = i
	return hcf
"
write a python function for some weird hypnosis text.	"def weird():
	import random

	def getlength(script):
        return sum((i['length'] for i in script))

	def truncate(target_length, script):
        if getlength(script) > target_length:
            script = sorted(script, key=lambda k: (
                k['priority'], -k['length']))[:-1]
            return truncate(target_length, script)
        return sorted(script, key=lambda k: k['index'])

	def as_text(script):
        return ""\n"".join([i['text'] for i in script])

	priorities_and_sentences = [
        (1, ""...now... sitting comfortably in the chair""),
        (2, ""...with your feet still flat on the ground""),
        (3, ""...back straight and head up right""),
        (2, ""...make these adjustments now if you need to""),
        (3, ""... pause..............................""),
        (1, ""...your eyes ...still ...comfortably closed""),
        (2, ""...nice and relaxed...comfortable and relaxed...""),
        (3, ""... pause.......................................""),
        (1, ""...now...I want you to notice...how heavy your head is starting to feel...""),
        (1, ""how heavy your head feels...""),
        (3, ""... pause.......................................""),
        (2, ""really noticing the weight... of your head...""),
        (3,
         ""and how much more ...comfortable...it will feel when you let your neck relaxes ...and your head begins to fall forward ...into a much more comfortable""),
	]

	scriptlist = [{'priority': j[0], 'text': j[1], 'length': len(j[1]), 'index': i} for i, j in
                  enumerate(priorities_and_sentences)]

	print(as_text(truncate(500, scriptlist)))
	print(as_text(truncate(300, scriptlist)))
	print(as_text(truncate(200, scriptlist)))
"
11 access index of a character in a string python	"foo = 'Hello'
foo.find('lo')
"
Write a function to identify if value is present inside a tuple or not	"def check_tuplevalue(l: tuple, value) -> bool:
	return value in l
"
"list Using list comprehension + ""*"" operator"	"

test_list = [(5, 6), (2, 4), (5, 7), (2, 5)]
print(""The original list is : "" + str(test_list))


sub_list = [7, 2, 4, 6]
res = [(*sub, *sub_list) for sub in test_list]
print(""The modified list : "" + str(res))
"
Write a python program to remove 11 and 18 from a list. Print the final list.	"
list1 = [11, 5, 17, 18, 23, 50]

unwanted_num = {11, 18}

list1 = [ele for ele in list1 if ele not in unwanted_num]

print(""New list after removing unwanted numbers: "", list1)
"
the list.	"import math


def bin_search(li, element):
	bottom = 0
	top = len(li) - 1
	index = -1
	while top >= bottom and index == -1:
        mid = int(math.floor((top + bottom) / 2.0))
        if li[mid] == element:
            index = mid
        elif li[mid] > element:
            top = mid - 1
        else:
            bottom = mid + 1

	return index
"
The output should output after sorting the key alphanumerically.	"freq = {}
line = raw_input()
for word in line.split():
	freq[word] = freq.get(word, 0) + 1
words = freq.keys()
words.sort()
for w in words:
	print(""%s:%d"" % (w, freq[w]))
"
threads	"import threading


def print_cube(num):
	print(""Cube: {}"".format(num * num * num))


t1 = threading.Thread(target=print_cube, args=(10,))
t2 = threading.Thread(target=print_cube, args=(10,))


t1.start()


t2.start()


t1.join()
t2.join()
"
write a python function for implementation of Bubble Sort	"

def bubbleSort(arr):
	n = len(arr)
	for i in range(n - 1):
        for j in range(0, n - i - 1):

            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]


arr = [64, 34, 25, 12, 22, 11, 90]


bubbleSort(arr)


print(f""Sorted array {arr}"")
"
values of dictionary comprising of strings only.	"def mean_key_val_diff(input_dict):
	sum_diff = 0
	for key, val in input_dict.items():
        sum_diff += abs(len(val) - len(key))
	return sum_diff / len(input_dict)
"
7 but are not a multiple of 5, between 2000 and 3200 (both included).	"

l = []
for i in range(2000, 3201):
	if (i % 7 == 0) and (i % 5 != 0):
        l.append(str(i))


print(','.join(l))
"
given binary string.	"def max_consecutive_0(input_str):
	return max(map(len, input_str.split('1')))


str1 = '111000010000110'
print(""Original string:"" + str1)
print(""Maximum length of consecutive 0’s:"")
"
Sort the list in descending order	"my_list = [4, 3, 2, 9, 10, 44, 1]
my_list.sort(reverse=True)
print(f""Descending Order list:,{my_list}"")
"
repetition number of characters of a given string and print the output.	"from itertools import product


def all_repeat(str1, rno):
	chars = list(str1)
	results = []
	for c in product(chars, repeat=rno):
        results.append(c)
	return results
	print(all_repeat('xyz', 3))
"
write a program to remove the duplicate words	"s = ""Hello world Hello""
l = s.split()
k = []
for i in l:
	if (s.count(i) > 1 and (i not in k) or s.count(i) == 1):
        k.append(i)
print(' '.join(k))
"
39. write a Python program to reverse a linked list	"

class Node:

	def __init__(self, data):
        self.data = data
        self.next = None


class LinkedList:

	def __init__(self):
        self.head = None

	def reverse(self):
        prev = None
        current = self.head
        while(current is not None):
            next = current.next
            current.next = prev
            prev = current
            current = next
        self.head = prev

	def push(self, new_data):
        new_node = Node(new_data)
        new_node.next = self.head
        self.head = new_node

	def printList(self):
        temp = self.head
        while(temp):
            print(temp.data)
            temp = temp.next


llist = LinkedList()
llist.push(20)
llist.push(4)
llist.push(15)
llist.push(85)


print(""Given Linked List"")
llist.printList()
llist.reverse()
print(""\nReversed Linked List"")
llist.printList()
"
10. Python Program to Check if a Number is Positive, Negative or 0	"num = float(input(""Enter a number: ""))
if num > 0:
	print(""Positive number"")
elif num == 0:
	print(""Zero"")
else:
	print(""Negative number"")

 
num = int(input(""Enter a number: ""))
if (num % 2) == 0:
	print(""{0} is Even"".format(num))
else:
	print(""{0} is Odd"".format(num))
"
41. Python Program to Add Two Matrices using Nested List Comprehension	"X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]


Y = [[5, 8, 1],
     [6, 7, 3],
     [4, 5, 9]]


result = [[X[i][j] + Y[i][j] for j in range(len(X[0]))] for i in range(len(X))]


for r in result:
	print(r)
"
and height h between parallel sides	"def cal_area_trapezium(a, b, h):
	return h * (a + b) / 2
"
write a python program to add title to string	"

print('ab cd-ef'.title())
"
write a program to find absoluute number of a given number	"import math


number = 34.564
fa = math.fabs(number)
print('Fabs', fa)
"
43 write a to time a python script	"start = datetime.now()
do_something(): ...
print(datetime.now() - start)
"
Write a function that returns runs a garbage collector	"def clear_memory():
	import gc
	gc.collect()
"
Write a function to add two positive integers without using the '+' operator	"def add_without_plus_operator(a, b):
	while b != 0:
        data = a & b
        a = a ^ b
        b = data << 1
	return a
"
Write a python function to print powers of 2, for given number of terms	"

def two_power(terms):
	result = list(map(lambda x: 2 ** x, range(terms)))

	print(f""The total terms are: {terms}"")
	for i in range(terms):
        print(f""2^{i} = {result[i]}"")
"
items that exist only in the first set and not in the second set	"set1 = {10, 20, 30}
set2 = {20, 40, 50}
print(set1.difference_update(set2))
"
and vice versa	"def flip_case(s):
	s = [int(ord(x)) for x in s]
	s = [x - 32 if x >= 97 else x + 32 for x in s]
	s = [chr(x) for x in s]
	return """".join(s)
"
Add week (7 days) and 12 hours to a given date	"from datetime import datetime, timedelta
given_date = datetime(2020, 3, 22, 10, 00, 00)
days_to_add = 7
res_date = given_date + timedelta(days=days_to_add, hours=12)
print(res_date)
"
comprehension	"import random
print(random.choice([i for i in range(201) if i % 5 == 0 and i % 7 == 0]))
"
write a python function that returns biggest character in a string	"

def biggest_char(string):
	if not isinstance(string, str):
        raise TypeError
	return reduce(lambda x, y: x if ord(x) > ord(y) else y, string)
"
write a program to find and print the smallest among three numbers	"
num1 = 10
num2 = 12
num3 = 14
if (num1 <= num2) and (num1 <= num3):
	smallest = num1
elif (num2 <= num1) and (num2 <= num3):
	smallest = num2
else:
	smallest = num3
print(f'smallest:{smallest}')
"
class with key generation, using cryptography module	"

class Secure:
	def __init__(self):

        key = Fernet.generate_key()
        with open(""secret.key"", ""wb"") as key_file:
            key_file.write(key)

	@staticmethod
	def load_key():

        return open(""secret.key"", ""rb"").read()

	def encrypt_message(self, message):

        key = self.load_key()
        encoded_message = message.encode()
        f = Fernet(key)
        encrypted_message = f.encrypt(encoded_message)
        print(""\nMessage has been encrypted: "", encrypted_message)
        return encrypted_message

	def decrypt_message(self, encrypted_message):

        key = self.load_key()
        f = Fernet(key)
        decrypted_message = f.decrypt(encrypted_message)
        print(""\nDecrypted message:"", decrypted_message.decode())


s = Secure()
encrypted = s.encrypt_message(""My deepest secret!"")
s.decrypt_message(encrypted)
"
time from user to print simple interest.	"principal = float(input(""Enter principal : ""))
rate = float(input(""Enter rate : ""))
time = float(input(""Enter time : ""))
simple_interest = print(f""Simple Interest : {(principal*rate*time/100)}"")
"
Combinations from the Digits	"

a = 2
b = 9
c = 5
d = []
d.append(a)
d.append(b)
d.append(c)
for i in range(0, 3):
	for j in range(0, 3):
        for k in range(0, 3):
            if(i != j & j != k & k != i):
                print(d[i], d[j], d[k])
"
Write a program to extract each digit from an integer, in the reverse order	"number = 7536
while (number > 0):
	digit = number % 10
	number = number // 10
	print(digit, end="" "")
"
Write a program to convert dictionary into JSON	"import json
data = {""key1"": ""value1"", ""key2"": ""value2""}
jsonData = json.dumps(data)
print(jsonData)
"
write a python program to print the last 3 items in a list	"my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(my_list[-3:])
"
(both included). and then the program should print the dictionary.	"n = int(raw_input())
d = dict()
for i in range(1, n + 1):
	d[i] = i * i
print(d)
"
40 write a python function that takes in a string and returns it in lowercase	"

def to_lower(s):
	return s.lower()
"
Write a python program to Count the Number of Lines in a Text File	"

fname = input(""Enter file name: "")
num_lines = 0
with open(fname, 'r') as f:
	for line in f:
        num_lines += 1
print(""Number of lines:"")
print(num_lines)
"
divisible by 5 and 7 , between 1 and 1000 inclusive.	"import random
print(random.sample([i for i in range(1, 1001) if i %
      5 == 0 and i % 7 == 0], 5))
"
write a python function to rotate the given list by n times toward left	"

def rotate(lst, offset):
	return lst[offset:] + lst[:offset]
"
write a program to concat two list	"l1 = [1, 2, 3]
l2 = [4, 5, 6]


print(f'sum : {l1 + l2}')
"
number or not	"def perfect_number_checker(num):
	i = 2
	sum = 1
	while(i <= num // 2):
        if (num % i == 0):
            sum += i
        i += 1
	if sum == num:
        return f'{num} is a perfect number'

	else:
        return f'{num} is not a perfect number'
"
the scenes using multiprocessing library	"import multiprocessing
print(multiprocessing.cpu_count())
"
write a python program to multiply three numbers and print the result	"num1 = 2
num2 = 4
num3 = 6
print(num1 * num2 * num3)
"
distance travelled in radian unit and time taken	"def cal_angular_velocity(angular_dist: float, time: float) -> float:
	return angular_dist / time
"
18 write a python program to increment numeric string by K	"

list = [""gfg"", ""234"", ""is"", ""98"", ""123"", ""best"", ""4""]
K = 6

res = []
for ele in test_list:
	if ele.isdigit():
        res.append(str(int(ele) + K))
	else:
        res.append(ele)
print(""Incremented Numeric Strings : "" + str(res))
"
51 function to print the source code of a function	"def print_so(f: ""Function name/class name/module""):
	from inspect import getsource
	print(getsource(f))
"
another nested list and print the output.	"def checkSubset(input_list1, input_list2):
	return all(map(input_list1.__contains__, input_list2))


list1 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]]
list2 = [[1, 3], [13, 15, 17]]
print(""Original list:"")
print(list1)
print(list2)
print(""\nIf the one of the said list is a subset of another.:"")
print(checkSubset(list1, list2))
"
repeatedly until the result has a single digit.	"def add_digits(num):
	return (num - 1) % 9 + 1 if num > 0 else 0
"
in a string	"dic = {}
s = ""JRR Tolkien""
for s in s:
	dic[s] = dic.get(s, 0) + 1
print(""\n"".join([""%s,%s"" % (k, v) for k, v in dic.items()]))
"
write a function to remove i-th indexed character in a given string	"

def remove_char(string, i):

	str1 = string[: i]

	str2 = string[i + 1:]

	return str1 + str2
"
write a Python program to merge two dictionaries	"

d1 = {'a': 100, 'b': 200}
d2 = {'x': 300, 'y': 200}
d = d1.copy()
d.update(d2)
print(f'merge two dictionaries:{d}')
"
lists in dictionary	"
test_dict = {'gfg': [4, 5],
             'is': [9, 7, 3, 10],
             'best': [11, 34],
             'for': [6, 8, 2],
             'geeks': [12, 24]}
print(""The original dictionary is : "" + str(test_dict))
s = []
a = 0
q = []
for key, value in test_dict.items():
	s.append(len(value))
	q.append(key)
l = []
print(s)
print(q)
for k, z in zip(q, s):
	if z == min(s):
        l.append(k)
print(l)
"
Adding Element to a List	"animals = ['cat', 'dog', 'rabbit']
animals.append('guinea pig')
print('Updated animals list: ', animals)
"
the given list and return None if the list is empty	"def largest_and_smallest(list_of_nums):
	if list_of_nums:
        return max(list_of_nums), min(list_of_nums)
	else:
        return
"
Write a function to find time for a given angle.	"def calcAngle(hh, mm):
	hour_angle = 0.5 * (hh * 60 + mm)
	minute_angle = 6 * mm
	angle = abs(hour_angle - minute_angle)
	angle = min(360 - angle, angle)
	return angle
"
Python program to print sum of digits of a 4 digit number	"def sumofdigits(num):
	x = num // 1000
	x1 = (num - x * 1000) // 100
	x2 = (num - x * 1000 - x1 * 100) // 10
	x3 = num - x * 1000 - x1 * 100 - x2 * 10
	print(""The sum of digits in the number is"", x + x1 + x2 + x3)


sumofdigits(3456)
"
in a list	"original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]
prices = [i if i > 0 else 0 for i in original_prices]
print(f""Final List:{prices}"")
"
51 write a program to print Fibonacci sequence	"

nterms = int(input(""How many terms you want? ""))
"
numbers and display the sum in reversed form.	"def reverse_sum(n1, n2):
	return int(str(int(str(n1)[::-1]) + int(str(n2)[::-1]))[::-1])
"
lists) with zeros and print the output.	"nums = []


for i in range(3):

	nums.append([])

	for j in range(2):

        nums[i].append(0)
print(""Multidimensional list:"")
print(nums)
"
result is 3x4	"result = [[0, 0, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]]
"
ax**2 + bx + c = 0	"def sum_of_roots(a: float, c: float):
	if a:
        return c / a
	else:
        return None
"
Write a function that generates fibbonacci series	"def Fibonacci(n: int) -> int:
	if n == 1:
        fibonacci = 0
	elif n == 2:
        fibonacci = 1
	else:
        fibonacci = Fibonacci(n - 1) + Fibonacci(n - 2)
	return fibonacci
"
Write a program to check whether a file/path/direcory exists or not	"file_path = ""path/here""
import os.path
os.path.exists(file_path)
"
prints a new list	"list1 = [1, 2, 3, 4, 5]
list2 = [5, 4, 3, 2, 1]
diff_list = [a - b for (a, b) in zip(list1, list2)]
print(diff_list)
"
trace of robot movement is shown as the following:	"import math
pos = [0, 0]
while True:
	s = raw_input()
	if not s:
        break
	movement = s.split("" "")
	direction = movement[0]
	steps = int(movement[1])
	if direction == ""UP"":
        pos[0] += steps
	elif direction == ""DOWN"":
        pos[0] -= steps
	elif direction == ""LEFT"":
        pos[1] -= steps
	elif direction == ""RIGHT"":
        pos[1] += steps
	else:
        pass
print(int(round(math.sqrt(pos[1]**2 + pos[0]**2))))
"
the same	"def check_tuple_same(sampleTuple):
	return all(i == sampleTuple[0] for i in sampleTuple)
"
is 0 by default.	"class Shape(object):
	def __init__(self):
        pass

	def area(self):
        return 0


class Square(Shape):
	def __init__(self, l):
        Shape.__init__(self)
        self.length = l

	def area(self):
        return self.length * self.length
"
common keys	"dict1 = {'a': 12, 'for': 25, 'c': 9}
dict2 = {'Geeks': 100, 'geek': 200, 'for': 300}
for key in dict2:
	if key in dict1:
        dict2[key] = dict2[key] + dict1[key]
	else:
        pass
"
between two vertices	"

from collections import defaultdict


class Graph:
	def __init__(self):
        self.graph = defaultdict(list)

	def addEdge(self, f, t):
        self.graph[f].append(t)

	def printEdge(self):
        for ed in list(self.graph.keys()):
            print(f""From : {ed}, To : {self.graph[ed]}"")


g = Graph()
g.addEdge(""a"", ""b"")
g.addEdge(""a"", ""e"")
g.addEdge(""b"", ""d"")
g.addEdge(""c"", ""d"")
g.addEdge(""c"", ""a"")
g.printEdge()
"
Returns the number of times the specified element appears in the list	"vowels = ['a', 'e', 'i', 'o', 'i', 'u']
count = vowels.count('i')
print('The count of i is:', count)
"
write a python program to find a string in a given phrase	"phrase = ""the surprise is in here somewhere""
print(phrase.find(""surprise""))
"
numbers, where n is the input	"def sum_first_n(n):
	return (n * (n + 1)) // 2
"
12 python print last element of list	"mylist = [0, 1, 2]
print(myList[-1])
"
write a python function to add elements of two lists	"def add_two_lists(list1, list2):
	list1 = [1, 2, 3]
	list2 = [4, 5, 6]
	sum_list = []

	for (item1, item2) in zip(list1, list2):
        sum_list.append(item1 + item2)
	return sum_list
"
Write a function that sorts list of numbers and returns top element	"

def biggest_no(l: list) -> int:
	sorted(l)
"
write a python program to filter out non-empty rows of a matrix	"

test_list = [[4, 5, 6, 7], [], [], [9, 8, 1], []]
print(f""The original list is :{test_list} "")
res = [row for row in test_list if len(row) > 0]
print(f""Filtered Matrix {res}"")
"
write a python function that returns the weighted average of numbers	"def get_weighted_average(numbers, weightage):
	return sum(x * y for x, y in zip(numbers, weightage)) / sum(weightage)
"
Abortive statements in finally blocks	"def try_finally1():
	try:
        print('in try:')
        print('do some stuff')
        float('abc')
	except ValueError:
        print('an error occurred')
	else:
        print('no error occurred')
	finally:
        print('always execute finally')


try_finally1()
"
write a python program to print common elements in two lists	"list_a = [1, 2, 3, 4, 5, 6, 7]
list_b = [2, 4, 6, 8, 10]
print(f'Common elements: { set(list_a).intersection(set(list_b)) }')
"
write a function to reverse a string	"

def reverse_string(string):
	return string[::-1]
"
write a python program to convert hexadecimal to decimal	"
def hexadecimalToDecimal(hexval):
	length = len(hexval)
	base = 1
	dec_val = 0
	for i in range(length - 1, -1, -1):
        if hexval[i] >= '0' and hexval[i] <= '9':
            dec_val += (ord(hexval[i]) - 48) * base
            base = base * 16
        elif hexval[i] >= 'A' and hexval[i] <= 'F':
            dec_val += (ord(hexval[i]) - 55) * base
            base = base * 16
	return dec_val
"
random integers number	"class RandomInt:
	

	def __init__(self):
        pass

	def __iter__(self):
        return self.RandomIntIterator(self)

	class RandomIntIterator:
        def __init__(self):
            self.count = 10

        def __iter__(self):
            return self

        def __next__(self):
            if self.count > 0:
                print(random.randint(0, 10))
                self.count -= 1
            else:
                raise StopIteration
"
statements	"def TowerOfHanoi(n, source, destination, auxiliary):
	if n == 1:
        print(""Move disk 1 from source"", source, ""to destination"", destination)
        return
	TowerOfHanoi(n - 1, source, auxiliary, destination)
	print(""Move disk"", n, ""from source"", source, ""to destination"", destination)
	TowerOfHanoi(n - 1, auxiliary, destination, source)
"
Counting total Upper Case in a string	"str1 = ""abc4234AFde""
digitCount = 0
for i in range(0, len(str1)):
	char = str1[i]
	if(char.upper()):
        digitCount += 1
print('Number total Upper Case: ', digitCount)
"
write a python program that would swap variable values	"a = 10
b = 15
a, b = b, a
"
dictionary comprehension	"
ip_str = 'Hello, have you tried our tutorial section yet?'
ip_str = ip_str.casefold()
count = {x: sum([1 for char in ip_str if char == x]) for x in 'aeiou'}
print(count)
"
write a python function to split word into chars	"def split(word):
	return [char for char in word]
"
Write a Python program to check a list is empty or not	"l = []
if not l:
	print(""List is empty"")
"
Write a Python program to reverse a tuple	"aTuple = (10, 20, 30, 40, 50)
aTuple = aTuple[::-1]
print(aTuple)
"
write a Python program to get the Cumulative sum of a list	"

list1 = [10, 20, 30, 40, 50]
new_list = []
j = 0
for i in range(0, len(list1)):
	j += list1[i]
	new_list.append(j)

print(new_list)
"
Variable	"

x = 5
y = 10


x, y = y, x
print(""x ="", x)
print(""y ="", y)
"
for the below list	"

def gaps(size):
	length = size.bit_length()
	for k in range(length - 1, 0, -1):
        yield 2**k - 1


def shell_sort(alist):
	def insertion_sort_with_gap(gap):
        for i in range(gap, len(alist)):
            temp = alist[i]
            j = i - gap
            while (j >= 0 and temp < alist[j]):
                alist[j + gap] = alist[j]
                j = j - gap
            alist[j + gap] = temp

	for g in gaps(len(alist)):
        insertion_sort_with_gap(g)


alist = [2, 3, 5, 6, 4, 5]
shell_sort(alist)
print('Sorted list: ', end='')
print(alist)
"
5 add a third dimension matrix dataset python	"x = ['2D_matrix']  
"
or	"x = [[[value1]]]  
"
using *	"print('str1 * 3 =', str1 * 3)
"
write a python program to sort tuple values	"

a = (2, 3, 1, 5)
tuple_sorted = sorted(a)
print(tuple(tuple_sorted))
"
B, but not both	"set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
print(set1.symmetric_difference(set2))
"
Write a program to calculate and print the volume of a cylinder	"r = 3
h = 5
pi = 3.14
volume = pi * (r**2) * h
print(volume)
"
sum.	"r = range(1, 201)
a = sum(r)
print(a * a - sum(i * i for i in r))
"
None, if the second number is 0	"def divide(num1, num2):
	if num2 == 0:
        return
	else:
        return num1 / num2
"
vertical height as input	"def pyramid_volume(base_area, height):
	volume = 1 / 3 * base_area * height
	return volume
"
17. Python Program to Display the multiplication Table	"num = 12


for i in range(1, 11):
	print(num, 'x', i, '=', num * i)
"
its ranges.	"input_array = [0, 1, 2, 4, 5, 7]
start = 0
result = []
while start < len(input_array):
	end = start
	while end + 1 < len(input_array) and ((input_array[end + 1] - input_array[end]) == 1):
        end = end + 1
	if end != start:
        result.append(""{0}-->{1}"".format(input_array[start], input_array[end]))
        print(result)
	else:
        result.append(""{0}"".format(input_array[start]))
        print(result)
	start = end + 1


print(result)
"
Replace punctuations with #	"replace_char = '#'


for char in punctuation:
	str1 = str1.replace(char, replace_char)


print(f""The strings after replacement : {str1}"")
"
13  write a function to calculate the mean of an array	"

def calc_mean(arr):
	sum = 0
	for i in range(len(arr)):
        sum += arr[i]
	return sum / len(arr)
"
if else for	"for i in range(5):
	if i == 1:
        print('in for')
else:
	print('in else')
print('after for-loop')
"
Write a python program to print positive Numbers in a List	"
list1 = [11, -21, 0, 45, 66, -93]

for num in list1:

	if num >= 0:
        print(num, end="" "")
"
Write a program to accept a number and print inverted star pattern	"

n = int(input(""Enter number of rows: ""))
for i in range(n, 0, -1):
	print((n - i) * ' ' + i * '*')
"
"and ""Female"" for Female class."	"class Person(object):
	def getGender(self):
        return ""Unknown""


class Male(Person):
	def getGender(self):
        return ""Male""


class Female(Person):
	def getGender(self):
        return ""Female""


aMale = Male()
aFemale = Female()
print(aMale.getGender())
print(aFemale.getGender())
"
write a python function to return the base 10 logarithm of a number	"def get_natural_log_value(i):
	import math
	return(math.log10(i))
"
Arrange string characters such that lowercase letters should come first	"str1 = ""PyNaTive""
lower = []
upper = []
for char in str1:
	if char.islower():
        lower.append(char)
	else:
        upper.append(char)
sorted_string = ''.join(lower + upper)
print(sorted_string)
"
Write function for performing heapsort on a list of numbers given	"

def heapify(nums, heap_size, root_index):
	largest = root_index
	left_child = (2 * root_index) + 1
	right_child = (2 * root_index) + 2

	if left_child < heap_size and nums[left_child] > nums[largest]:
        largest = left_child

	if right_child < heap_size and nums[right_child] > nums[largest]:
        largest = right_child

	if largest != root_index:
        nums[root_index], nums[largest] = nums[largest], nums[root_index]
        heapify(nums, heap_size, largest)


def heap_sort(nums):
	n = len(nums)

	for i in range(n, -1, -1):
        heapify(nums, n, i)

	
	for i in range(n - 1, 0, -1):
        nums[i], nums[0] = nums[0], nums[i]
        heapify(nums, i, 0)
"
write a function to rotate string right by a given length	"

def rotate_right(input, d):

	Rfirst = input[0: len(input) - d]
	Rsecond = input[len(input) - d:]
	return (Rsecond + Rfirst)
"
43 Define a function which returns the current working directory	"import os


def get_cwd():
	return os.getcwd()
"
Remove special symbols/Punctuation from a given string	"import string


str1 = ""/*Jon is @developer & musician""
new_str = str1.translate(str.maketrans('', '', string.punctuation))
print(""New string is "", new_str)
"
Write a python program to print Words lengths in String	"test_string = ""India is my country""
res = list(map(len, test_string.split()))
print(""The list of words lengths is : "" + str(res))
"
Check if the key exists or not in JSON	"import json


studentJson = """"""{
	""id"": 1,
	""name"": ""john wick"",
	""class"": 8,
	""percentage"": 75,
	""email"": ""jhon@pynative.com""
}""""""


print(""Checking if percentage key exists in JSON"")
student = json.loads(studentJson)
if ""percentage"" in student:
	print(""Key exist in JSON data"")
	print(student[""name""], ""marks is: "", student[""percentage""])
else:
	print(""Key doesn't exist in JSON data"")
"
write a program to convert list to tuple	"l = ['a', 4, 5]
print(f'tuple:{tuple(l)}')
"
Write a function to compute 5/0 and use try/except to catch the exceptions.	"def throws():
	return 5 / 0


try:
	throws()
except ZeroDivisionError:
	print(""division by zero!"")
except Exception:
	print('Caught an exception')
finally:
	print('In finally block for cleanup')
"
Write a program that will determine the object type	"

def typeIdentifier(object):
	return f'object type : {type(object)}'
"
Write a function to return the perimeter of a rectangle	"def cal_perimeter_rect(length, bredth):
	return 2 * (length + bredth)
"
write a python function to return an iterator over the last n items	"def tail(n, iterable):
	from collections import deque
	return iter(deque(iterable, maxlen=n))
"
write a python function for bitwise division with given number of shifts	"def bit_div(n, shift):
	return n >> shift
"
Write a function to return the area of triangle by heros formula	"def cal_triangle_area(a: float, b: float, c: float) -> float:
	if a or b or c:
        s = (a + b + c) / 2
        if s > a and s > b and s > c:
            area = (s * (s - a) * (s - b) * (s - c))**(1 / 2)
            return round(area, 2)
        else:
            return None
	return None
"
write a program to find sum of elements in list	"total = 0
print(f'sum: {sum([total + x for x in [1, 2, 3, 4, 5]])}')
"
100 write a python program to extract Keys with specific Value Type	"

test_dict = {'gfg': 2, 'is': 'hello', 'best': 2, 'for': {'1': 3}, 'geeks': 4}

print(""The original dictionary is : "" + str(test_dict))

targ_type = int

res = []
for key, val in test_dict.items():
	if isinstance(val, targ_type):
        res.append(key)

print(""The extracted keys : "" + str(res))


if __name__ == '__main__':
	string = ""SchoolofAI""
	i = 5
	print(remove(string, i))
"
principle amount, rate of interest and time is given	"def simple_interest(p, r, t):
	si = (p * r * t) / 100
	return si
"
Find the middle element of a random number list	"my_list = [4, 3, 2, 9, 10, 44, 1]
print(""mid value is "", my_list[int(len(my_list) / 2)])
"
strings. Print the original and final lists.	"
test_list = ['gfg', '	', ' ', 'is', '			', 'best']

print(""The original list is : "" + str(test_list))

res = [ele for ele in test_list if ele.strip()]

print(""List after filtering non-empty strings : "" + str(res))
"
Write a function to calculate the density given mass and volume	"def cal_density(mass, volume):
	return (mass / volume)
"
random integers in ranges a and b	"

import random


n = 10
a = 1
b = 100


rand = [random.randint(a, b) for i in range(n)]
print(f'list : {rand}')
"
Write a python function to multiply all values in a list	"
def multiplyList(myList):
	result = 1
	for x in myList:
        result = result * x
	return result
"
write a python program to clone a list	"a = [1, 2, 3]
b = a[:]
"
write a python function to return count of number of vowels in a sentence	"def count_vowels(sentence):
	count = 0
	for letter in sentence:
        if letter in ""aeiouAEIOU"":
            count += 1
	return count
"
write a python program to print bitwise XOR operation	"a = 60
b = 13
a_xor_b = a ^ b
print(a_xor_b)
"
Write a Python program to typecast given input to float	"num = float(input(""Input a value: ""))
print(num)
"
write a function to find uncommon words from two strings	"

def UncommonWords(str1, str2):

	count = {}

	for word in str1.split():
        count[word] = count.get(word, 0) + 1

	for word in str2.split():
        count[word] = count.get(word, 0) + 1

	return [word for word in count if count[word] == 1]
"
write a python function to print the binary value of a decimal number	"def print_binary(dec):
	print(bin(dec))
"
positive integers.	"

def gcd(x, y):
	gcd1 = 1

	if x % y == 0:
        return y

	for k in range(int(y / 2), 0, -1):
        if x % k == 0 and y % k == 0:
            gcd1 = k
            break
	return gcd1


print(gcd(12, 17))
print(gcd(4, 6))
"
write a python program to print 5 random integers between 10 and 20	"import random
print(random.sample(range(10, 20), 5))
"
check if the number of terms is valid	"if nterms <= 0:
	print(""Please enter a positive integer"")
elif nterms == 1:
	print(""Fibonacci sequence upto"", nterms, "":"")
	print(n1)
else:
	while count < nterms:
        
        fab_list.append(n1)
        nth = n1 + n2
        
        n1 = n2
        n2 = nth
        count += 1


def fn(x): return ""FIBONACCI"" if x in fab_list else ""NOT_FIBONACCI""


print(""Given number is"", fn(20))
"
print it	"

test_dict = {6: 2, 8: 9, 3: 9, 10: 8}
N = 4

res = []
for key, val in sorted(
        test_dict.items(),
        key=lambda x: x[0],
        reverse=True)[
        : N]:
	res.append(key)
print(""Top N keys are: "" + str(res))
"
1 write a python function to add to add two numbers	"

def return_exponential(num1, num2):
	return num1 ** num2
"
Write a python program to Count the Number of Lines in a Text File	"

fname = input(""Enter file name: "")
num_lines = 0
with open(fname, 'r') as f:
	for line in f:
        num_lines += 1
print(""Number of lines:"")
print(num_lines)
"
palindrome or not a palindrome	"

def ifPalindrome(inVar):
	revInvar = []
	for _ in range((len(inVar) - 1), -1, -1):
        revInvar.append(inVar[_])
	if revInvar == inVar:
        return ""Palindrome""
	else:
        return ""Not a palindrome""
"
Write a function to identify if value is present inside a tuple or not	"def check_tuplevalue(l: tuple, value) -> bool:
	return value in l
"
year or not	"

year = int(input(""Enter a year: ""))
if (year % 4) == 0:
	if (year % 100) == 0:
        if (year % 400) == 0:
            print(f""{year} is a leap year"")
        else:
            print(f""{year} is not a leap year"")
	else:
        print(f""{year} is a leap year"")
else:
	print(f""{year} is not a leap year"")
"
polygon	"

def interior_angle(no_of_sides):
	return (no_of_sides - 2) * 180 / no_of_sides
"
write a python function to locate the leftmost value exactly equal to x	"def index(a, x):
	from bisect import bisect_left
	i = bisect_left(a, x)
	if i != len(a) and a[i] == x:
        return i
	raise ValueError
"
we are dealing with multiple inheritance	"class A(object):
	def foo(self):
        print(""class A"")


class B(object):
	def foo(self):
        print(""class B"")


class C(A, B):
	pass
"
Returns an integer value for the given character	"str = ""A""
val = ord(str)
print(f""Integer value for the given character?:{val}"")
"
write Python code to convert Celsius scale to Fahrenheit scale	"def Cel_To_Fah(n):
	return (n * 1.8) + 32


n = 20
print(int(Cel_To_Fah(n)))
"
write a python program to check identifier/keyword	"print('for'.isidentifier())
"
Library Function	"string = ""United States of America""
count = 0
for i in string:
	count = count + 1
print(""Length of the string is:"")
print(count)
"
48 write a python program to merge a list of dictionaires	"result = {}
for d in L:
	result.update(d)
"
Recursion	"

def sum1(lst):
	total = 0
	for element in lst:
        if (type(element) == type([])):
            total = total + sum1(element)
        else:
            total = total + element
	return total
"
Write a Python function to return perrin's number	"def perrins_number(n):
	if n >= 0:
        if n == 0:
            return 3
        elif n == 1:
            return 0
        elif n == 2:
            return 2
        else:
            return perrins_number(n - 3) + perrins_number(n - 2)
"
Removes all items from the list	"list = [{1, 2}, ('a'), ['1.1', '2.2']]
list.clear()
print('List:', list)
"
87 Write a Python function to check whether a list contains a sublist.	"def is_Sublist(l, s):
	sub_set = False
	if s == []:
        sub_set = True
	elif s == l:
        sub_set = True
	elif len(s) > len(l):
        sub_set = False

	else:
        for i in range(len(l)):
            if l[i] == s[0]:
                n = 1
                while (n < len(s)) and (l[i + n] == s[n]):
                    n += 1

            if n == len(s):
                sub_set = True

	return sub_set
"
Write a lambda function to multiply two numbers	"

def multiply(a, b): return a * b
"
Write a python function to get the volume of a cube with side as input	"def cube_volume(side):
	volume = side ** 3
	return volume
"
write a python program to multiply two list with list comprehensive	"l1 = [1, 2, 3]
l2 = [4, 5, 6]
print([x * y for x in l1 for y in l2])
"
write a python function to split word into chars	"def split(word):
	return [char for char in word]
"
'yyyy', 'zzzz']	"

input_string_list = ['x', 'y', 'z']
repeat_count = 4
list3 = [input_string_list[i] * (j + 1) for j in range(repeat_count)
         for i in range(len(input_string_list))]
print(list3)
"
breakdown the string into a list of words	"words = my_str.split()
"
length of the word and print it	"sentence = 'the quick brown fox jumps over the lazy dog'
words = sentence.split(' ')
lengths = [str(len(word)) for word in words]
print(' '.join(lengths))
"
Squares and Sum of all Digits in the Number is Less than 10	"

l = 6
u = 9
a = [x for x in range(l, u + 1) if (int(x**0.5))**2
     == x and sum(list(map(int, str(x)))) < 10]
print(a)
"
26 Write a program to split a string by custom length and print it	"
test_str = 'geeksforgeeks'
print(""The original string is : "" + str(test_str))
cus_lens = [5, 3, 2, 3]


res = []
strt = 0
for size in cus_lens:

	res.append(test_str[strt: strt + size])
	strt += size
print(""Strings after splitting : "" + str(res))
"
32. Write a python program to find HCf or GCD using euclidian Algorithm	"def compute_hcf(x, y):
	while(y):
        x, y = y, x % y
	return x
"
10 weekends (saturdays) after that having random numbers as values	"import pandas as pd
import numpy as np
ser = pd.Series(
	np.random.randint(
        1, 10, 10), pd.date_range(
        '2000-01-01', periods=10, freq='W-SAT'))
print(ser)
"
write a python program to print the ASCII value of a character	"character = 'x'
print(f'The ASCII value of {character} is {ord(character)}')
"
write a python program to convert paragraph string into sentense case	"

a = 'hello. i am a sentence.'
a = '. '.join(i.capitalize() for i in a.split('. '))
print(a)
"
A naive Python implementation of LIS problem	"

"
write a python program for adding two binary numbers	"

num1 = '00001'
num2 = '10001'


sum = bin(int(num1, 2) + int(num2, 2))
print(sum)
"
write a python function to accept user input to continue	"def get_userinput():
	while(1):
        do_continue = raw_input('Do you want to continue(y/n)?')
        if do_continue == 'y' or do_continue == 'n':
            return do_continue
"
vertical height as input	"def cone_volume(radius, height):
	volume = 1 / 3 * 3.14 * (radius ** 2) * height
	return volume
"
make sure all of dict's values are unique	"assert len(_dict) == len(set(_dict.values()))
reversed_dict = {v: k for k, v in _dict.items()}
print(reversed_dict)
"
four of the five integers.	"def min_max():
	nums = [int(x) for x in input().strip().split(' ')]
	print(sum(nums) - max(nums), sum(nums) - min(nums))
"
values are square of keys.	"def printDict():
	d = dict()
	d[1] = 1
	d[2] = 2**2
	d[3] = 3**2
	print(d)


printDict()
"
travelled in given time	"def cal_speed(distance: float, time: float) -> float:
	return distance / time
"
Calculate the length of dictionary	"thisdict = {
	""brand"": ""Ford"",
	""model"": ""Mustang"",
	""year"": 1964
}


print(f""Length of Dictionary:{len(thisdict)}"")
"
Write a Python function to Find the Sum of Cosine Series	"

def cosine(x, n):
	cosx = 1
	sign = -1
	for i in range(2, n, 2):
        pi = 22 / 7
        y = x * (pi / 180)
        cosx = cosx + (sign * (y**i)) / math.factorial(i)
        sign = -sign
	return cosx
"
write a python function to check if a given string is symmetrical	"

def symmetry(a):

	n = len(a)
	flag = 0

	if n % 2:
        mid = n // 2 + 1
	else:
        mid = n // 2

	start1 = 0
	start2 = mid

	while(start1 < mid and start2 < n):

        if (a[start1] == a[start2]):
            start1 = start1 + 1
            start2 = start2 + 1
        else:
            flag = 1
            break

	return flag
"
Write a function to return the surface area of a sphere	"def cal_area_sphere(radius):
	pi = 3.14
	return 4 * pi * (radius**2)
"
selling price	"def find_profit_or_loss(cp, sp):
	if cp > sp:
        return 'loss', cp - sp
	elif cp < sp:
        return 'profit', sp - cp
	else:
        return 'no profit or loss', 0
"
write a program to extract string of N size and having K distict characters	"

str1 = 'GoodisalwaysGoood'

N = 3

K = 2

res = []


for idx in range(0, len(str1) - N + 1):

	if (len(set(str1[idx: idx + N])) == K):
        res.append(str1[idx: idx + N])

print(""Extracted Strings : "" + str(res))
"
Write a Python function to find the intersection of two arrays	"def array_intersection(A, B):
	inter = list(set(A) & set(B))
	return inter
"
every element appears three times except for one.	"def single_number(arr):
	ones, twos = 0, 0
	for x in arr:
        ones, twos = (ones ^ x) & ~twos, (ones & x) | (twos & ~x)
	assert twos == 0
	return ones
"
a List	"

def find_odd_occurring(alist):
	
	ans = 0

	for element in alist:
        ans ^= element

	return ans
"
imaginary parts	"class Complex:
	def __init__(self, realpart, imagpart):
        self.r = realpart
        self.i = imagpart
"
print the result	"d = {'A': 10, 'B': 10, 'C': 239}
tot = 1
for i in d:
	tot = tot * d[i]
print(tot)
"
choice for separator	"

def con_str(*args, sep=' '):
	return sep.join(args)
"
string	"string = '''hello you can call me at 018002089898.'''
"
and 200 inclusive.	"import random


print(random.sample(range(100), 5))
"
and print it	"

def jpeg_res(filename):
	with open(filename, 'rb') as img_file:
        img_file.seek(163)

        a = img_file.read(2)

        
        height = (a[0] << 8) + a[1]

        
        a = img_file.read(2)

        
        width = (a[0] << 8) + a[1]

	print(""The resolution of the image is"", width, ""x"", height)
"
Write a Python function to extend a list without append.	"def extend_list_without_append(list1, list2):
	return list1.extend(list2)
"
write a Python program to calculate the number of days between two dates.	"

f_date = date(2019, 4, 15)  
l_date = date(2020, 4, 15)  
delta = l_date - f_date
print(f'No of days between {f_date} and {l_date} is:{delta.days}')
"
dictionary with integers as keys	"list_ = [1, 2, 3, 4]
dict_comp = {idx: value for idx, value in enumerate(list_)}
print(f""{dict_comp}"")
"
write a python program to print a random vowel	"import random
vowels = ['a', 'e', 'i', 'o', 'u']
print(random.choice(vowels))
"
summation equals K	"

test_dict = {""Gfg"": 3, ""is"": 5, ""Best"": 9, ""for"": 8, ""Geeks"": 10}
print(""The original dictionary is : "" + str(test_dict))
K = 14
l = []
s = list(test_dict.values())
v = list(test_dict.keys())
for i in range(0, len(s)):
	for j in range(i + 1, len(s) - 1):
        if s[i] + s[j] == K:
            print([v[i], v[j]])
"
8. Python Program to Convert Kilometers to Miles	"kilometers = 5.0
conv_fac = 0.621371
miles = kilometers * conv_fac
print('%0.2f kilometers is equal to %0.2f miles' % (kilometers, miles))
"
15. python function for datetime	"from datetime import datetime
datetime.utcnow()


def log(msg, *, dt=datetime.utcnow()):
	print(f'Message at {dt} was {msg}')
"
write a python function to compute the HCF of two numbers	"def hcf(x, y):

	if x > y:
        smaller = y
	else:
        smaller = x
	for i in range(1, smaller + 1):
        if((x % i == 0) and (y % i == 0)):
            hcf = i
	return hcf
"
key is present in the list	"

test_dict = {""Gfg"": 4, ""is"": 5, ""best"": 9,
             ""for"": 11, ""geeks"": 3}

print(""The original dictionary is : "" + str(test_dict))
test_list = [""Gfg"", ""best"", ""geeks""]
c = sorted(test_dict.values(), reverse=True)
for key, value in test_dict.items():
	if key in test_list and value in c[0:2]:
        print(key)
"
Join Two Sets	"set1 = {""a"", ""b"", ""c""}
set2 = {1, 2, 3}
set3 = set2.union(set1)
print(f""Joined Set:{set3}"")
"
is odd	"def add_even_odd_list(l1: list, l2: list) -> list:
	return [a + b for a, b in zip(l1, l2) if a % 2 == 0 and b % 2 != 0]
"
write a function to rotate string right by a given length	"

def rotate_right(input, d):

	Rfirst = input[0: len(input) - d]
	Rsecond = input[len(input) - d:]
	return (Rsecond + Rfirst)
"
function	"

terms = 10


result = list(map(lambda x: 2 ** x, range(terms)))
for i in range(terms):
	print(""2 raised to power"", i, ""is"", result[i])
"
49 write a program to find the factorial of a number	"

num = int(input(""Enter a number: ""))
factorial = 1
if num < 0:
	print(""Sorry, factorial does not exist for negative numbers"")
elif num == 0:
	print(""The factorial of 0 is 1"")
else:
	for i in range(1, num + 1):
        factorial = factorial * i
	print(""The factorial of"", num, ""is"", factorial)
"
consecutive natural numbers	"def getMissingNo(A):
	n = len(A)
	total = (n + 1) * (n + 2) / 2
	sum_of_A = sum(A)
	return total - sum_of_A
"
Calculate memory is being used by an list in Python	"import sys
list1 = ['Scott', 'Eric', 'Kelly', 'Emma', 'Smith']
print(""size of list = "", sys.getsizeof(list1))
"
write a function to find all urls in a given string	"

import re


def find_urls(string):

	regex = r""(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\"".,<>?«»“”‘’]))""
	url = re.findall(regex, string)
	return [x[0] for x in url]
"
tuples. Print the final list.	"
test_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)]
K = 1
res = [ele for ele in test_list if len(ele) != K]

print(""Filtered list : "" + str(res))
"
write a Python program to find the second largest number in given list.	"list1 = [10, 20, 4, 45, 99]

list1.sort()
print(""Second largest element is:"", list1[-2])
"
and compute their sum and then print it in console.	"def printValue(s1, s2):
	print(int(s1) + int(s2))
"
38 how to read a specific line from a text file in python	"line = open(""file.txt"", ""r"").readlines()[7]
"
write a program to remove the empty list from the given list	"str_list = [""Emma"", ""Jon"", """", ""Kelly"", None, ""Eric"", """"]


print(str_list)
"
even number between 1 and 20 (both included).	"evenNumbers = filter(lambda x: x % 2 == 0, range(1, 21))
print(evenNumbers)
"
write a program to write a string in a file	"

filename = 'file1.txt'
string = ""programming in \n python""
f1 = open(filename, 'w')
f1.write(string)
f1.close()
"
53 factorial using pythonish	"def fact_one_line(n):
	return 1 if n < 2 else n * fact_one_line(n - 1)
"
write a python function to generate 4 digit OTP	"

import math
import random


def generateOTP():
	digits = ""0123456789""
	OTP = """"
	for i in range(4):
        OTP += digits[math.floor(random.random() * 10)]
	return OTP
"
Write a function to remove a given date type elements from a list.	"

def removeDataType(li, dType):
	res = []
	for i in li:
        if not isinstance(i, dType):
            res.append(i)
	return res
"
Write a function to return the surface area of a hemi-sphere	"def cal_area_hemisphere(radius):
	pi = 3.14
	return 2 * pi * (radius**2)
"
write a python function to find H.C.F of two numbers	"

def compute_hcf(x, y):
	if x > y:
        smaller = y
	else:
        smaller = x
	for i in range(1, smaller + 1):
        if((x % i == 0) and (y % i == 0)):
            hcf = i
	return hcf


num1 = 54
num2 = 24


print(""The H.C.F. is"", compute_hcf(num1, num2))
"
print the result	"

ini_str = ""abc""

print(""Initial string"", ini_str)
result = []


def permute(data, i, length):
	if i == length:
        result.append(''.join(data))
	else:
        for j in range(i, length):
            data[i], data[j] = data[j], data[i]
            permute(data, i + 1, length)
            data[i], data[j] = data[j], data[i]


permute(list(ini_str), 0, len(ini_str))
print(""Resultant permutations"", str(result))
"
write a progarm to sort the list in assending order	"data_list = [-5, -23, 5, 0, 23, -6, 23, 67]
new_list = []


while data_list:
	minimum = data_list[0]  
	for x in data_list:
        if x < minimum:
            minimum = x
	new_list.append(minimum)
	data_list.remove(minimum)


print(f'assending_order_list: {new_list}')
"
write a python program to print the factors of a number	"num = 320
for i in range(1, num + 1):
	if num % i == 0:
        print(i)
"
write a python snippet to convert list into indexed tuple	"test_list = [4, 5, 8, 9, 10]
list(zip(range(len(test_list)), test_list))
"
numbers up to N and print the result	"

N = int(input(""Enter Number : ""))
sum = 0
i = 1
while i <= N:
	sum = sum + i
	i = i + 2
print(sum)
"
3. write a python Program to calculate the square root	"num = 8
num_sqrt = num ** 0.5
print('The square root of %0.3f is %0.3f' % (num, num_sqrt))
"
of a numeric series	"import pandas as pd
import numpy as np
ser = pd.Series(np.arange(20) + np.random.normal(1, 10, 20))
autocorrelations = [ser.autocorr(i).round(2) for i in range(11)]
print(autocorrelations[1:])
"
by a specified key	"def sort_dict_list(dict_list, sort_key):
	dict_list.sort(key=lambda item: item.get(sort_key))
"
factorial of a given positive number.	"def factendzero(n):
	x = n // 5
	y = x
	while x > 0:
        x /= 5
        y += int(x)
	return y
"
write a Python Function to rotate string left and right by d length	"

def rotate(input, d):

	Lfirst = input[0: d]
	Lsecond = input[d:]
	Rfirst = input[0: len(input) - d]
	Rsecond = input[len(input) - d:]

	print(""Left Rotation : "", (Lsecond + Lfirst))
	print(""Right Rotation : "", (Rsecond + Rfirst))


input = 'GeeksforGeeks'
d = 4
rotate(input, d)
"
62 write a program to concatenate Ranged Values in String list and print it	"

test_list = [""abGFGcs"", ""cdforef"", ""asalloi""]

i, j = 2, 5
r = ''
for z in test_list:
	r += z[i:j]
print(r)
"
write s python program to print the intersection of two sets	"

A = {1, 2, 3, 4, 5}
B = {4, 5, 6, 7, 8}
print(A & B)
"
write a python function that would print the ASCII value of a given character	"def print_ascii(char):
	print(ord(char))
"
(3, 3)]	"

max_count = 3
list6 = [(j + 1, i + 1) for i in range(max_count) for j in range(max_count)]
print(list6)
"
particition into false entries and true entries	"def partition(pred, iterable):
	from itertools import filterfalse, tee
	
	t1, t2 = tee(iterable)
	return filterfalse(pred, t1), filter(pred, t2)
"
into a dictioinary	"def list_to_dict(list1, list2):
	return dict(zip(list1, list2))
"
the list	"def findlongest(list):
	max1 = len(list[0])
	temp = list[0]
	for i in list:
        if(len(i) > max1):
            max1 = len(i)
            temp = i
	return temp
"
for the below list	"

def quicksort(alist, start, end):
	
	if end - start > 1:
        p = partition(alist, start, end)
        quicksort(alist, start, p)
        quicksort(alist, p + 1, end)


def partition(alist, start, end):
	pivot = alist[start]
	i = start + 1
	j = end - 1

	while True:
        while (i <= j and alist[i] <= pivot):
            i = i + 1
        while (i <= j and alist[j] >= pivot):
            j = j - 1

        if i <= j:
            alist[i], alist[j] = alist[j], alist[i]
        else:
            alist[start], alist[j] = alist[j], alist[start]
            return j


alist = [2, 3, 5, 6, 4, 5]
quicksort(alist, 0, len(alist))
print('Sorted list: ', end='')
print(alist)
"
write a python function to check if a given string is a palindrome	"def is_palindrome(string):
	return string == string[::-1]
"
Write a python fuction to create an empty list	"
def emptylist():
	return list()
"
write a program to replace duplicate word occurence in String	"

str1 = ""IISC is the best. IISC has Classes in the evening for professionals. Classes help to learn new things.""


repl_dict = {'IISC': 'It', 'Classes': 'They'}


str_list = str1.split(' ')


res = set()


for idx, ele in enumerate(str_list):
	if ele in repl_dict:
        print(str(idx) + '  ' + ele)
        if ele in res:
            str_list[idx] = repl_dict[ele]
        else:
            res.add(ele)


res = ' '.join(str_list)


print(""Replaced String: "" + str(res))
"
and print it	"

test_dict = {'""Geeks""': 3, '""is"" for': 5, '""g""eeks': 9}

res = {key.replace('""', ''): val for key, val in test_dict.items()}

print(""The dictionary after removal of double quotes : "" + str(res))
"
Check if there is a value for a key in JSON	"import json


studentJson = """"""{
	""id"": 1,
	""name"": ""Ishwar Venugopal"",
	""class"": null,
	""percentage"": 35,
	""email"": ""ishwarraja@gmail.com""
}""""""
student = json.loads(studentJson)
if not (student.get('email') is None):
	print(""value is present for given JSON key"")
	print(student.get('email'))
else:
	print(""value is not present for given JSON key"")
"
Write a python function to determine if a year is leap year or not	"

def is_leap(year):
	leap = False

	
	if year % 4 == 0:
        if year % 400 == 0:
            leap = True
        elif year % 100 == 0:
            leap = False
        else:
            leap = True
	return leap
"
hand is theta	"def printTime(theta):

	for hh in range(0, 12):
        for mm in range(0, 60):
            if (calcAngle(hh, mm) == theta):
                print(hh, "":"", mm, sep="""")
                return

	print(""Input angle not valid."")
	return
"
original order reserved.	"def removeDuplicate(li):
	newli = []
	seen = set()
	for item in li:
        if item not in seen:
            seen.add(item)
            newli.append(item)
	return newli


li = [12, 24, 35, 24, 88, 120, 155, 88, 120, 155]
print(removeDuplicate(li))
"
Write a lambda function that gives the word count in a statement.	"

def count_word(s): return len(s.split(' '))
"
Calculate difference in days between two dates	"def days_between(d1, d2):
	from datetime import datetime as dt
	f_date = dt.strptime(d1, ""%d/%m/%Y"").date()
	l_date = dt.strptime(d2, ""%d/%m/%Y"").date()
	delta = l_date - f_date
	print(delta.days)
"
write a python function that joins strings in a list and returns the result	"def join_string_parts(str_list):
	return "" "".join(str_list)
"
25. Python Program to Convert Decimal to Binary	"dec = 344


print(""The decimal value of"", dec, ""is:"")
print(bin(dec), ""in binary."")
"
100 write a python program that checks if a string is a pallindrome	"

def is_palindrome(st):
	st = st.lower()
	rev_st = st[::-1]
	try:
        assert rev_st == st
        return True
	except AssertionError:
        return False


st = ""Nitin""
print(is_palindrome(st))
"
write a python program to adds every 3rd number in a list	"from functools import reduce
input_list = [x for x in range(10)]
res = reduce(lambda x, y: x + y,
             [i for idx, i in enumerate(input_list) if (idx + 1) % 3 == 0])


print(f""{res}"")
"
Write a python program to print the smallest number in a list	"

list1 = [10, 20, 1, 45, 99]

print(""Smallest element is:"", min(list1))
"
from 0 to that number	"

def print_numbers(x):
	for i in range(x):
        print(i)
"
24 how to convert fahrenheit to celsius in python	"Celsius = (Fahrenheit - 32) * 5.0 / 9.0
"
length at the end and prints the modified list	"

def pad_arr_end(arr, pad_len):
	pad_arr = [0] * (pad_len - len(arr))
	return arr.extend(pad_arr)


tmp = [1, 2, 3, 4, 5]
pad_arr_end(tmp, 10)
print(tmp)
"
array.	"first_array = [1, 2, 3, 4, 5, 6, 7]
second_array = [3, 7, 2, 1, 4, 6]


def finder(first_array, second_array):
	return(sum(first_array) - sum(second_array))


missing_number = finder(first_array, second_array)


print(missing_number)
"
From given string replace each punctuation with #	"from string import punctuation


str1 = '/*Jon is @developer & musician!!'
replace_char = '#'
for char in punctuation:
	str1 = str1.replace(char, replace_char)


print(""The strings after replacement : "", str1)
"
is a tuple	"num = [10, 20, 30, (10, 20), 40]
ctr = 0
for n in num:
	if isinstance(n, tuple):
        break
        ctr += 1
print(ctr)
"
string in lexicographic sorted order.	"def get_ordered_permutations(word, k):
	[print(''.join(x)) for x in sorted(list(permutations(word, int(k))))]
"
Sort JSON keys in Python and write it into a file	"import json
sampleJson = {""id"": 1, ""name"": ""value2"", ""age"": 29}


with open(""sampleJson.json"", ""w"") as write_file:
	json.dump(sampleJson, write_file, indent=4, sort_keys=True)
print(""Done writing JSON data into a file"")
"
write a program to count characters surrounding vowels	"

str1 = 'week after week the numbers are increasing'

res = 0
vow_list = ['a', 'e', 'i', 'o', 'u']


for idx in range(1, len(str1) - 1):

	if str1[idx] not in vow_list and (
            str1[idx - 1] in vow_list or str1[idx + 1] in vow_list):
        res += 1

if str1[0] not in vow_list and str1[1] in vow_list:
	res += 1

if str1[-1] not in vow_list and str1[-2] in vow_list:
	res += 1


print(""Characters around vowels count : "" + str(res))
"
square.	"

def is_perfect_square(n):
	x = n // 2
	y = set([x])
	while x * x != n:
        x = (x + (n // x)) // 2
        if x in y:
            return False
        y.add(x)
	return True
"
write a python function to capitalize the first letter of a string	"

def capitalize(s, lower_rest=False):
	return ''.join([s[:1].upper(), (s[1:].lower() if lower_rest else s[1:])])
"
similar initial element. Print out the output	"

test_list = [(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)]
print(""The original list is : "" + str(test_list))

res = []
for sub in test_list:
	if res and res[-1][0] == sub[0]:
        res[-1].extend(sub[1:])
	else:
        res.append([ele for ele in sub])
res = list(map(tuple, res))

print(""The extracted elements : "" + str(res))
"
Write a python function that returns the sum of n natural numbers	"

def sum_natural(num):
	if num < 0:
        print(""Please enter a positive number!"")
	else:
        sum = 0
        while(num > 0):
            sum += num
            num -= 1
        return num
"
write a program to remove common element between two sets	"

s1 = {""apple"", ""banana"", ""cherry""}
s2 = {""google"", ""microsoft"", ""apple""}


s1.difference_update(s2)
print(s1)
"
43 write a python program to filter dictionaries with ordered values	"

test_list = [{'gfg': 2, 'is': 8, 'good': 10},
             {'gfg': 1, 'for': 10, 'geeks': 9},
             {'love': 3, 'gfg': 4}]

res = [sub for sub in test_list if sorted(
	list(sub.values())) == list(sub.values())]

print(""The filtered Dictionaries : "" + str(res))
"
Write a python function to join directory names to create a path	"def join_filename(base_dir, *args):
	file_path_args = [base_dir, *args]
	for file_name in file_path_args:
        if(isinstance(file_name, str) == False):
            raise TypeError
	return ""/"".join(file_path_args)
"
gives the sum of zero from an array of n integers.	"num = [1, -6, 4, 2, -1, 2, 0, -2, 0]
len_list = len(num)
trips = []
for i in range(len_list):
	if i + 3 > len_list:
        break
	triplets = num[i:i + 3]
	if len(set(triplets)) == 3:
        if sum(triplets) == 0:
            trips.append(triplets)
print(trips)
"
in a list	"original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]
prices = [i if i > 0 else 0 for i in original_prices]
print(f""Final List:{prices}"")
"
Write a python program to print negative Numbers in a List	"
list1 = [11, -21, 0, 45, 66, -93]

for num in list1:

	if num < 0:
        print(num, end="" "")
"
but not in the Second	"

s1 = 'python'
s2 = 'schoolofai'
a = list(set(s1) - set(s2))
print(""The letters are:"")
for i in a:
	print(i)
"
84 write a program to design a dice throw function	"

def dice():
	return random.choice([1, 2, 3, 4, 5, 6])
"
Write a Python function to return woodall numbers	"def woodall_number(n):
	if n >= 0:
        return n * 2 ** n - 1
"
Write a python program to print a given string without spaces	"

s = ""I love India	now I will be printed without any space""
for i in s:
	if i == ' ':
        continue
	print(i, end='')
"
using datetime module	"from datetime import date


def day_diff(date1, date2):
	diff = date1 - date2
	return diff.days
"
yards, and miles.	"def distance_converter(d_ft):
	d_inches = d_ft * 12
	d_yards = d_ft / 3.0
	d_miles = d_ft / 5280.0
	return f""Distance in Inches:{d_inches}\nDistance in Yards :{d_yards}\nDistance in Miles :{d_miles}""
"
isdigit() + index() + loop	"test_str = ""geeks4geeks is best""
print(""The original string is : "" + str(test_str))
temp = 0
for chr in test_str:
	if chr.isdigit():
        temp = test_str.index(chr)
print(""Extracted String : "" + str(test_str[0: temp]))
"
write a python generator function for generating Fibonacci Numbers	"def fib(limit):
	
	a, b = 0, 1
	
	while a < limit:
        yield a
        a, b = b, a + b
"
write a program to break up string into individual elements	"

str1 = ""whatisthis""

split_string = list(''.join(str1))

print(split_string)
"
Write a Python function to return binary value of a given integer	"def int_to_bin(a):
	return bin(a)
"
dictionary	"def invert_dict_non_unique(my_dict):
	my_inverted_dict = dict()
	for key, value in my_dict.items():
        my_inverted_dict.setdefault(value, list()).append(key)
	return my_inverted_dict
"
its ranges.	"input_array = [0, 1, 2, 4, 5, 7]
start = 0
result = []
while start < len(input_array):
	end = start
	while end + 1 < len(input_array) and ((input_array[end + 1] - input_array[end]) == 1):
        end = end + 1
	if end != start:
        result.append(""{0}-->{1}"".format(input_array[start], input_array[end]))
        print(result)
	else:
        result.append(""{0}"".format(input_array[start]))
        print(result)
	start = end + 1


print(result)
"
after sorting them alphabetically.	"

items = [x for x in input().split(',')]
items.sort()
print(','.join(items))
"
Write a python class to implement PriorityQueue	"

class PriorityQueue(object):
	def __init__(self):
        self.queue = []

	def __str__(self):
        return ' '.join([str(i) for i in self.queue])

	def isEmpty(self):
        return len(self.queue) == []

	def insert(self, data):
        self.queue.append(data)

	def delete(self):
        try:
            max = 0
            for i in range(len(self.queue)):
                if self.queue[i] > self.queue[max]:
                    max = i
            item = self.queue[max]
            del self.queue[max]
            return item
        except IndexError:
            print()
            exit()
"
keys and values	"a = {""a"": 1, ""b"": 2, ""c"": 3, ""d"": 4}
for k, v in a.items():
	print(k, v)
"
write a python program to print bitwise AND operation	"a = 60
b = 13
a_and_b = a & b
print(a_and_b)
"
Write a function to find the  difference between two times	"def difference(h1, m1, h2, m2):

	t1 = h1 * 60 + m1
	t2 = h2 * 60 + m2
	if (t1 == t2):
        print(""Both are same times"")
        return
	else:
        diff = t2 - t1
	h = (int(diff / 60)) % 24
	m = diff % 60
	print(h, "":"", m)


difference(7, 20, 9, 45)
difference(15, 23, 18, 54)
difference(16, 20, 16, 20)
"
and return its index else return -1	"

def search(arr, n, x):
	for i in range(0, n):
        if (arr[i] == x):
            return i
	return -1
"
Write a method which can calculate square value of number	"def square(num):
	return num ** 2
"
15 how to add extra zeros after decimal in python	"format(2.0, '.6f')

"
amount, time and rate of interest.	"def simple_interest(p, t, r):
	print('The principal is', p)
	print('The time period is', t)
	print('The rate of interest is', r)

	si = (p * t * r) / 100

	print('The Simple Interest is', si)
	return si


simple_interest(8, 6, 8)
"
Write a function to calculate Volume of Hexagonal Pyramid	"def volumeHexagonal(a, b, h):
	return a * b * h
"
73 function to store the data of IPL match in Namedtuple	"def store_ipl_date(tuple1):
	from collections import namedtuple
	IplData = namedtuple(
        'IplData', 'match toss choice session1 session2 winner')
	return IplData(*tuple1)
"
list of allowed users	"user1 = ""Ram""
user2 = ""Mohan""
"
wrie a python  Program to Flatten a List without using Recursion	"a = [[1, [[2]], [[[3]]]], [[4], 5]]
def flatten(l): return sum(map(flatten, l), []) if isinstance(l, list) else [l]


print(flatten(a))
"
4 write a program to print Even Numbers in a List	"list1 = [10, 21, 4, 45, 66, 93]
for num in list1:
	if num % 2 == 0:
        print(num, end="" "")
"
function list()	"def Cloning(li1):
	li_copy = list(li1)
	return li_copy


li1 = [4, 8, 2, 10, 15, 18]
li2 = Cloning(li1)
print(""Original List:"", li1)
print(""After Cloning:"", li2)
"
length of  argument and print all arguments value	"def func1(*args):
	for i in args:
        print(i)
"
sorted dictionary	"test_dict = {'Nikhil': {'roll': 24, 'marks': 17},
             'Akshat': {'roll': 54, 'marks': 12},
             'Akash': {'roll': 12, 'marks': 15}}
sort_key = 'marks'
res = sorted(test_dict.items(), key=lambda x: x[1][sort_key])
print(""The sorted dictionary by marks is : "" + str(res))
"
Write a Python function to multiply all values in the list	"def multiplyList(myList):
	result = 1
	for x in myList:
        result = result * x
	return result
"
80 write a Python program to print the roots of a quadratic equation	"import math
a = float(input(""Enter the first coefficient: ""))
b = float(input(""Enter the second coefficient: ""))
c = float(input(""Enter the third coefficient: ""))
if (a != 0.0):
	d = (bb) - ('4ac')
	if (d == 0.0):
        print(""The roots are real and equal."")
        r = -b / ('2a')
        print(""The roots are "", r, ""and"", r)
	elif(d > 0.0):
        print(""The roots are real and distinct."")
        r1 = (-b + (math.sqrt(d))) / ('2a')
        r2 = (-b - (math.sqrt(d))) / ('2a')
        print(""The root1 is: "", r1)
        print(""The root2 is: "", r2)
	else:
        print(""The roots are imaginary."")
        rp = -b / ('2a')
        ip = math.sqrt(-d) / ('2a')
        print(""The root1 is: "", rp, ""+ i"", ip)
        print(""The root2 is: "", rp, ""- i"", ip)
else:
	print(""Not a quadratic equation."")
"
8 write a function to remove empty list from a list and print.	"def remove_empty_list(num1: list):
	if isinstance(num1, list):
        modified = list(filter(None, num1))
        print(modified)
"
51. python function for finding softmax output of a vector	"

def softmax(x):
	

	if(type(x) == int or type(x) == float):

        return 1

	denom = 0

	for i in x:

        denom += math.exp(i)

	new_vec = []

	for i in x:

        new_vec.append(math.exp(i) / denom)

	return new_vec
"
write a python function to return the sequence elements n times	"def ncycles(iterable, n):
	from itertools import chain, repeat
	return chain.from_iterable(repeat(tuple(iterable), n))
"
Write a python function to merge two given lists into one	"

def merge_lists(l1, l2):
	return l1 + l2
"
55 Write a Python function to check if a number is a power of a given base.	"

def isPower(n, base):
	if base == 1 and n != 1:
        return False
	if base == 1 and n == 1:
        return True
	if base == 0 and n != 1:
        return False
	power = int(math.log(n, base) + 0.5)
	return base ** power == n
"
Write a Python function to convert Hours into Seconds	"def hours_to_seconds(hours):
	return hours * 60 * 60
"
45. python function for finding tangent angle	"def tangent(angle):
	

	return math.tan(angle)
"
printing final string	"print(""final string"", result)
"
write a python program to check whether the number is prime	"

num = 407
if num > 1:
	for i in range(2, num):
        if (num % i) == 0:
            print(num, ""is not a prime number"")
            print(i, ""times"", num // i, ""is"", num)
            break
	else:
        print(num, ""is a prime number"")

else:
	print(num, ""is not a prime number"")
"
the final list	"
def swapList(newList):
	size = len(newList)

	
	temp = newList[0]
	newList[0] = newList[size - 1]
	newList[size - 1] = temp

	return newList


newList = [12, 35, 9, 56, 24]

print(swapList(newList))
"
final list.	"
list1 = [11, 5, 17, 18, 23, 50]

for ele in list1:
	if ele % 2 == 0:
        list1.remove(ele)

print(""New list after removing all even numbers: "", list1)
"
String and print the result	"string = ""SriNAtH""
count = 0
for i in string:
	if(i.islower()):
        count = count + 1
print(""The number of lowercase characters is:"")
print(count)
"
in user provided input string ignoring the case	"

def count_word_occurrences(inputstring, substring):
	inputstring = inputstring
	tempString = inputString.lower()
	count = tempString.count(substring.lower())
	return print(f'Given substring count is :{count}')


inputString = ""Welcome to USA. usa awesome, isn't it?""
substring = ""USA""
count_word_occurrences(inputString, substring)
"
it in a list	"sample_dict = {'1': 1, '2': 2, '3': 3}
key_list = list(sample_dict.keys())
print(f""{key_list}"")
"
Write a function to calculate the density given mass and volume	"def cal_density(mass, volume):
	return (mass / volume)
"
but not in the Second	"

s1 = 'python'
s2 = 'schoolofai'
a = list(set(s1) - set(s2))
print(""The letters are:"")
for i in a:
	print(i)
"
every element appears three times except for one.	"def single_number(arr):
	ones, twos = 0, 0
	for x in arr:
        ones, twos = (ones ^ x) & ~twos, (ones & x) | (twos & ~x)
	assert twos == 0
	return ones
"
Different Lists	"

a = [2, 3, 8, 9, 2, 4, 6]
even = []
odd = []
for j in a:
	if(j % 2 == 0):
        even.append(j)
	else:
        odd.append(j)
print(""The even list"", even)
print(""The odd list"", odd)
"
for the below list	"

def quicksort(alist, start, end):
	
	if end - start > 1:
        p = partition(alist, start, end)
        quicksort(alist, start, p)
        quicksort(alist, p + 1, end)


def partition(alist, start, end):
	pivot = alist[start]
	i = start + 1
	j = end - 1

	while True:
        while (i <= j and alist[i] <= pivot):
            i = i + 1
        while (i <= j and alist[j] >= pivot):
            j = j - 1

        if i <= j:
            alist[i], alist[j] = alist[j], alist[i]
        else:
            alist[start], alist[j] = alist[j], alist[start]
            return j


alist = [2, 3, 5, 6, 4, 5]
quicksort(alist, 0, len(alist))
print('Sorted list: ', end='')
print(alist)
"
such tuples	"def zip_(list_of_seq):
	return list(zip(*list_of_seq))
"
46 write Python Function to print leaders in array	"def printLeaders(arr, size):

	for i in range(0, size):
        for j in range(i + 1, size):
            if arr[i] < arr[j]:
                break
        if j == size - 1:
            print(arr[i])


arr = [16, 17, 4, 3, 5, 2]
printLeaders(arr, len(arr))
"
31 get the most common number in python	"from statistics import mode
mode((1, 2, 4, 4, 5, 4, 4, 2, 3, 8, 4, 4, 4))
"
write a program to replace multiple words with a single word	"

str1 = 'CoffeeDay is best for coffee and having long conversations'

word_list = [""best"", 'long']

repl_word = 'good'

res = ' '.join(
	[repl_word if idx in word_list else idx for idx in str1.split()])


print(""String after multiple replace : "" + str(res))
"
Write a function to return the volume of a sphere	"def cal_sphere_volume(radius: float) -> float:
	pi = 3.14
	return (4 / 3) * pi * (radius**3)
"
66 attach function closure with logs details to another function	"def attach_log(fn: ""function""):
	def inner(*args, **kwargs):
        dt = datetime.now()
        print(f'{fn.__name__} is called at {dt} with {args} {kwargs} ')
        return fn(*args, **kwargs)
	return inner
"
write a python function to convert byte to UTF-8	"def byte_to_utf8(data):
	return data.decode(""utf-8"")


print(byte_to_utf8(data=b'r\xc3\xa9sum\xc3\xa9'))
"
Calculate the pair-wise product of two lists	"list1 = [1, 2, 3]
list2 = [5, 6, 7]
final = [list1[i] * list2[i] for i in range(len(list1))]
print(f""pair-wise product of two lists:{final}"")
"
order reserved.	"def removeDuplicate(li):
	newli = []
	seen = set()
	for item in li:
        if item not in seen:
            seen.add(item)
            newli.append(item)

	return newli
"
hexadecimal color code.	"

def rgb_to_hex(r, g, b):
	return ('{:02X}' * 3).format(r, g, b)
"
in a dictionary	"input_dict = {'key_a': 10, 'kEy': 2, 'Key_B': 13}
for key in list(input_dict.keys()):
	new_key = key[0].upper() + key[1:-1] + key[-1].upper()
	input_dict[new_key] = input_dict[key]
	if key != new_key:
        del input_dict[key]
"
Counting total lower Case in a string	"str1 = ""abc4234AFdeaa""
digitCount = 0
for i in range(0, len(str1)):
	char = str1[i]
	if(char.lower()):
        digitCount += 1
print('Number total lower Case: ', digitCount)
"
printing the values	"print(""Principle amount  : "", p)
print(""Interest rate	 : "", r)
print(""Time in years	 : "", t)
print(""compound Interest : "", ci)
"
write a Python function to check if count of divisors is even or odd	"def NumOfDivisor(n):
	if n < 1:
        return
	root_n = n**0.5
	if root_n**2 == n:
        print(""Odd"")
	else:
        print(""Even"")
"
String	"

def modify(string):
	final = """"
	for i in range(len(string)):
        if i % 2 == 0:
            final = final + string[i]
	return final
"
that each digit of the number is an even number.	"

values = []
for i in range(1000, 9999):
	s = str(i)
	if (int(s[0]) % 2 == 0) and (int(s[1]) % 2 == 0) and (int(s[2]) % 2 == 0) and (int(s[3]) % 2 == 0):
        values.append(s)
"
15 write a function to implement a binary tree	"

class BinTree:
	def __init__(self, key):
        self.left = None
        self.right = None
        self.val = key
"
write a python program to print Armstrong numbers in a certain interval	"

lower = 100
upper = 2000


for num in range(lower, upper + 1):

	order = len(str(num))

	sum = 0

	temp = num
	while temp > 0:
        digit = temp % 10
        sum += digit ** order
        temp //= 10

	if num == sum:
        print(num)
"
write a function to check if a string is a palindrome or not	"

def reverse_string(string):
	return string[::-1]


def ispalin(string):
	if string == reverse_string(string):
        return True
	return False
"
7 write a function to print second largest number in a list.	"def second_large_num(num: list):
	if isinstance(num, list):
        num.sort()
        print(num[-2])
	else:
        raise ValueError('Invalid Input')
"
array whose each element is 0.	"array = [[[0 for col in range(8)] for col in range(5)] for row in range(3)]
print(array)
"
sentence	"def find_longest_word(words_list):
	word_len = []
	for n in words_list:
        word_len.append((len(n), n))
        word_len.sort()


return word_len[-1][1]


print(find_longest_word([""PHP"", ""python"", ""zekelabs""]))
"
write a python function to locate the rightmost value less than x	"def find_lt(a, x):
	from bisect import bisect_left
	i = bisect_left(a, x)
	if i:
        return a[i - 1]
	raise ValueError
"
Write a Python program to convert a list of tuples into a dictionary.	"l = [(""x"", 1), (""x"", 2), (""x"", 3), (""y"", 1), (""y"", 2), (""z"", 1)]
d = {}
for a, b in l:
	d.setdefault(a, []).append(b)
print(d)
"
write a program Creating a Dictionary  with Integer Keys	"Dict = {1: 'Geeks', 2: 'For', 3: 'Geeks'}
print(""\nDictionary with the use of Integer Keys: "")
print(Dict)
"
Generate 3 random integers between 100 and 999 which is divisible by 5	"import random


print(""Generating 3 random integer number between 100 and 999 divisible by 5"")
for num in range(3):
	print(random.randrange(100, 999, 5), end=', ')
"
write a program to break up string into individual elements	"

str1 = ""whatisthis""

split_string = list(''.join(str1))

print(split_string)
"
write a python function for implementation of Insertion Sort	"

def insertionSort(arr):
	for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key


arr = [12, 11, 13, 5, 6]
insertionSort(arr)
print(f""Sorted array is: {arr}"")
"
Find the day of week of a given date?	"from datetime import datetime
given_date = datetime(2020, 7, 26)
print(given_date.strftime('%A'))
"
Write a program to check whether a number is prime or not	"num = 337


if num > 1:
	for i in range(2, num // 2 + 1):
        if (num % i) == 0:
            print(num, ""is not a prime number"")
            print(f""{i} times {num//i} is {num}"")
            break
	else:
        print(f""{num} is a prime number"")


else:
	print(f""{num} is not a prime number"")
"
Write a function that returns lowercase string	"def str_lowercase(s: str):
	return s.lower()
"
Function to calculate padovan number P(n)	"def padovan(n):
	pPrevPrev, pPrev, pCurr, pNext = 1, 1, 1, 1
	for i in range(3, n + 1):
        pNext = pPrevPrev + pPrev
        pPrevPrev = pPrev
        pPrev = pCurr
        pCurr = pNext

	return pNext

 


def recaman(n):
	arr = [0] * n
	arr[0] = 0
	print(arr[0], end="", "")
	for i in range(1, n):
        curr = arr[i - 1] - i
        for j in range(0, i):
            if ((arr[j] == curr) or curr < 0):
                curr = arr[i - 1] + i
                break
        arr[i] = curr
        print(arr[i], end="", "")

 


def printSequence(n):
	a = 1
	ans = 2
	N = 1000000007
	i = 1
	while i <= n:
        print(ans)
        ans = ((a % N) * (ans % N)) % N
        a = ans
        ans = (ans + 1) % N
        i = i + 1

 
 


def Add(x, y):
	while (y != 0):
        carry = x & y
        x = x ^ y
        y = carry << 1
	return x

  
  


def subtract(x, y):
	while (y != 0):
        borrow = (~x) & y
        x = x ^ y
        y = borrow << 1

	return x

 
 


def minSub(N):
	count = 0
	while (N >= 0):
        num = N
        rev = 0
        while (num != 0):
            digit = num % 10
            rev = (rev * 10) + digit
            num = num // 10
        if (N == rev):
            break
        count += 1
        N -= 1
	print(count)

 
 


def isPerfectSquare(n):
	i = 1
	while(i * i <= n):
        if ((n % i == 0) and (n / i == i)):
            return True
        i = i + 1
	return False

 
 


def squareRoot(n):
	x = n
	y = 1
	e = 0.000001
	while(x - y > e):

        x = (x + y) / 2
        y = n / x

	return x
"
84 generate random number using the concept of iterators	"class RandomInt:
	

	def __init__(self):
        self.n = 10

	def __next__(self):
        if self.n > 0:
            print(random.randint(0, 10))
            self.n -= 1
        else:
            raise StopIteration

	def __iter__(self):
        return self
"
particition into false entries and true entries	"def partition(pred, iterable):
	from itertools import filterfalse, tee
	
	t1, t2 = tee(iterable)
	return filterfalse(pred, t1), filter(pred, t2)
"
place in a list	"

from functools import reduce


def count_second(lst):
	return reduce(lambda x, y: x + y, lst[::2])
"
using a for loop	"n = 62
for num in range(n):
	print(num)
"
14 write a function to perform insertion sort on an arary	"

def sort_insertion(arr):
	for i in range(1, len(arr)):
        tmp = arr[i]

        j = i
        while (j > 0) & (tmp < arr[j - 1]):
            arr[j] = arr[j - 1]
            j = j - 1
        arr[j] = tmp
	return arr
"
at that index.	"def find_product(lst):
	
	left = 1
	product = []
	for ele in lst:
        product.append(left)
        left = left * ele
	
	right = 1
	for i in range(len(lst) - 1, -1, -1):
        product[i] = product[i] * right
        right = right * lst[i]

	return product
"
no using class	"

class Fib:
	def __init__(self):
        self.cache = {1: 1, 2: 1}

	def fib(self, n):
        if n not in self.cache:
            print(f'Calculating fib({n})')
            self.cache[n] = self.fib(n - 1) + self.fib(n - 2)
        return self.cache[n]
"
Write a Python Program to print words starting with Vowel From A list	"test_list = [""all"", ""love"", ""and"", ""get"", ""educated"", ""by"", ""gfg""]
print(""The original list is : "" + str(test_list))
res = []
vow = ""aeiou""
for sub in test_list:
	flag = False
	for ele in vow:
        if sub.startswith(ele):
            flag = True
            break
	if flag:
        res.append(sub)
print(""The extracted words : "" + str(res))
"
Write a Python function to calculate dot product of two given sequence	"

def dot_product(a, b):
	return sum(e[0] * e[1] for e in zip(a, b))
"
keep only the items that are present in both sets	"x = {""apple"", ""banana"", ""cherry""}
y = {""google"", ""microsoft"", ""apple""}


x.intersection_update(y)
print(f""Duplicate Value in Two set:{x}"")
"
succesfully guessed and print the results	"

import random


guesses_made = 0


name = input('Hello! What is your name?\n')


number = random.randint(1, 20)
print('Well, {0}, I am thinking of a number between 1 and 20.'.format(name))


while guesses_made < 6:

	guess = int(input('Take a guess: '))

	guesses_made += 1

	if guess < number:
        print('Your guess is too low.')

	if guess > number:
        print('Your guess is too high.')

	if guess == number:
        break


if guess == number:
	print(
        'Good job, {0}! You guessed my number in {1} guesses!'.format(
            name,
            guesses_made))
else:
	print('Nope. The number I was thinking of was {0}'.format(number))
"
Write a program to merge two python dictionaries and print merged dictionary	"d1 = {'a': 100, 'b': 200}
d2 = {'x': 300, 'y': 200}
d = d1.copy()
d.update(d2)
print(d)
"
letters and digits.	"s = raw_input()
d = {""DIGITS"": 0, ""LETTERS"": 0}
for c in s:
	if c.isdigit():
        d[""DIGITS""] += 1
	elif c.isalpha():
        d[""LETTERS""] += 1
	else:
        pass
print(""LETTERS"", d[""LETTERS""])
print(""DIGITS"", d[""DIGITS""])
"
Write a python program to Convert and print Snake case to Pascal case	"test_str = 'go_east_or_west_india_is_the_best'
res = test_str.replace(""_"", "" "").title().replace("" "", """")
print(res)
"
94 write a program to remove matching tuples and print it	"

test_list1 = [('Early', 'morning'), ('is', 'good'), ('for', 'Health')]
test_list2 = [('Early', 'morning'), ('is', 'good')]


l = []
for i in range(0, len(test_list1)):
	for j in range(0, len(test_list2)):
        if test_list1[i] not in test_list2:
            l.append(test_list1[i])
            break
print(l)
"
have at least one common member	"def common_data(list1, list2):
	result = False
	for x in list1:
        for y in list2:
            if x == y:
                result = True
	return result


print(common_data([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]))
"
polygon	"

def interior_angle(no_of_sides):
	return (no_of_sides - 2) * 180 / no_of_sides
"
Write a python program to Read and print the Contents of a File	"

a = str(input(""Enter file name .txt extension:""))
file2 = open(a, 'r')
line = file2.readline()
while(line != """"):
	print(line)
	line = file2.readline()
file2.close()
"
rows given by the user	"

n = 10
a = []
for i in range(n):
	a.append([])
	a[i].append(1)
	for j in range(1, i):
        a[i].append(a[i - 1][j - 1] + a[i - 1][j])
	if(n != 0):
        a[i].append(1)
for i in range(n):
	print(""	"" * (n - i), end="" "", sep="" "")
	for j in range(0, i + 1):
        print('{0:6}'.format(a[i][j]), end="" "", sep="" "")
	print()
"
Write a function to identify if value is present inside a dictionary or not	"def check_value(d: dict, value) -> bool:
	return any(v == value for v in dict.values())
"
write Python program to find Mathematical Median of Cumulative Records	"

test_list = [(1, 4, 5), (7, 8), (2, 4, 10)]


print(""The original list : "" + str(test_list))


res = []
for sub in test_list:
	for ele in sub:
        res.append(ele)
res.sort()
mid = len(res) // 2
res = (res[mid] + res[~mid]) / 2


print(""Median of Records is : "" + str(res))
"
All blank lists are not the same	"a_list = []
print(a_list, '\nID (initial):', id(a_list), '\n')
a_list.append(1)
print(a_list, '\nID (append):', id(a_list), '\n')
a_list.extend([2])
print(a_list, '\nID (extend):', id(a_list))
"
Driver Code	"tuples = [(), ('ram', '15', '8'), (), ('laxman', 'sita'),
          ('krishna', 'akbar', '45'), ('', ''), ()]
print(Remove(tuples))
"
3. Write a program to reverse dictionary key order	"

sample_dict = {1: 'Hi', 2: 'Hello', 3: 'Hey'}


print(""The original dictionary : "" + str(sample_dict))


res = dict(reversed(list(sample_dict.items())))


print(""The reversed order dictionary : "" + str(res))
"
Write a Python program to print current time in milliseconds	"import time
milliseconds = int(round(time.time() * 1000))
print(milliseconds)
"
usage of break	"for i in range(5):
	if i == 1:
        break
else:
	print('in else')
print('after for-loop')
"
Write a function to Get Kth Column of Matrix	"def kth_column(test_list=[[4, 5, 6], [8, 1, 10], [7, 12, 5]], k=2):

	print(""The original list is : "" + str(test_list))
	K = k
	res = list(zip(*test_list))[K]
	print(""The Kth column of matrix is : "" + str(res))
"
74 write a python program to assign list items to Dictionary and print it	"test_list = [{'Gfg': 1, 'id': 2},
             {'Gfg': 4, 'id': 4}]

new_key = 'best'
add_list = [12, 2]
res = []
for sub, val in zip(test_list, add_list):
	sub[new_key] = val
	res.append(sub)

print(""The modified dictionary : "" + str(res))
"
Write a lambda function to find the intersection of two lists	"

def intersection(a, b): return list(set(a) & set(b))
"
write a program to print 5 random numbers divisible by 4 between 100 and 200	"import random
print(random.sample([i for i in range(10, 100) if i % 4 == 0], 5))
"
write a python program to add an element to a list. Print the final list.	"lst = [""Jon"", ""Kelly"", ""Jessa""]
lst.append(""Scott"")
print(lst)
"
write a python program to use extend in list/ append to a list	"a = [13, 56, 17]
a.append([87])
a.extend([45, 67])
print(a)
"
14.Write a Python Program to check if a number is prime or not	"

num = 407


if num > 1:
	
	for i in range(2, num):
        if (num % i) == 0:
            print(num, ""is not a prime number"")
            print(i, ""times"", num // i, ""is"", num)
            break
	else:
        print(num, ""is a prime number"")

else:
	print(num, ""is not a prime number"")
"
valued Lists in Tuple	"

test_list = [6, 8, 4, 9, 10, 2]


print(f""The original list is : {test_list}"")


res = tuple([ele] for ele in test_list)


print(f""Tuple after conversion : {res}"")
"
74 write a program to return the absolute value in Python	"

def get_absolute_value(n):
	if n >= 0:
        return n
	else:
        return -n


print(get_absolute_value(101))
"
of 4.	"def reverse_string(str1):
	if len(str1) % 4 == 0:
        return ''.join(reversed(str1))
	return str1
"
write a python program to deep flattens a nested list	"L = [1, 2, [3, 4], [5, 6, [7]]]


def flatten(L):
	for item in L:
        if isinstance(item, list):
            yield from flatten(item)
        else:
            yield item


print(list(flatten(L)))
"
gas equation Pressure P and Tempreature T given	"def find_volume_of_ideal_gas(pressure: float, temp: float, n: float) -> float:
	r = 8.3145
	return (n * r * temp) / pressure
"
Merge two dictionaries in a single expression	"currentEmployee = {1: 'Scott', 2: ""Eric"", 3: ""Kelly""}
formerEmployee = {2: 'Eric', 4: ""Emma""}
allEmployee = {**currentEmployee, **formerEmployee}
print(allEmployee)
"
Python math module.	"import random
print(random.random() * 100)
"
the output.	"

test_list = [(3, 4), (6, 5), (7, 8)]

res = [(sub[1], sub[0]) for sub in test_list]

print(""The swapped tuple list is : "" + str(res))
"
print the positive numbers and negative numbers separately	"

from random import random


a = []
for i in range(7):
	n = int(random() * 20) - 10
	a.append(n)


print(a)


neg = []
pos = []
for i in a:
	if i < 0:
        neg.append(i)
	elif i > 0:
        pos.append(i)


print(neg)
print(pos)
"
in alphabetical order and print the list	"

list1 = ['gfg', 'is', 'best', 'for', 'geeks']


res = []
for i in range(0, len(list1)):
	for j in range(0, len(list1[i]) - 1):
        if ord(list1[i][j + 1]) - ord(list1[i][j]) == 1:
            res.append(list1[i])
print(res)
"
'zzz', 'zzzz']	"

input_string_list = ['x', 'y', 'z']
repeat_count = 4
list2 = [input_string_list[i] *
         (j + 1) for i in range(len(input_string_list)) for j in range(repeat_count)]
print(list2)
"
write a python program to multiply three numbers and print the result	"num1 = 2
num2 = 4
num3 = 6
print(num1 * num2 * num3)
"
Write a python program to print all pair combinations of 2 tuples.	"

test_tuple1 = (4, 5)
test_tuple2 = (7, 8)

res = [(a, b) for a in test_tuple1 for b in test_tuple2]
res = res + [(a, b) for a in test_tuple2 for b in test_tuple1]

print(""The filtered tuple : "" + str(res))
"
write a function to find length of list	"def get_list_length(l):
	return len(l)
"
missing dates show up with values of next non-missing date	"import pandas as pd
import numpy as np
ser = pd.Series([1, 10, 3, np.nan], index=pd.to_datetime(
	['2000-01-01', '2000-01-03', '2000-01-06', '2000-01-08']))
print(ser.resample('D').bfill())
"
display the sorted words	"for word in words:
	print(word)
"
write a function to return the square of first N numbers	"def get_squares(n):
	return [i * i for i in range(n)]
"
Write a python function to return minimum sum of factors of a number	"

def findMinSum(num):
	sum = 0

	i = 2
	while(i * i <= num):
        while(num % i == 0):
            sum += i
            num /= i
        i += 1
	sum += num

	return sum
"
keys. The function should just print the values only.	"def printDict():
	d = dict()
	for i in range(1, 21):
        d[i] = i**2
	for (k, v) in d.items():
        print(v)
"
8. Python Program to Convert Kilometers to Miles	"kilometers = 5.0
conv_fac = 0.621371
miles = kilometers * conv_fac
print('%0.2f kilometers is equal to %0.2f miles' % (kilometers, miles))
"
write a python list comprehension to print numbers in a given string	"string = ""Hello 12345 World""
numbers = [x for x in string if x.isdigit()]
print(numbers)
"
raise a RuntimeError exception.	"raise RuntimeError('something wrong')
"
write a program to print least frequent character in a string	"

str1 = ""watch the match""
all_freq = {}
for i in str1:
	if i in all_freq:
        all_freq[i] += 1
	else:
        all_freq[i] = 1
res = min(all_freq, key=all_freq.get)
print(""Minimum of all characters is: "" + str(res))
"
88 write a program which prints all permutations of [1,2,3]	"import itertools


print(list(itertools.permutations([1, 2, 3])))
"
Write a Python program to create the colon of a tuple.	"

from copy import deepcopy
tuplex = (""HELLO"", 5, [], True)
print(tuplex)
tuplex_colon = deepcopy(tuplex)
tuplex_colon[2].append(50)
"
write a python program to print 5 random vowels	"import random
vowels = ['a', 'e', 'i', 'o', 'u']
print([random.choice(vowels) for _ in range(5)])
"
message to the user.	"

number = int(input(""Number: ""))


if number % 2 == 0 and number % 4 != 0:
	print(""Your number is even..."")
elif number % 4 == 0:
	print(""Your number is a multiple of 4"")
else:
	print(""Your number is odd..."")
"
Number	"

def collatz(n):
	while n > 1:
        print(n, end=' ')
        if (n % 2):
            
            n = 3 * n + 1
        else:
            
            n = n // 2
	print(1, end='')
"
list for the below list	"

def bubble_sort(alist):
	for i in range(len(alist) - 1, 0, -1):
        no_swap = True
        for j in range(0, i):
            if alist[j + 1] < alist[j]:
                alist[j], alist[j + 1] = alist[j + 1], alist[j]
                no_swap = False
        if no_swap:
            return


alist = [2, 3, 5, 6, 4, 5]
bubble_sort(alist)
print('Sorted list: ', end='')
print(alist)
"
Generate a random date between given start and end dates	"import random
import time


def getRandomDate(startDate, endDate):
	print(""Printing random date between"", startDate, "" and "", endDate)
	randomGenerator = random.random()
	dateFormat = '%m/%d/%Y'

	startTime = time.mktime(time.strptime(startDate, dateFormat))
	endTime = time.mktime(time.strptime(endDate, dateFormat))

	randomTime = startTime + randomGenerator * (endTime - startTime)
	randomDate = time.strftime(dateFormat, time.localtime(randomTime))
	return randomDate


print(""Random Date = "", getRandomDate(""1/1/2016"", ""12/12/2018""))
"
Distinct Integers	"

class sub:
	def f1(self, s1):
        return self.f2([], sorted(s1))

	def f2(self, curr, s1):
        if s1:
            return self.f2(curr, s1[1:]) + self.f2(curr + [s1[0]], s1[1:])
        return [curr]


a = [2, 3, 5, 6, 4, 5]


print(""Subsets: "")
print(sub().f1(a))
"
write a program to replace duplicate word occurence in String	"

str1 = ""IISC is the best. IISC has Classes in the evening for professionals. Classes help to learn new things.""


repl_dict = {'IISC': 'It', 'Classes': 'They'}


str_list = str1.split(' ')


res = set()


for idx, ele in enumerate(str_list):
	if ele in repl_dict:
        print(str(idx) + '  ' + ele)
        if ele in res:
            str_list[idx] = repl_dict[ele]
        else:
            res.add(ele)


res = ' '.join(str_list)


print(""Replaced String: "" + str(res))
"
write a python program to calculate distance between tao points	"

import math
p1 = [4, 0]
p2 = [6, 6]
distance = math.sqrt(((p1[0] - p2[0])**2) + ((p1[1] - p2[1])**2))
print(f""The distance between {p1} and {p2} is {distance}"")
"
Write a python program to print calendar of a given year	"

import calendar

year = 2019
print(calendar.calendar(year))
"
Write a Python function to Find the Power of a Number Using Recursion	"

def power(base, exp):
	if(exp == 1):
        return(base)
	if(exp != 1):
        return(base * power(base, exp - 1))
"
write a python program to add and print two user defined list using map	"input_string = input(""Enter a list element separated by space "")
list1 = input_string.split()
input_string = input(""Enter a list element separated by space "")
list2 = input_string.split()
list1 = [int(i) for i in list1]
list2 = [int(i) for i in list2]
result = map(lambda x, y: x + y, list1, list2)
print(list(result))
"
are divisible by 5 and 7 , between 1 and 1000 inclusive.	"import random
print(
	random.sample(
        [i for i in range(1, 1001) if i % 5 == 0 and i % 7 == 0],
        5))
"
access first characters in a string	"word = ""Hello World""
letter = word[0]
print(f""First Charecter in String:{letter}"")
"
the number duplicated n times	"

def duplicate_array(num, n):
	num = [num] * n
	return num
"
7. python sigmoid function	"def sigmoid_activation(l):
	return[round(1 / (1 + math.exp(-x)), 2) for x in l]
"
a given string	"str1 = 'TestStringwith123456789'
no_of_letters, no_of_digits = 0, 0
for c in str1:
	no_of_letters += c.isalpha()
	no_of_digits += c.isnumeric()


print(no_of_letters)
print(no_of_digits)
"
[2,4,6,8] is even.	"li = [2, 4, 6, 8]
for i in li:
	assert i % 2 == 0
"
write a program to remove all duplicate characters from a string	"

str1 = ""what a great day!""
print("""".join(set(str1)))
"
Write a Python program to print largest element in an array	"arr = [10, 324, 45, 90, 9808]
print(f'the largest element in the array is {max(arr)}')
"
string format	"from datetime import datetime
given_date = datetime(2020, 2, 25)
string_date = given_date.strftime(""%Y-%m-%d %H:%M:%S"")
print(string_date)
"
tuples Using map() + eval	"

test_list = ['4, 1', '3, 2', '5, 3']
print(""The original list : "" + str(test_list))
res = list(map(eval, test_list))
print(""The list after conversion to tuple list : "" + str(res))
"
Write a Python Program to Map Two Lists into a Dictionary	"

def map_dict(keys, values):
	return dict(zip(keys, values))
"
write a python program to explain local and global scope	"

def f1():
	x = 'enclosing'

	def g():
        x = 'local'
        return x
	x = g()
	return x


obj2 = f1()
print('explain local scope:', obj2)
"
access first characters in a string	"word = ""Hello World""
letter = word[0]
print(f""First Charecter in String:{letter}"")
"
it's binary representation	"

def dec2bin(num):
	print(format(num, ""b""))
"
Compute the product of every pair of numbers from two lists	"list1 = [1, 2, 3]
list2 = [5, 6, 7]
final = [a * b for a in list1 for b in list2]
print(f""Product of every pair of numbers from two lists:{final}"")
"
keys and values	"a = {""a"": 1, ""b"": 2, ""c"": 3, ""d"": 4}
for k, v in a.items():
	print(k, v)
"
Write a Python program to create a symmetric difference	"setx = set([""apple"", ""mango""])
sety = set([""mango"", ""orange""])
setc = setx ^ sety
print(setc)
"
List to Order Key Nested dictionaries Using loop + enumerate()	"

test_list = [{""Gfg"": 3, 4: 9}, {""is"": 8, ""Good"": 2}, {""Best"": 10, ""CS"": 1}]


print(""The original list : "" + str(test_list))


res = dict()
for idx, val in enumerate(test_list):
	res[idx] = val


print(""The constructed dictionary : "" + str(res))
"
write a python function that returns biggest character in a string	"from functools import reduce


def biggest_char(string):
	if not isinstance(string, str):
        raise TypeError
	return reduce(lambda x, y: x if ord(x) > ord(y) else y, string)
"
itertools.permutations(iterable, r)	"def random_permutation(iterable, r=None):
	import random
	pool = tuple(iterable)
	r = len(pool) if r is None else r
	return tuple(random.sample(pool, r))
"
Write a python function that prints the factors of a given number	"

def print_factors(x):
	print(f""The factors of {x} are:"")
	for i in range(1, x + 1):
        if x % i == 0:
            print(i)
"
write a Python Program to Check Whether a String is Palindrome or Not	"my_str = 'aIbohPhoBiA'
my_str = my_str.casefold()
rev_str = reversed(my_str)
if list(my_str) == list(rev_str):
	print(""The string is a palindrome."")
else:
	print(""The string is not a palindrome."")
"
write a function to calculate speed given distance covered and time taken	"

def calspeed(dist, time):
	return dist / time
"
sorted dictionary with 'key' argument.	"

d = {'apple': 10, 'orange': 20, 'banana': 5, 'rotten tomato': 1}
print(sorted(d.items(), key=lambda x: x[1]))
"
90 Write a python function to round down a given decimal number	"

import math


def apply_ceil(num):
	return math.ceil(x)
"
Count Tuple Elements Inside List	"random = ['a', ('a', 'b'), ('a', 'b'), [3, 4]]
count = random.count(('a', 'b'))
print(""The count of ('a', 'b') is:"", count)
"
Python 3 program to find time for a given angle.	"

def calcAngle(hh, mm):
	hour_angle = 0.5 * (hh * 60 + mm)
	minute_angle = 6 * mm
	angle = abs(hour_angle - minute_angle)
	angle = min(360 - angle, angle)
	return angle
"
write a program to find and print the largest among three number	"snum1 = 10
num2 = 12
num3 = 14
if (num1 >= num2) and (num1 >= num3):
	largest = num1
elif (num2 >= num1) and (num2 >= num3):
	largest = num2
else:
	largest = num3
print(f'largest:{largest}')
"
write a program from given string replace each punctuation with #	"

from string import punctuation


str1 = '/*Jon is @developer & musician!!'
print(f""The original string is :{str1}"")
"
find the sum of the cube of each digit	"temp = num
while temp > 0:
	digit = temp % 10
	sum += digit ** 3
	temp //= 10
"
write a python function to prepend a single value in front of an iterator	"def prepend(value, iterator):
	import itertools
	return itertools.chain([value], iterator)
"
prints numbers between 0 and 10	"

import time


def print_loop_with_delay(sec):
	for i in range(0, 10):
        time.sleep(sec)
        print(i)
"
triangle and print the perimeter and area.	"

import math


AB = input(""Length of the first leg: "")
AC = input(""Length of the second leg: "")
AB = float(AB)
AC = float(AC)


BC = math.sqrt(AB + AC)
S = (AB * AC) / 2


P = AB + AC + BC
print(""Area of the triangle: %.2f"" % S)
print(""Perimeter of the triangle: %.2f"" % P)
"
the digits of the given integer	"def reverse(n):
	s = str(n)
	p = s[::-1]
	return p
"
Write a Python function that calculate side length of a equilateral polygon	"

import math


def side_length(no_of_sides, circumradius):
	return 2 * circumradius * math.sin(math.pi / no_of_sides)
"
Please write a program to print Python built-in functions document of abs()	"print(abs.__doc__)
"
35 write a program to find the most frequent element in a list	"
def most_frequent(List):
	counter = 0
	num = List[0]

	for i in List:
        curr_frequency = List.count(i)
        if(curr_frequency > counter):
            counter = curr_frequency
            num = i

	return num


List = [2, 1, 2, 2, 1, 3]
print(most_frequent(List))
"
Write a function to calculate volume of Triangular Pyramid	"def volumeTriangular(a, b, h):
	return (0.1666) * a * b * h
"
of list	"

test_list = ['[1, 4, 5]', '[4, 6, 8]']


print(f""The original list is : {test_list}"")


res = [i.strip(""[]"").split("", "") for i in test_list]


print(f""The list after conversion is : {res}"")
"
element that appears in a list	"

def most_frequent(list):
	return max(set(list), key=list.count)
"
"[""Hockey"",""Football""]."	"subjects = [""I"", ""You""]
verbs = [""Play"", ""Love""]
objects = [""Hockey"", ""Football""]
for i in range(len(subjects)):
	for j in range(len(verbs)):
        for k in range(len(objects)):
            sentence = ""%s %s %s."" % (subjects[i], verbs[j], objects[k])
            print(sentence)
"
write program to convert string to lower case	"st = ""AMMAR ADIL""


lower_st = st.lower()
print(""Lower Case"", lower_st)
"
Write a function to return the area of a rectangle	"def cal_area_rect(length, breadth):
	return length * breadth
"
Write Python Program to print if a Number is Odd or Even	"num = 102
if (num % 2) == 0:
	print(f""{num} is Even"")
else:
	print(f""{num} is Odd"")
"
numbers using yield	"def nextSquare():
	i = 1
	
	while True:
        yield i * i
        i += 1
"
76 write a program to print the binary value of the numbers from 1 to N	"

n = int(input(""Enter the value of N: ""))


for i in range(1, n + 1):
	print(""Binary value of "", i, "" is: "", bin(i))
"
write a python program to convert a set to a list	"myset = {1, 2, 4, 7}
mylist = list(myset)
"
sentence.	"def word_count(str):
	counts = dict()
	words = str.split()

	for word in words:
        if word in counts:
            counts[word] += 1
        else:
            counts[word] = 1

	return counts
"
Create and print a dictionary	"thisdict = {
	""brand"": ""Ford"",
	""model"": ""Mustang"",
	""year"": 1964
}
print(f""Sample Dictionary:{thisdict}"")
"
in matrix and print them	"

test_list = [[3, 4, 5], [1, 2, 4], [4, 1, 10]]


res = True
for idx in range(len(test_list[0])):

	col = [ele[idx] for ele in test_list]

	if len(list(set(col))) != len(col):
        res = False
        break

print(""Are all columns Unique : "" + str(res))
"
later part of the string	"def change_char(str1):
	char = str1[0]
	length = len(str1)
	str1 = str1.replace(char, '$')
	str1 = char + str1[1:]


return str1


print(change_char('restart'))
"
Reverse a given string	"str1 = ""PYnative""
print(""Original String is:"", str1)


str1 = str1[::-1]
print(""Reversed String is:"", str1)
"
Write a Python function to return octal value of a given integer	"def int_to_oct(a):
	return oct(a)
"
python program to detect number of local variables defined in a program	"def abc():
	x = 1
	y = 2
	str1 = ""w3resource""
	print(""Python Exercises"")


print(abc.__code__.co_nlocals)
"
write a program to multiply two Matrix	"X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]
Y = [[5, 8, 1, 2],
     [6, 7, 3, 0],
     [4, 5, 9, 1]]
result = [[0, 0, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]]


for i in range(len(X)):
	for j in range(len(Y[0])):
        for k in range(len(Y)):
            result[i][j] += X[i][k] * Y[k][j]
print(f""Final Result is{result}"")
"
nested dictionary and return it	"def lists_to_dict(test_list1, test_list2, test_list3):
	res = [{a: {b: c}}
           for (a, b, c) in zip(test_list1, test_list2, test_list3)]
	return res
"
Occurs in a List	"

a = [2, 3, 8, 9, 2, 4, 6]
k = 0
num = int(input(""Enter the number to be counted:""))
for j in a:
	if(j == num):
        k = k + 1
print(""Number of times"", num, ""appears is"", k)
"
52 write a python program to normalize a list of numbers and print the result	"a = [2, 4, 10, 6, 8, 4]
amin, amax = min(a), max(a)
for i, val in enumerate(a):
	a[i] = (val - amin) / (amax - amin)
print(a)
"
third edge, where the side lengths are all integers.	"def next_edge(side1, side2):
	return (side1 + side2 - 1)
"
86 write a program to convert meters into yards	"num = float(input(""Enter the distance measured in centimeter : ""))


inc = num / 2.54
print(""Distance in inch : "", inc)
"
Circle class has a method which can compute the area.	"class Circle(object):
	def __init__(self, r):
        self.radius = r

	def area(self):
        return self.radius**2 * 3.14
"
Write a python function to get the Cumulative sum of a list	"def Cumulative(lists):
	cu_list = []
	length = len(lists)
	cu_list = [sum(lists[0:x:1]) for x in range(0, length + 1)]
	return cu_list[1:]


 
l = [1, 2.0, 'hello', 'have', 'a', 'good', 'day']

s = 'hello'

if s in l:
	print(f'{s} is present in the list')
else:
	print(f'{s} is not present in the list')
"
index of value if the value of the key is list.	"test_list = [{'tsai': [5, 3, 9, 1], 'is': 8, 'good': 10},
             {'tsai': 1, 'for': 10, 'geeks': 9},
             {'love': 4, 'tsai': [7, 3, 22, 1]}]
N = 2
key = ""tsai""
for sub in test_list:
	if isinstance(sub[key], list):
        sub[key] = sub[key][N]
"
else return None ax**2 + bx + c = 0	"def roots_of_qad_eq(a: float, b: float, c: float):
	d = b**2 - 4 * a * c
	if d >= 0:
        return (-b + (d)**(1 / 2)) / 2 * a, (-b - (d)**(1 / 2)) / 2 * a
	else:
        return None
"
latitude and longitude.	"from math import radians, sin, cos, acos


print(""Input coordinates of two points:"")
slat = radians(float(input(""Starting latitude: "")))
slon = radians(float(input(""Ending longitude: "")))
elat = radians(float(input(""Starting latitude: "")))
elon = radians(float(input(""Ending longitude: "")))


dist = 6371.01 * acos(sin(slat) * sin(elat) + cos(slat)
                      * cos(elat) * cos(slon - elon))
print(""The distance is %.2fkm."" % dist)
"
by removing duplicates	"

set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}


print(set1.union(set2))
"
height as input	"def cylinder_volume(radius, height):
	volume = 3.14 * (radius ** 2) * height
	return volume
"
Write a Python program to convert a tuple to a string.	"tup = ('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')
str = ''.join(tup)
print(str)
"
Write a python program to reverse a string	"s = ""i like this program very much""
words = s.split(' ')
string = []
for word in words:
	string.insert(0, word)

print(""Reversed String:"")
print("" "".join(string))
"
Write a python function to check if number is divisible by all the digits	"

def allDigitsDivide(n):

	temp = n
	while (temp > 0):
        digit = temp % 10
        if not (digit != 0 and n % digit == 0):
            return False

        temp = temp // 10

	return True
"
write a python program for implementation of selection sort of list	"A = [64, 25, 12, 22, 11]


for i in range(len(A)):

	min_idx = i
	for j in range(i + 1, len(A)):
        if A[min_idx] > A[j]:
            min_idx = j

	A[i], A[min_idx] = A[min_idx], A[i]


print(f""Sorted array {A}"")
"
Write a Python Program to Check and print if a given year is a Leap Year	"year = 2000
if (year % 4) == 0:
	if (year % 100) == 0:
        if (year % 400) == 0:
            print(f""{year} is a leap year"")
        else:
            print(f""{year} is not a leap year"")
	else:
        print(f""{year} is a leap year"")
else:
	print(f""{year} is not a leap year"")
"
57 write a  program to convert decimal to binary, octal and hexadecimal	"dec = int(input(""Enter a decimal number: ""))

print(bin(dec), ""in binary."")
print(oct(dec), ""in octal."")
print(hex(dec), ""in hexadecimal."")
"
print its contents	"def read_and_print_file(filepath):
	with open(filepath, ""r"") as infile:
        print(infile.read())
"
new string	"def removeChars(str, n):
	return str[n:]
"
write a program to print 5 odd random numbers between 100 and 200	"import random
print(random.sample([i for i in range(10, 100) if i % 2 == 1], 5))
"
Write a python function Password match the required criteria:	"def PasswordMatchCriteria(pas):
	upper, lower, special, num = 0, 0, 0, 0
	for x in pas:
        if (len(pas) >= 6) and (len(pas) <= 12):
            if x.isupper():
                upper += 1
            elif x.islower():
                lower += 1
            elif x.isnumeric():
                num += 1
            elif x.isspace():
                j = 0
            else:
                special += 1
        if (upper > 0) and (lower > 0) and (special > 0) and (num > 0):
            return True
        else:
            False


passwords = input(""Enter Passwords which are seperated by \"",\"": "")
password = passwords.split("","")
for i in password:
	if PasswordMatchCriteria(i):
        print(i)
"
height	"

import math


def calc_hypotenuse(base, height):
	return math.sqrt(base * base + height * height)
"
write a python function to get the sum of numbers in a given digit	"
def getSum(n):
	sum = 0
	for digit in str(n):
        sum += int(digit)
	return sum
"
33 write a program to reverse words of string	"
def rev_sentence(sentence):
	words = sentence.split(' ')
	reverse_sentence = ' '.join(reversed(words))
	return reverse_sentence


if __name__ == ""__main__"":
	input = 'have a good day'
	print(rev_sentence(input))
"
operator in python.	"def multiply(x, y):
	if y < 0:
        return -multiply(x, -y)
	elif y == 0:
        return 0
	elif y == 1:
        return x
	else:
        return x + multiply(x, y - 1)
"
sentence	"sentence = 'this is my sentence and i will write it my way'
maxlength = 3
result = [word for word in sentence.split(' ') if len(word) <= minlength]
"
24. python program for the sum of first n numbers.	"def sum_n_num(n):
	return n * (n + 1) / 2
"
test if string contains digits	"word = ""Hello World""
check = word.isdigit()
print(f""String contains digits?:{check}"")
"
Removal all the characters other than integers from string	"str1 = 'I am 25 years and 10 months old'
res = """".join([item for item in str1 if item.isdigit()])
print(res)
"
write a python function to get 10 best Artists playing on Apple iTunes	"def get_artists():
	import requests
	url = 'https://itunes.apple.com/us/rss/topsongs/limit=10/json'
	response = requests.get(url)
	data = response.json()
	for artist_dict in data['feed']['entry']:
        artist_name = artist_dict['im:artist']['label']
        print(artist_name)
"
52 write a program to check Armstrong number	"

num = int(input(""Enter a number: ""))
sum = 0
temp = num

while temp > 0:
	digit = temp % 10
	sum += digit ** 3
	temp //= 10

if num == sum:
	print(num, ""is an Armstrong number"")
else:
	print(num, ""is not an Armstrong number"")
"
Given a list slice it into a 3 equal chunks and revert each list	"sampleList = [11, 45, 8, 23, 14, 12, 78, 45, 89]


length = len(sampleList)
chunkSize = int(length / 3)
start = 0
end = chunkSize
for i in range(1, 4, 1):
	indexes = slice(start, end, 1)
	listChunk = sampleList[indexes]
	mylist = [i for i in listChunk]
	print(""After reversing it "", mylist)
	start = end
	if(i != 2):
        end += chunkSize
	else:
        end += length - chunkSize
"
write a python function which is decorated on another function	"def myDecorator(func):
	def new_func(n):
        return '$' + func(n)
	return new_func


@ myDecorator
def myFunction(a):
	return(a)
"
and print the result #Example:input:InDiAaa #Output: iNdIaAA	"

s = input()
print(s.swapcase())
"
ar[i]+ar[j] is divisible by k in a data list	"def divisible_sum_pairs(arr, k):
	count = 0
	n = len(arr)
	for i in range(n - 1):
        j = i + 1
        while j < n:
            if ((arr[i] + arr[j]) % k) == 0:
                count += 1
            j += 1
	return count
"
triangle and compute the area.	"def triangle_area(base, height):
	area = base * height / 2
	return area
"
Test if string contains upper case	"word = ""Hello World""
check = word.isupper()
print(f""String contains upper case?:{check}"")
"
dictionary.	"
def checkKey(dict, key):

	if key in dict.keys():
        print(""Present, "", end="" "")
        print(""value ="", dict[key])
	else:
        print(""Not present"")
"
write a python function with generator for an infinite sequence	"def infinite_sequence():
	n = 0
	while True:
        yield n
        n += 1


import uuid
"
provided string.	"

def decapitalize(s, upper_rest=False):
	return ''.join([s[:1].lower(), (s[1:].upper() if upper_rest else s[1:])])
"
write Function to right rotate n by d bits	"def rightRotate(n, d):
	INT_BITS = 32

	return (n >> d) | (n << (INT_BITS - d)) & 0xFFFFFFFF


n = 16
d = 2


print(""Right Rotation of"", n, ""by"", d, ""is"", end="" "")
print(rightRotate(n, d))
"
other characters	"

string = ""$john.snow#@Got.bad_ending/com""
for ch in string:
	if (ch >= 'A' and ch <= 'Z') or (ch >= 'a' and ch <= 'z'):
        print(ch, end='')
	else:
        pass
"
41. Python Program to Add Two Matrices using Nested List Comprehension	"X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]


Y = [[5, 8, 1],
     [6, 7, 3],
     [4, 5, 9]]


result = [[X[i][j] + Y[i][j] for j in range(len(X[0]))] for i in range(len(X))]


for r in result:
	print(r)
"
write a python program to capitalize a string	"str1 = 'hello'
print(str1.capitalize())
"
Write a python program using kwargs	"def fav_colors(**kwargs):
	
	print(kwargs)
	for person, color in kwargs.items():
        print(f""{person}'s favorite color is {color}"")


fav_colors(sriju=""red"", faizu=""yellow"", kabir=""black"")
"
Check if the key exists or not in JSON	"import json


studentJson = """"""{
	""id"": 1,
	""name"": ""Piyush Jain"",
	""class"": null,
	""percentage"": 35,
	""email"": ""piyushjain220@gmail.com""
}""""""


print(""Checking if percentage key exists in JSON"")
student = json.loads(studentJson)
if ""percentage"" in student:
	print(""Key exist in JSON data"")
	print(student[""name""], ""marks is: "", student[""percentage""])
else:
	print(""Key doesn't exist in JSON data"")
"
37. python function to find angle between hour hand and minute hand	"def calcAngle(hh, mm):

	
	
	
	hour_angle = 0.5 * (hh * 60 + mm)
	minute_angle = 6 * mm

	
	
	angle = abs(hour_angle - minute_angle)

	
	
	angle = min(360 - angle, angle)

	return angle
"
1 write a program to get numbers = 1,3,11,42,12,4001	"highestnumber = -999
for i in numbers:
	if i > highestnumber:
        highestnumber = i
print(numbers.index(highestnumber))
"
write a python program to print the items in a list apart from the first 4	"my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(my_list[4:])
"
write a python function to convert from Celcius to fahrenhiet	"

def cel_to_fah(celcius):
	return 9 * celcius / 5 + 32
"
Write a Python program to add member(s) in a set	"color_set = set()
color_set.add(""Red"")
color_set.update([""Blue"", ""Green""])
print(color_set)
"
between 2000 and 3200 (both included).	"l = []
for i in range(2000, 3201):
	if (i % 7 == 0) and (i % 5 != 0):
        l.append(str(i))


print(','.join(l))
"
character array using itertools	"import itertools


def extract_characters(input_list):
	return [char_val for char_val in itertools.chain.from_iterable(input_list)]
"
Write a python function to find greatest common divisor	"

def greatest_common_divisor(x, y):
	print(""For"", x, ""and"", y, "","")
	r = x % y
	while r > 0:
        r = x % y
        if r == 0:
            print(""the greatest common divisor is"", y, ""."")
        else:
            q = y
            x = q
            y = r


greatest_common_divisor(1071, 1029)
"
Write a Python Program to print the Factorial of a Number	"num = 7
factorial = 1
if num < 0:
	print(""Sorry, factorial does not exist for negative numbers"")
elif num == 0:
	print(""The factorial of 0 is 1"")
else:
	for i in range(1, num + 1):
        factorial = factorial * i
	print(""The factorial of"", num, ""is"", factorial)
"
write a python function that would reverse the given string	"def reverse_string(str_to_be_reversed):
	return str_to_be_reversed[::-1]
"
comprehension and returns the result	"def square_numbers(nums):
	return [i * i for i in nums]
"
candidates where the chosen numbers sum to target.	"

def combinationSum(candidates, target):
	results = []

	def helper(i, path):
        if sum(path) == target:
            results.append(path[:])
            return

        if sum(path) > target:
            return

        for x in range(i, len(candidates)):
            path.append(candidates[x])
            helper(x, path)
            path.pop()

	helper(0, [])
	return results
"
write a python function to return a set of all punctuation used in a string	"def get_punctuations(sentence):
	punctuations = '''!()-[]{};:'""\\,<>./?@#$%^&*_~'''
	used_punctuation = set()
	for char in sentence:
        if char in punctuations:
            used_punctuation.add(char)
	return used_punctuation
"
rabbits and how many chickens do we have?	"def solve(numheads, numlegs):
	ns = 'No solutions!'
	for i in range(numheads + 1):
        j = numheads - i
        if 2 * i + 4 * j == numlegs:
            return i, j
	return ns, ns
"
print the key element if found	"

def binary_search(alist, key):
	
	start = 0
	end = len(alist)
	while start < end:
        mid = (start + end) // 2
        if alist[mid] > key:
            end = mid
        elif alist[mid] < key:
            start = mid + 1
        else:
            return mid
	return -1


alist = [2, 3, 5, 6, 4, 5]


key = 6

index = binary_search(alist, key)
if index < 0:
	print(f'{key} was not found.')
else:
	print(f'{key} was found at index {index}.')
"
list using list comprehension + join()	"

test_list = [('G', 'E', 'E', 'K', 'S'), ('F', 'O', 'R'),
             ('G', 'E', 'E', 'K', 'S')]
print(""The original list is : "" + str(test_list))
res = [''.join(i) for i in test_list]
print(""The list after conversion to list of string : "" + str(res))
"
write a function to replace vowels with a specific character K	"

def replacewith_K(test_str, K):

	vowels = 'AEIOUaeiou'
	for ele in vowels:
        test_str = test_str.replace(ele, K)

	return test_str
"
write a python function to add user provided list and return the result	"def addlist(list1, list2):
	result = list1 + list2
	return result


answer = addlist(['cat', 'dog'], ['samsung', 'oneplus'])
"
write a python program to add and square a range of number	"x = [i**+1 for i in range(3)]
print(x)
"
or tuple or string and returns the new sorted sequence	"def selection_sort(list_to_be_sorted):
	sorted_list = list_to_be_sorted[:]
	for i in range(len(sorted_list)):
        new_min = sorted_list[i]
        new_min_old_place = i
        for j in range(i + 1, len(sorted_list)):
            if new_min > sorted_list[j]:
                new_min = sorted_list[j]
                new_min_old_place = j
        old_val = sorted_list[i]
        sorted_list[i] = new_min
        sorted_list[new_min_old_place] = old_val
	return sorted_list
"
want to reuse this name:	"def my_func():
	print(var)  
	var = 'locally changed'  


var = 'global'
my_func()
"
write a python function to map a numeric lookup using bisect	"def grade(score, breakpoints=[60, 70, 80, 90], grades='FDCBA'):
	from bisect import bisect
	i = bisect(breakpoints, score)
	return grades[i]
"
write a function to calculate the sum of digits of a number	"

def sum_of_digits(num):
	sum = 0
	while(num > 0):
        sum += num % 10
        num = num // 10
	return sum
"
Write a function to return the perimeter of a rectangle	"def cal_perimeter_rect(length, bredth):
	return 2 * (length + bredth)
"
them alphabetically.	"items = [x for x in raw_input().split(',')]
items.sort()
print(','.join(items))
"
Write a Python function to return Syslvester's Sequence	"def syslvester_seq(n):
	if n == 1:
        return 2
	if n > 1:
        return syslvester_seq(n - 1)**2 - syslvester_seq(n - 1) + 1
"
such tuples	"def zip_(list_of_seq):
	return list(zip(*list_of_seq))
"
doesn't occur twice.	"def single_number(arr):
	result = 0
	for i in arr:
        result ^= i
	return result
"
display the unpunctuated string	"print(no_punct)
"
write a python function to emulate the behavior of built-in map() function	"def pad_none(iterable):
	
	from itertools import chain, repeat
	return chain(iterable, repeat(None))
"
print the key element if found	"

def binary_search_rec(alist, start, end, key):
	
	if not start < end:
        return -1

	mid = (start + end) // 2
	if alist[mid] < key:
        return binary_search_rec(alist, mid + 1, end, key)
	elif alist[mid] > key:
        return binary_search_rec(alist, start, mid, key)
	else:
        return mid


alist = [2, 3, 5, 6, 4, 5]


key = 6

index = binary_search_rec(alist, 0, len(alist), key)
if index < 0:
	print(f'{key} was not found.')
else:
	print(f'{key} was found at index {index}.')
"
ax**2 + bx + c = 0	"def sum_of_roots(a: float, c: float):
	if a:
        return c / a
	else:
        return None
"
write a python program to print the least frequent character in a string	"test_str = ""this is test string""
all_freq = {}
for i in test_str:
	if i in all_freq:
        all_freq[i] += 1
	else:
        all_freq[i] = 1
res = min(all_freq, key=all_freq.get)
print(res)
"
34. Python Program to Map two lists into a Dictionary	"

keys = ['name', 'age', 'job']
values = ['John', 25, 'Developer']


myDict = {k: v for k, v in zip(keys, values)}
print(""Dictionary Items  :  "", myDict)
"
write a python program to count the len of unique elements	"

nums = set([1, 1, 2, 3, 3, 3, 4, 4])
print(len(nums))
"
"and ""Female"" for Female class."	"class Person(object):
	def getGender(self):
        return ""Unknown""


class Male(Person):
	def getGender(self):
        return ""Male""


class Female(Person):
	def getGender(self):
        return ""Female""


aMale = Male()
aFemale = Female()
print(aMale.getGender())
print(aFemale.getGender())
"
call the decorated function	"print(myFunction('100'))
"
Write a function to return the cartisian distance between two points	"def cal_cart_distance(x1: float, y1: float, x2: float, y2: float) -> float:
	return ((x1 - x2)**2 + (y1 - y2)**2)**(1 / 2)
"
2 write a program to find sum of elements in list	"list1 = [11, 5, 17, 18, 23]
total = sum(list1)
print(""Sum of all elements in given list: "", total)
"
equation ax**2 + bx + c = 0	"

import cmath


a = 1
b = 5
c = 6


d = (b**2) - (4 * a * c)


sol1 = (-b - cmath.sqrt(d)) / (2 * a)
sol2 = (-b + cmath.sqrt(d)) / (2 * a)


print('The solution are {0} and {1}'.format(sol1, sol2))
"
write a program to move numbers to the end of a string	"

str1 = 'hi 123 how are you doing? 567 is with you. Take care of 89'

res = ''
dig = ''


for ele in str1:
	if ele.isdigit():
        dig += ele
	else:
        res += ele

res += dig


print(""Strings after digits at end : "" + str(res))
"
using dictionary comprehension	"input = [{""foo"": ""bar"", ""Hello"": ""World""},
         {""key1"": ""val1"", ""key2"": ""val2""},
         {""sample_key"": ""sample_val""}]
merged_dict = {key: value for d in input for key, value in d.items()}
"
write a python program to print the list having sum of digits	"list1 = [12, 67, 98, 34]
list2 = []
for i in list1:
	sum = 0
	for digit in str(i):
        sum += int(digit)
	list2.append(sum)
print(list2)
"
write a python program to shuffle the items in a list and print it	"from random import shuffle
mylist = [1, 2, 3, 4, 5]
shuffle(mylist)
print(mylist)
"
Write a program to get a list of locally installed Python modules	"import pkg_resources
installed_packages = pkg_resources.working_set
installed_packages_list = sorted([""%s==%s"" % (i.key, i.version)
                                  for i in installed_packages])
for m in installed_packages_list:
	print(m)
"
Count the number of spaces in a sring	"s = ""Count, the number of spaces""
lenx = s.count(' ')
print(f""number of spaces in sring: {lenx}"")
"
Write a function to return the median of numbers in a list	"def cal_median(num_list: list) -> float:
	if num_list:
        if len(num_list) % 2 != 0:
            return sorted(num_list)[int(len(num_list) / 2) - 1]
        else:
            return (sorted(num_list)[
                int(len(num_list) / 2) - 1] + sorted(num_list)[int(len(num_list) / 2)]) / 2
	else:
        return None
"
10 write a python function to remove duplicate from a list.	"def remove_duplicates(dup_list: list):
	print(list(set(dup_list)))
"
write a python function that returns first element of a list	"

def head(lst):
	return lst[0]
"
write a python program to check if a number is positive, negative or 0	"num = float(input(""Enter a number: ""))
if num > 0:
	print(""Positive number"")
elif num == 0:
	print(""Zero"")
else:
	print(""Negative number"")
"
Define a custom exception class which takes a string message as attribute.	"class MyError(Exception):
	def __init__(self, msg):
        self.msg = msg


error = MyError(""something wrong"")
"
write a python function to get the maximum element in a list	"

def max(list):
	return max(list)
"
and prints the comments	"

def bmi(height: ""Meters"", weight: ""Kgs""):
	bmi = weight / (height**2)
	print(""Your BMI is: {0} and you are "".format(bmi), end='')
	if (bmi < 16):
        print(""severely underweight."")
	elif (bmi >= 16 and bmi < 18.5):
        print(""underweight."")
	elif (bmi >= 18.5 and bmi < 25):
        print(""healthy."")
	elif (bmi >= 25 and bmi < 30):
        print(""overweight."")
	elif (bmi >= 30):
        print(""severely overweight."")
"
print it.	"ini_list = [{'a': [1, 2, 3], 'b':[4, 5, 6]},
            {'c': [7, 8, 9], 'd':[10, 11, 12]}]
temp_dict = {}
result = []
for ini_dict in ini_list:
	for key in ini_dict.keys():
        if key in temp_dict:
            temp_dict[key] += ini_dict[key]
        else:
            temp_dict[key] = ini_dict[key]
for key in temp_dict.keys():
	result.append(tuple([key] + temp_dict[key]))
print(""Resultant list of tuples: {}"".format(result))
"
Generate  random String of length 5	"import random
import string


def randomString(stringLength):
	
	letters = string.ascii_letters
	return ''.join(random.choice(letters) for i in range(stringLength))


print(""Random String is "", randomString(5))
"
Write a function that will provide the ascii value of a character	"

def charToASCII(chr):
	return f'ASCII value of {chr} is: {ord(chr)}'
"
word of a given string	"def capitalize_both_ends(x): return x[0].upper() + x[1:-1] + x[-1].upper()


def capitalize_first_and_last(string):
	string = string.strip().split()
	new_string = [capitalize_both_ends(word) for word in string]
	return new_string
"
16 write a program to find Maximum and Minimum K elements in Tuple	"test_tup = (5, 20, 3, 7, 6, 8)
print(""The original tuple is : "" + str(test_tup))
K = 2
test_tup = list(test_tup)
temp = sorted(test_tup)
res = tuple(temp[:K] + temp[-K:])
print(""The extracted values : "" + str(res))
"
write a python function to read a CSV file and print its content	"def read_csv(filename):
	import csv
	with open(filename, newline='') as f:
        reader = csv.reader(f)
        for row in reader:
            print(row)
"
write a python program to give the next fibonacci number	"
num_1, num_2, count = 0, 1, 0


def next_fibbonacci_number():

	nonlocal num_1, num_2, count

	if(count == 0):
        count += 1
        return 0
	elif(count == 1):
        count += 1
        return num_2
	else:
        num_1, num_2 = num_2, num_1 + num_2
        return num_2


return next_fibbonacci_number
"
the sum and average	"
L = [4, 5, 1, 2, 9, 7, 10, 8]

count = 0

for i in L:
	count += i


avg = count / len(L)

print(""sum = "", count)
print(""average = "", avg)
"
write a python program for basic HTML parser	"

class MyHTMLParser(HTMLParser):
	def handle_starttag(self, tag, attrs):
        print(tag)
        for attr in attrs:
            print(""->"", attr[0], "">"", attr[1])


parser = MyHTMLParser()


for i in range(int(input())):
	parser.feed(input())
"
write a python function to Count Set Bits in a Number	"def count_set_bits(n):
	count = 0
	while n:
        n &= n - 1
        count += 1
	return count
"
Driver Code	"tup = [('for', 24), ('is', 10), ('to', 28),
       ('goal', 1), ('portal', 20), ('a', 15)]

Sort_Tuple(tup)
"
the sum	"def add_two_numbers(num1, num2):
	sum = num1 + num2
	return sum
"
write a  python program to check and print if a string is palindrome or not	"st = 'malayalam'
j = -1
flag = 0
for i in st:
	if i != st[j]:
        j = j - 1
        flag = 1
        break
	j = j - 1
if flag == 1:
	print(""Not a palindrome"")
else:
	print(""It is a palindrome"")
"
11 write a function to reverse every word in a string	"def reverse_word(sen: str):
	words = sen.split(' ')
	rever_word = [i[::-1] for i in words]
	final_sen = ' '.join(rever_word)
	print(final_sen)
"
initializing K	"K = 2


for i in test_list:
	if len(i) == K:
        list1.remove(i)
print(list1)
"
"For example, the string ""AAAABBBCCDAAA"" would be encoded as ""4A3B2C1D3A"""	"def encode_string(str1):
	encoded = """"
	ctr = 1
	last_char = str1[0]

	for i in range(1, len(str1)):

        if last_char == str1[i]:
            ctr += 1

        else:
            encoded += str(ctr) + last_char
            ctr = 0
            last_char = str1[i]
            ctr += 1
	encoded += str(ctr) + last_char
	return encoded
"
14 write program to extract digits from Tuple list	"test_list = [(15, 3), (3, 9), (1, 10), (99, 2)]
print(""The original list is : "" + str(test_list))
temp = map(lambda ele: str(ele), chain.from_iterable(test_list))
res = set()
for sub in temp:
	for ele in sub:
        res.add(ele)
print(""The extrated digits : "" + str(res))
"
Write a function to return the surface area of a hemi-sphere	"def cal_area_hemisphere(radius):
	pi = 3.14
	return 2 * pi * (radius**2)
"
12 write a python program to find decreasing point in a list and print them	"test_list = [3, 6, 8, 9, 12, 5, 18, 1]

res = -1
for idx in range(0, len(test_list) - 1):

	if test_list[idx + 1] < test_list[idx]:
        res = idx
        break

print(""Decreasing Point : "" + str(res))
"
!touch abc.txt	"file = open(""abc.txt"", ""r"")
Counter = 0
Content = file.read()
CoList = Content.split(""\n"")
for i in CoList:
	if i:
        Counter += 1
print(f""There are {Counter} number of lines in the file"")
"
print in reverse order with a space	"

first_name = input(""Enter your first name: "")
last_name = input(""Enter your last name: "")
print(last_name.strip() + "" "" + first_name.strip())
"
28 write a program to check whether a given string is Heterogram or not	"

def heterogram(input):

	alphabets = [
        ch for ch in input if (
            ord(ch) >= ord('a') and ord(ch) <= ord('z'))]

	if len(set(alphabets)) == len(alphabets):
        print('Yes')
	else:
        print('No')
"
function. The list is: [1,2,3,4,5,6,7,8,9,10].	"li = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
evenNumbers = filter(lambda x: x % 2 == 0, li)
print(evenNumbers)
"
pseudo-random data	"def get_cryptographically_secure_data(n=101):
	return secrets.token_bytes(n), secrets.token_hex(n)
"
row) as input from the user and print the output.	"

size = int(input(""Input the size of the matrix: ""))
matrix = [[0] * size for row in range(0, size)]
for x in range(0, size):

	line = list(map(int, input().split()))

	for y in range(0, size):
        matrix[x][y] = line[y]


matrix_sum_diagonal = sum(matrix[size - i - 1][size - i - 1]
                          for i in range(size))
"
Write a Python function to calculate dot product of two given sequence	"

def dot_product(a, b):
	return sum(e[0] * e[1] for e in zip(a, b))
"
number and its cube in each tuple	"
list1 = [1, 2, 5, 6]

res = [(val, pow(val, 3)) for val in list1]

print(res)
"
Write a function to Get Kth Column of Matrix	"def kth_column(test_list=[[4, 5, 6], [8, 1, 10], [7, 12, 5]], k=2):

	print(""The original list is : "" + str(test_list))
	K = k
	res = list(zip(*test_list))[K]
	print(""The Kth column of matrix is : "" + str(res))
"
month, year from a date	"import datetime


def get_attributes_from_date(date_string, *args):
	if(isinstance(date_string, datetime.datetime) == False):
        print(""Input string is not a valid datetime type"")
        raise TypeError
	get_attrs = [i for i in dir(date_string) if not callable(i)]
	arg_list = []
	for attr in args:
        if(attr not in get_attrs):
            print(""Invalid argument passed"", attr)
            raise AttributeError
        print(attr, ':', getattr(date_string, attr))
        arg_list.append((attr, getattr(date_string, attr)))
	return arg_list
"
Write a function that will convert a string into camelCase	"

from re import sub


def camelCase(string):
	string = sub(r""(_|-)+"", "" "", string).title().replace("" "", """")
	return string[0].lower() + string[1:]
"
Write a Python function to return Fermat's Sequence	"def fermat_seq(n):
	if n >= 0:
        return 2 ** (2**n) + 1
"
list of dictionaries Using zip() + map() + values()	"

test_list = [{'gfg': 1, 'best': 2}, {'gfg': 4, 'best': 5}]


print(""The original list : "" + str(test_list))


res = list(zip(*map(dict.values, test_list)))

print(""Segregated values of keys are : "" + str(res))
"
write a program for round for integers	"integer = 18
print(f""Round off value : {round(integer , -1)}"")
"
write a python function to convert an angle from radians to degrees.	"

def rads_to_degrees(rad):
	return (rad * 180.0) / 3.14
"
write a python function to return the dot product of two vectors	"def dotproduct(vec1, vec2):
	return sum(map(operator.mul, vec1, vec2))
"
write a python function to return words in a sentence in sorted order	"def get_sorted_words(sentence):
	words = [word for word in sentence.split()]
	words.sort()
	return words
"
Python	"from datetime import datetime, timedelta
given_date = datetime(2020, 2, 25)
days_to_subtract = 7
res_date = given_date - timedelta(days=days_to_subtract)
print(res_date)
"
write a function to accept input as feet and inches into centimeters	"def height_into_cms(feet, inches):
	ininches = feet * 12 + inches
	return ininches * 2.54
"
Write a Python function to find the maximum EVEN number from a given list	"def even_max_checker(list1):
	maxnum = 0
	for num in list1:
        if num % 2 == 0:
            if num > maxnum:
                maxnum = num
	return maxnum
"
and print the letters in descending order of frequency.	"word = input()
dct = {}
for i in word:
	dct[i] = dct.get(i, 0) + 1


dct = sorted(dct.items(), key=lambda x: (-x[1], x[0]))
for i in dct:
	print(i[0], i[1])
"
Write a python function to generate a random hexadecimal key of length n	"import random


def rand_run_name(n):
	ran = random.randrange(10**80)
	myhex = ""%064x"" % ran
	
	myhex = myhex[:n]
	return myhex
"
write a python code to implement Sigmoid function	"

def sigmoid(x):
	return 1 / (1 + math.exp(-x))
"
Write a python program to print the combination of tuples in list of tuples	"
test_list = [([1, 2, 3], 'gfg'), ([5, 4, 3], 'cs')]

res = [(tup1, tup2) for i, tup2 in test_list for tup1 in i]


print(""The list tuple combination : "" + str(res))
"
diagonal measure is given	"
def CubeVolume(d):
	Volume = (1.73205 * pow(d, 3)) / 9
	return Volume
"
Breakable Buffalo on Aug 09 2020 Donate	"def is_camel_case(s):
	return s != s.lower() and s != s.upper() and ""_"" not in s
"
and guess it within 3 guesses	"print(""Please guess a number between 1 and 5 and I will guess within 3 chances!"")
guess1 = input(""Is it <= 3? enter y/n \n"")
if guess1 == ""y"":
	guess2 = input(""Is it <= 2? enter y/n \n"")
	if guess2 == ""y"":
        guess3 = input(""Is it 1? enter y/n \n"")
        if guess3 == ""y"":
            print(""Yay! found the number, its 1"")
        else:
            print(""Yay! found the number, its 2"")
	else:
        print(""Yay! found the number, its 3"")
else:
	guess2 = input(""Is it 4? enter y/n \n"")
	if guess2 == ""y"":
        print(""Yay! found the number, its 4"")
	else:
        print(""Yay! found the number, its 5"")
"
54 Write a Python function to check if a number is a perfect square	"def is_perfect_square(n):
	x = n // 2
	y = set([x])
	while x * x != n:
        x = (x + (n // x)) // 2
        if x in y:
            return False
        y.add(x)
	return True
"
write a program which prints all permutations of [1,2,3]	"import itertools
print(list(itertools.permutations([1, 2, 3])))
"
removing the value 24 in [12,24,35,24,88,120,155].	"li = [12, 24, 35, 24, 88, 120, 155]
li = [x for x in li if x != 24]
print(li)
"
Python program to execute a string containing Python code.	"mycode = 'print(""hello world"")'
code = """"""
def multiply(x,y):
	return x*y


print('Multiply of 2 and 3 is: ',multiply(2,3))
""""""
exec(mycode)
exec(code)
"
source directory to a different destination directory	"import glob
import os


def find_move_files(src_dir_path, dst_dir_path, file_pattern):
	if(os.path.exists(dst_dir_path) == False):
        print(""Destination Path doesn't exist"")
        return
	all_png_files = glob.glob(src_dir_path + ""/*"" + file_pattern)
	if (len(all_png_files) > 0):
        for file_name in all_png_files:
            base_file_name = os.path.basename(file_name)
            os.replace(file_name, os.path.join(dst_dir_path, base_file_name))
        return
	else:
        print(""No files with matching pattern found"")
        return
"
from 1 to 10 and values are squares of the key	"square_dict = {}
for i in range(1, 11):
	square_dict[i] = i * i
"
write Python Program to Count the Number of Lines in a Text File	"fname = input(""Enter file name: "")
num_lines = 0
with open(fname, 'r') as f:
	for line in f:
        num_lines += 1
print(""Number of lines:"")
print(num_lines)
"
printing the values	"print(""Principle amount: "", p)
print(""Interest rate	: "", r)
print(""Time in years	: "", t)
print(""Simple Interest : "", si)
"
Write a function to calculate Volume of Hexagonal Pyramid	"def volumeHexagonal(a, b, h):
	return a * b * h
"
Write a Python Program to print Prime Factors of an Integer	"

n = 24
print(""Factors are:"")
i = 1
while(i <= n):
	k = 0
	if(n % i == 0):
        j = 1
        while(j <= i):
            if(i % j == 0):
                k = k + 1
            j = j + 1
        if(k == 2):
            print(i)
	i = i + 1
"
write a python program to print the character of an ASCII value	"value = 65
print(f'The ASCII value {value} is of the character {chr(value)}')
"
time in this cosmos.	"def get_uuid():
	return uuid.uuid4()


import secrets
"
92 write a python program to sort list under tuples and print it	"

test_tup = ([7, 5, 4], [8, 2, 4], [0, 7, 5])
print(""The original tuple is : "" + str(test_tup))
s = tuple(sorted([j for j in i], reverse=False) for i in test_tup)
print(f'the sorted list inside tuple is {s}')
"
and prints a dictionary value list where each key is a category.	"test_list = [(1, 3), (1, 4), (2, 3), (3, 2), (5, 3), (6, 4)]
res = {}
for i, j in test_list:
	res.setdefault(j, []).append(i)
print(""The dictionary converted from tuple list : "" + str(res))
"
given integers	"a, b = 312, 410
print(len(str(a * b)))
"
Only the first clause of generators is evaluated immediately	"gen_fails = (i for i in 1 / 0)
"
Generate random Universally unique IDs	"import uuid
safeId = uuid.uuid4()
print(""safe unique id is "", safeId)
"
iterating through the list index by index	"b = [2, 4, 5, 6]
for index, item in enumerate(b):
	print(index, item)
	if not item % 2:
        b.remove(item)
print(b)
"
45. Python Program to Check Whether a String is Palindrome or Not	"

my_str = 'aIbohPhoBiA'
"
every number in a list	"

def comp_power(lst):
	return list(map(lambda x: x ** 1.5, lst))
"
write a python program to print if year is a leap year or not	"year = 2000
if (year % 4) == 0:
	if (year % 100) == 0:
        if (year % 400) == 0:
            print(""{0} is a leap year"".format(year))
        else:
            print(""{0} is not a leap year"".format(year))
	else:
        print(""{0} is a leap year"".format(year))
else:
	print(""{0} is not a leap year"".format(year))
"
48 write a python Program to multiply two matrices and print the result	"X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]
Y = [[5, 8, 1, 2],
     [6, 7, 3, 0],
     [4, 5, 9, 1]]
result = [[0, 0, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]]


for i in range(len(X)):
	for j in range(len(Y[0])):
        for k in range(len(Y)):
            result[i][j] += X[i][k] * Y[k][j]


for r in result:
	print(r)
"
local vs. enclosed	"def outer():
	x = 1
	print('outer before:', x)

	def inner():
        x = 2
        print(""inner:"", x)
	inner()
	print(""outer after:"", x)


outer()
"
the keys	"def sort_list_with_key():
	animals = [
        {'type': 'lion', 'name': 'Mr. T', 'age': 7},
        {'type': 'tiger', 'name': 'scarface', 'age': 3},
        {'type': 'puma', 'name': 'Joe', 'age': 4}]
	print(sorted(animals, key=lambda animal: -animal['age']))
"
in a function.	"def abc():
	x = 1
	y = 2
	str1 = ""w3resource""


print(abc.__code__.co_nlocals)
"
write a Python program to multiply two numbers and print it	"num1 = 1.5
num2 = 6.3
product = num1 * num2
print(f'product: {product}')
"
write a program to display date and time	"

now = datetime.datetime.now()
time = now.strftime(""%Y-%m-%d %H:%M:%S"")
print(f""Current date and time : {time}"")
"
write a python program to convert uppercase string to lower	"

a = 'STRING'
print(f'convert lowercase to uppercase:{a.lower()}')
"
Write a Python program that prints all the numbers from 0 to 6 except 3 and 6	"for x in range(6):
	if (x == 3 or x == 6):
        continue
print(x, end=' ')
print(""\n"")
"
are square of numbers between 1 and 20 (both included).	"def printTuple():
	li = list()
	for i in range(1, 21):
        li.append(i**2)
	print(tuple(li))
"
Write a function that returns a replace values in string with values provided	"def replace_values(s: str, old, new) -> str:
	s.replace(old, new)
"
print it	"def word_count(fname):
	num_words = 0
	with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            num_words += len(words)
	print(num_words)
"
10 write a python function to return the median of a list	"

def calc_median(arr):
	arr = sorted(arr)
	if len(arr) / 2 == 0:
        return arr[len(arr) / 2]
	else:
        return (arr[len(arr) // 2] + arr[(len(arr) - 1) // 2]) / 2
"
Write a python program print the the number of occurrences of 8 in a list	"def countX(lst, x):
	count = 0
	for ele in lst:
        if (ele == x):
            count = count + 1
	return count


lst = [8, 6, 8, 10, 8, 20, 10, 8, 8]
x = 8
print('{} has occurred {} times'.format(x, countX(lst, x)))
"
Write a function to merge two lists element wise	"

def merge_lists(l1: list, l2: list):
	return list(zip(l1, l2))
"
tuples are immutable	"tup = (1,)
tup[0] += 1
"
Rotate an array of n elements to the right by k steps.	"org = [1, 2, 3, 4, 5, 6, 7]
result = org[:]
steps = 3


for idx, num in enumerate(org):
	if idx + steps < len(org):
        result[idx + steps] = org[idx]
	else:
        result[idx + steps - len(org)] = org[idx]


print(result)
"
write a python program to check and print if a number is prime	"num = 407
if num > 1:
	for i in range(2, num):
        if (num % i) == 0:
            print(num, ""is not a prime number"")
            break
        else:
            print(num, ""is a prime number"")
else:
	print(num, ""is not a prime number"")
"
write a python function that returns the square of a given input number	"def square(x):
	return x**2
"
Write a Python Program to Check if a Number is a Perfect Number	"

def perfect_no_check(n):
	sum1 = 0
	for i in range(1, n):
        if(n % i == 0):
            sum1 = sum1 + i
	if (sum1 == n):
        return True
	else:
        return False
"
write a python program to merge two lists	"odd = [1, 3, 5, 7, 9]
even = [2, 4, 6, 8, 10]
odd.extend(even)
"
keys.	"def printDict():
	d = dict()
	d[1] = 1
	d[2] = 2**2
	d[3] = 3**2
	print(d)
"
Write a Python function to return Jacobsthal's number	"def jacobsthal_seq(n):
	if n >= 0:
        if n == 0:
            return 0
        elif n == 1:
            return 1
        else:
            return 2 * jacobsthal_seq(n - 2) + jacobsthal_seq(n - 1)
"
and print it	"

test_list = [{""Gfg"": 8, ""is"": 1, ""Best"": 9},
             {""Gfg"": 2, ""is"": 9, ""Best"": 1},
             {""Gfg"": 5, ""is"": 10, ""Best"": 7}]

print(""The original list is : "" + str(test_list))


res = {}
for i in test_list:
	for key, value in i.items():

        if key in res:
            res[key] = max(res[key], value)
        else:
            res[key] = value

print(""All keys maximum : "" + str(res))
"
Write a Python function to check all elements of a list are the same or not	"def check_equal(a):
	return a[1:] == a[:-1]
"
removes trailing characters	"word = "" xyz ""
rstrip = word.rstrip()
print(f""String ater removal of trailing characters:{rstrip}"")
"
Write a function to identify if value is present inside a list or not	"def check_listvalue(l: list, value) -> bool:
	return value in l
"
49 function to show annotation	"def anno_func(a: ""Mandatory"",
              b: ""Optional"" = 2,
              c: ""Optional"" = 10,
              *args: ""Extra Position variable"",
              **kwargs: ""Provide extra to unpack dictionary"") -> 'Documentation to show how to do do annotation':
	
	pass
"
75 return dot product of two vectors	"def dot_product(a: ""Vector1"", b: ""Vector2""):
	return sum(e[0] * e[1] for e in zip(a, b))
"
10. Python Program to Check if a Number is Positive, Negative or 0	"num = float(input(""Enter a number: ""))
if num > 0:
	print(""Positive number"")
elif num == 0:
	print(""Zero"")
else:
	print(""Negative number"")
"
Write a python program to convert complex number to polar coordinates	"

import cmath
"
Write a program to extract each digit from an integer, in the reverse order	"number = 7536
while (number > 0):
	digit = number % 10
	number = number // 10
	print(digit, end="" "")
"
24 Write a python program to increment Suffix number in string and print it	"

test_str = 'hello006'
x = ''
r = ''
for i in test_str:
	if i.isdigit() and int(i) > 0:
        x = x + str(int(i) + 1)
	else:
        r = r + i
print(r + x)
"
write a python program to print sum of natural numbers up to num	"

num = 16


if num < 0:
	print(""Enter a positive number"")
else:
	sum = 0
	while(num > 0):
        sum += num
        num -= 1
	print(""The sum is"", sum)
"
Write a function to return the mean of numbers in a list	"def cal_mean(num_list: list) -> float:
	if num_list:
        return sum(num_list) / len(num_list)
	else:
        return None
"
Given an input string, count occurrences of all characters within a string	"str1 = ""Apple""
countDict = dict()
for char in str1:
	count = str1.count(char)
	countDict[char] = count
print(countDict)
"
Write a python function to check the strength of user provided password	"

def check_password_strength(password):
	import re
	flag = 0
	while True:
        if (len(password) < 8):
            flag = -1
            break
        elif not re.search(""[a-z]"", password):
            flag = -1
            break
        elif not re.search(""[A-Z]"", password):
            flag = -1
            break
        elif not re.search(""[0-9]"", password):
            flag = -1
            break
        elif not re.search(""[_@$]"", password):
            flag = -1
            break
        elif re.search(""\\s"", password):
            flag = -1
            break
        else:
            flag = 0
            print(""Strong Password"")
            break
	if flag == -1:
        print(""Weak Password"")
"
6 python add all values of another list	"a = [1, 2, 3]
b = [4, 5, 6]
a += b
"
inclusive using random module and list comprehension.	"import random
print(random.choice([i for i in range(11) if i % 2 == 0]))
"
30. Write a python function to find HCf or GCD and return the value	"def compute_hcf(x, y):
	if x > y:
        smaller = y
	else:
        smaller = x
	for i in range(1, smaller + 1):
        if((x % i == 0) and (y % i == 0)):
            hcf = i
	return hcf
"
write a python program to sum the set of unqiue elements	"

a = {5, 6, 7}
print(sum(a, 5))
"
Write a python program print the the number of occurrences of 8 in a list	"def countX(lst, x):
	count = 0
	for ele in lst:
        if (ele == x):
            count = count + 1
	return count


lst = [8, 6, 8, 10, 8, 20, 10, 8, 8]
x = 8
print('{} has occurred {} times'.format(x, countX(lst, x)))
"
write a program to find cosine of a number	"import math


num = 45
print(""Cosine"", math.cos(num))
"
in a String using Sets	"

def count_vowels(s):
	count = 0
	vowels = set(""aeiou"")
	for letter in s:
        if letter in vowels:
            count += 1
	return count
"
write a python program to count the number of words in a sentence	"

test_string = ""This is a good book""
res = len(test_string.split())
print(f""The number of words in string are :{str(res)}"")
"
is the index and the value is the item in the list	"my_list = [1, 8, 1, 2, 2, 9]
my_dict = {key: value for key, value in enumerate(my_list)}
"
path of a given pattern	"import glob
import os
import random


def retrieve_random_file(src_dir_path, file_pattern, count):
	if(os.path.exists(src_dir_path) == False):
        print(""Destination Path doesn't exist"")
        return

	files_in_dir = glob.glob(src_dir_path + ""/*"" + file_pattern)
	if (count > len(files_in_dir)):
        print(""Requested count more than file count in:"",
              src_dir_path, "" for pattern:"", file_pattern)
        return
	return random.sample(files_in_dir, count)
"
dictionary List	"
test_list = [{""Gfg"": 5, ""is"": 8, ""best"": 0},
             {""Gfg"": 5, ""is"": 1, ""best"": 0},
             {""Gfg"": 5, ""is"": 0, ""best"": 0}]

keys = list(test_list[0].keys())

res = []
for key in keys:
	flag = 1
	for ele in test_list:
        if test_list[0][key] != ele[key]:
            flag = 0
            break

	if flag:
        res.append(key)

print(""Similar values keys : "" + str(res))
"
28. Python Program to Find ASCII Value of Character	"c = 'p'
print(""The ASCII value of '"" + c + ""' is"", ord(c))
"
dictionaries. Print the combined dictionary.	"test_list = [{'tsai': [1, 5, 6, 7], 'good': [9, 6, 2, 10], 'CS': [4, 5, 6]},
             {'tsai': [5, 6, 7, 8], 'CS': [5, 7, 10]},
             {'tsai': [7, 5], 'best': [5, 7]}]
res = dict()
for inner_dict in test_list:
	for inner_list in inner_dict:
        if inner_list in res:
            res[inner_list] += (inner_dict[inner_list])
        else:
            res[inner_list] = inner_dict[inner_list]
print(""The concatenated dictionary : "" + str(res))
"
Split Strings	"word = ""Hello World""
ksplit = word.split(' ')
print(f""Splited Strings: {ksplit}"")
"
78 write a program to find the difference between 2 lists	"

list1 = [10, 20, 30, 40, 50]
list2 = [10, 20, 30, 60, 70]


print(""list1:"", list1)
print(""list2:"", list2)


print(""Difference elements:"")
print(list(set(list1) - set(list2)))
"
write a python program to Remove Punctuations From a String	"punctuations = '''!()-[]{};:'""\\,<>./?@#$%^&*_~'''
my_str = ""Hello!!!, he said ---and went.""
no_punct = """"
for char in my_str:
	if char not in punctuations:
        no_punct = no_punct + char
print(no_punct)
"
Non-Empty String	"

def remove(string, n):
	first = string[:n]
	last = string[n + 1:]
	return first + last
"
access Last characters in a string	"word = ""Hello World""
letter = word[-1]
print(f""First Charecter in String:{letter}"")
"
of a list of numbers given	"

def longest_continuous_odd_subsequence(array):
	final_list = []
	temp_list = []
	for i in array:
        if i % 2 == 0:
            if temp_list != []:
                final_list.append(temp_list)
            temp_list = []
        else:
            temp_list.append(i)

	if temp_list != []:
        final_list.append(temp_list)

	result = max(final_list, key=len)
	print(result)
"
write python function to detect if a number is odd number	"def is_odd(num):
	return((num % 2) != 0)
"
65 function to attach counter to function	"def attach_counter(fn: ""Function""):
	count = 0

	def inner(*args, **kwargs):
        nonlocal count
        count += 1
        return fn(*args, **kwargs)
	return inner
"
Python program to calculate the factorial of a number	"

def factorial(n):
	if n == 0:
        return 1
	else:
        return n * factorial(n - 1)


n = 45
print(factorial(n))
"
Write a program to print the multiplication table of a given number	"num = 9
for i in range(1, 11):
	print(f""{num} x {i} = {num*i}"")
"
Write Python Program to print the Square Root of a number	"num = 8
num_sqrt = num ** 0.5
print('The square root of %0.3f is %0.3f' % (num, num_sqrt))
"
Write a python function to generate Square Numbers (1, 4, 9, 16, 25...)	"def square_numbers(n):
	for i in range(n):
        yield i ** 2
"
24 write a program to delete all duplicate letters in a string	"

def removeDuplicate(str):
	s = set(str)
	s = """".join(s)
	print(""Without Order:"", s)
	t = """"
	for i in str:
        if(i in t):
            pass
        else:
            t = t + i
        print(""With Order:"", t)


str = ""helloworld""
removeDuplicate(str)
"
88 Write a Python fuction to print the depth of a dictionary.	"def dict_depth(d):
	if isinstance(d, dict):
        return 1 + (max(map(dict_depth, d.values())) if d else 0)
	return 0


dic = {'a': 1, 'b': {'c': {'d': {}}}}
print(dict_depth(dic))
"
Write a Python function to find the maximum ODD number from a given list	"def odd_max_checker(list1):
	maxnum = 0
	for num in list1:
        if num % 2 != 0:
            if num > maxnum:
                maxnum = num
	return maxnum
"
write a python program to count how many times each letter occurs in a string	"string = 'The quick brown fox jumps over the lazy dog'
countmap = {}
for letter in string:
	if letter in countmap:
        countmap[letter] += 1
	else:
        countmap[letter] = 1
print(f'Count of letters: {countmap}')
"
15.Python program to display all the prime numbers within an interval	"

lower = 900
upper = 1000


print(""Prime numbers between"", lower, ""and"", upper, ""are:"")


for num in range(lower, upper + 1):
	
	if num > 1:
        for i in range(2, num):
            if (num % i) == 0:
                break
        else:
            print(num)
"
Find if all elements in a list are identical	"listOne = [20, 20, 20, 20]
print(""All element are duplicate in listOne:"",
      listOne.count(listOne[0]) == len(listOne))
"
write a program to print even length words in a string	"

str1 = ""I am doing fine""
s = str1.split(' ')
for word in s:
	if len(word) % 2 == 0:
        print(word)
"
input and reverses the order of its elements	"def reverse(seq):
	SeqType = type(seq)
	emptySeq = SeqType()
	if seq == emptySeq:
        return emptySeq
	restrev = reverse(seq[1:])
	first = seq[0:1]
	result = restrev + first
	return result
"
distance travelled in radian unit and time taken	"def cal_angular_velocity(angular_dist: float, time: float) -> float:
	return angular_dist / time
"
selling price	"def find_profit_or_loss(cp, sp):
	if cp > sp:
        return 'loss', cp - sp
	elif cp < sp:
        return 'profit', sp - cp
	else:
        return 'no profit or loss', 0
"
write a python function to print two composite numbers whose difference is N	"
def find_composite_nos(n):
	print(9 * n, 8 * n)
"
write a program Creating a Dictionary with each item as a Pair	"Dict = dict([(1, 'Geeks'), (2, 'For')])
print(""\nDictionary with each item as a pair: "")
print(Dict)
"
number and its cube in each tuple	"
list1 = [1, 2, 5, 6]

res = [(val, pow(val, 3)) for val in list1]

print(res)
"
write a program to find union of 2 arrays	"a = {1, 2, 3, 4}
b = {3, 4, 5, 6}


union_both = a.union(b)
print(""Union"", union_both)
"
the boolean value	"def item_exists(lst, item):
	if item in lst:
        return True
	else:
        return False
"
itertools.combinations_with_replacement(iterable, r)	"def random_combination_with_replacement(iterable, r):
	import random
	pool = tuple(iterable)
	n = len(pool)
	indices = sorted(random.choices(range(n), k=r))
	return tuple(pool[i] for i in indices)
"
inclusive using random module and list comprehension.	"import random


print(random.choice([i for i in range(11) if i % 2 == 0]))
"
write a python program to perform multiple assignments	"a = b = c = 1
"
write  Function to Rotate  the matrix by 180 degree	"def rotateMatrix(mat):
	N = 3
	i = N - 1
	while(i >= 0):
        j = N - 1
        while(j >= 0):
            print(mat[i][j], end="" "")
            j = j - 1
        print()
        i = i - 1
"
Write a Python function to remove falsy values from a list	"def newlist(lst):
	return list(filter(None, lst))
"
followed by lower case letters.	"

import re
text = ""Albert""
patterns = '[A-Z]+[a-z]+$'
if re.search(patterns, text):
	print('Found a match!')
else:
	print('Not matched!')
"
decimal places.	"x = 3.1415926
y = -12.9999
print(""\nOriginal Number: "", x)
print(""Formatted Number with no decimal places: "" + ""{:.0f}"".format(x))
print(""Original Number: "", y)
print(""Formatted Number with no decimal places: "" + ""{:.0f}"".format(y))
"
write a python function to get the most common word in text	"def most_common(text):
	c = Counter(text)
	return c.most_common(1)
"
using Python math module.	"import random
print(random.random() * 100)
"
Find if all elements in a list are identical	"listOne = [20, 20, 20, 20]
print(""All element are duplicate in listOne:"",
      listOne.count(listOne[0]) == len(listOne))
"
python code to remove punctuation from the string	"def r_punc():
	test_str = ""end, is best : for ! Nlp ;""
	print(""The original string is : "" + test_str)
	punc = '''!()-[]{};:'""\\, <>./?@#$%^&*_~'''
	for ele in test_str:
        if ele in punc:
            test_str = test_str.replace(ele, """")
	print(""The string after punctuation filter : "" + test_str)


htness_4
"
function takes to execute	"def timed(fn):
	from time import perf_counter
	from functools import wraps

	@wraps(fn)
	def inner(*args, **kwargs):
        start = perf_counter()
        result = fn(*args, **kwargs)
        end = perf_counter()
        elapsed = end - start

        args_ = [str(a) for a in args]
        kwargs_ = ['{0}={1}'.format(k, v) for k, v in kwargs.items()]
        all_args = args_ + kwargs_
        args_str = ','.join(all_args)  

        print(f'{fn.__name__}({args_str}) took {elapsed} seconds')

        return result
	
	return inner
"
12. python function to return the cubes of a list of numbers	"def cube(n):
	return [i * i * i for i in range(n)]
"
are inputs to this function.	"def filter_with_key_value(list_of_dicts, key, value):
	return list(filter(lambda x: x.get(key) == value, list_of_dicts))
"
Write a function to add two positive integers without using the '+' operator	"def add_without_plus_operator(a, b):
	while b != 0:
        data = a & b
        a = a ^ b
        b = data << 1
	return a
"
write a program Creating a Nested Dictionary as shown in the below image	"Dict = {1: 'Geeks', 2: 'For',
        3: {'A': 'Welcome', 'B': 'To', 'C': 'Geeks'}}


print(Dict)
"
write a program to accept the strings which contains all vowels	"

str1 = ""__main__""
if len(set(str1).intersection(""AEIOUaeiou"")) >= 5:
	print('accepted')
else:
	print(""not accepted"")
"
write a function to return the square of first N numbers	"def get_squares(n):
	return [i * i for i in range(n)]
"
Write a Python function to Find if a Number is Prime or Not Prime	"

def check(n, div=None):
	if div is None:
        div = n - 1
	while div >= 2:
        if n % div == 0:
            print(""Number not prime"")
            return False
        else:
            return check(n, div - 1)
	else:
        print(""Number is prime"")
        return 'True'
"
write a python program to merge two lists	"odd = [1, 3, 5, 7, 9]
even = [2, 4, 6, 8, 10]
odd.extend(even)
"
Write a Python program to find the repeated items of a tuple	"tuplex = 2, 4, 5, 6, 2, 3, 4, 4, 7
count = tuplex.count(4)
print(count)
"
Write a Python function to Print an Identity Matrix	"

def print_identity_matrix(n):
	for i in range(0, n):
        for j in range(0, n):
            if(i == j):
                print(""1"", sep="" "", end="" "")
            else:
                print(""0"", sep="" "", end="" "")
        print()
"
provided diameter	"

def area_of_circle(diameter):
	PI = 3.14
	area = (PI / 4) * (diameter * diameter)
	print(f'Area Of a Circle {area}')
"
factorial of a given positive number.	"def factendzero(n):
	x = n // 5
	y = x
	while x > 0:
        x /= 5
        y += int(x)
	return y
"
"For example, the string ""AAAABBBCCDAAA"" would be encoded as ""4A3B2C1D3A"""	"

def encode_string(str1):
	encoded = """"
	ctr = 1
	last_char = str1[0]

	for i in range(1, len(str1)):

        if last_char == str1[i]:
            ctr += 1

        else:
            encoded += str(ctr) + last_char
            ctr = 0
            last_char = str1[i]
            ctr += 1
	encoded += str(ctr) + last_char
	return encoded
"
write a python function to append text to a user provided file	"

def file_read(fname):
	with open(fname, ""w"") as myfile:
        myfile.write(""Appending line one\n"")
        myfile.write(""Appending line two"")
        txt = open(fname)
        print(txt.read())
"
write a python function to check if a given string is a palindrome	"

def isPalindrome(s):
	return s == s[::-1]
"
printNationality.	"class American(object):
	@ staticmethod
	def printNationality():
        print(""America"")


anAmerican = American()
anAmerican.printNationality()
American.printNationality()
"
Write a Python program to typecast given input to integer	"num = int(input(""Input a value: ""))
print(num)
"
all three angles	"

def is_valid_triangle_angle(a, b, c):
	if a + b + c == 180:
        return True
	return False
"
Global Scope Representation	"x = 0


def in_func1():
	x = 1
	print('in_func1:', x)


print('global:', x)
"
rabbits and how many chickens do we have?	"def solve(numheads, numlegs):
	ns = 'No solutions!'
	for i in range(numheads + 1):
        j = numheads - i
        if 2 * i + 4 * j == numlegs:
            return i, j
	return ns, ns
"
removes leading characters	"word = "" xyz ""
lstrip = word.lstrip()
print(f""String ater removal of leading characters:{lstrip}"")
"
Write a function to find the area of rectangle	"

def rectangle_area(l, b):
	return l * b
"
operations like in mathematic	"

E = {0, 2, 4, 6, 8}
N = {1, 2, 3, 4, 5}
print(""Symmetric difference of E and N is"", E ^ N)
"
write a python program to swap two numbers and print them	"

num1 = 2
num2 = 4


num1, num2 = num2, num1


print(num1, num2)
"
a string	"def capitalize(text):
	return text.title()
"
given binary string.	"def max_consecutive_0(input_str):
	return max(map(len, input_str.split('1')))


str1 = '111000010000110'
print(""Original string:"" + str1)
print(""Maximum length of consecutive 0’s:"")
"
write a python function to return the number of whitespace separated tokens	"

def tokenise(string):
	return len(string.split())
"
Write a Python function that returns biggest character in a string	"

from functools import reduce


def biggest_char(string):
	
	def biggest_chr(x, y): return x if ord(x) > ord(y) else y
	return reduce(biggest_chr, string)
"
value) pairs are equal	"x = {""a"": 2, ""b"": 2, ""c"": 3, ""d"": 4}
y = {""b"": 2, ""c"": 3, ""d"": 4}
shared_items = {k: x[k] for k in x if k in y and x[k] == y[k]}
length = len(shared_items)
print(f'count:{length}')
"
print it	"

count = 0
string = ""Welcome to schoolofAI""
for i in string:
	if i == "" "":
        count = count + 1
print(f'number of spaces {count}')
"
Write a python function check if a given directory exists and has any files	"import os


def check_dir_files(src_dir_path):
	if(os.path.exists(src_dir_path) == False):
        print(""Destination Path doesn't exist"")
        return False
	files_in_dir = glob.glob(src_dir_path + ""/*.*"")
	if (len(files_in_dir) <= 0):
        print(""No files present in:"", src_dir_path)
        return False
	print(""The directory "", src_dir_path,
          "" has "", len(files_in_dir), "" files."")
	return True
"
27 write a function to generate and print a random number between 0 and 22	"import random
n = random.randint(0, 22)
print(n)
"
for the below list	"

def gaps(size):
	length = size.bit_length()
	for k in range(length - 1, 0, -1):
        yield 2**k - 1


def shell_sort(alist):
	def insertion_sort_with_gap(gap):
        for i in range(gap, len(alist)):
            temp = alist[i]
            j = i - gap
            while (j >= 0 and temp < alist[j]):
                alist[j + gap] = alist[j]
                j = j - gap
            alist[j + gap] = temp

	for g in gaps(len(alist)):
        insertion_sort_with_gap(g)


alist = [2, 3, 5, 6, 4, 5]
shell_sort(alist)
print('Sorted list: ', end='')
print(alist)
"
using euclidian Algorithm	"def compute_hcf(x, y):
	while(y):
        x, y = y, x % y
	return x
"
two numbers are anagram	"

from collections import Counter


def checkAnagram(num1, num2):
	bin1 = bin(num1)[2:]
	bin2 = bin(num2)[2:]

	zeros = abs(len(bin1) - len(bin2))
	if (len(bin1) > len(bin2)):
        bin2 = zeros * '0' + bin2
	else:
        bin1 = zeros * '0' + bin1

	dict1 = Counter(bin1)
	dict2 = Counter(bin2)

	if dict1 == dict2:
        print('Yes')
	else:
        print('No')
"
80]	"

a = [10, 20, 30, 20, 10, 50, 60, 40, 80, 50, 40]
dup_items = set()
uniq_items = []
for x in a:
	if x not in dup_items:
        uniq_items.append(x)
        dup_items.add(x)
print(uniq_items)
"
write Python code t get difference of two lists Using set()	"def Diff(li1, li2):
	return (list(list(set(li1) - set(li2)) + list(set(li2) - set(li1))))


li1 = [10, 15, 20, 25, 30, 35, 40]
li2 = [25, 40, 35]
print(Diff(li1, li2))
"
Write a Python Program to Detect if Two Strings are Anagrams	"

def anagram_check(s1, s2):
	if(sorted(s1) == sorted(s2)):
        return True
	else:
        return False
"
Write a function to find acceleration, given u, v and t	"

def acc(u, v, t):
	return (v - u) / t
"
write a Python program to print odd Numbers in a List	"
list1 = [10, 21, 4, 45, 66, 93]
only_odd = [num for num in list1 if num % 2 == 1]
print(""Odd numbers in the list: "", only_odd)
"
Write a function to identify if value is present inside a list or not	"def check_listvalue(l: list, value) -> bool:
	return value in l
"
18 how to break out of nested loops python	"x_loop_must_break = False


for x in [1, 2, 3]:
	print(f""x is {x}"")
	for y in [1, 2, 3]:
        print(f""y is {y}"")
        if y == 2:
            x_loop_must_break = True
            break
	if x_loop_must_break:
        break
"
length int first two and rest	"def unpack_tuple(tup):
	a, b, *c = tup
	return a, b, c
"
Write a Python Program to Check if a Number is a Prime Number	"

def prime_no_check(a):
	k = 0
	for i in range(2, a // 2 + 1):
        if(a % i == 0):
            k = k + 1
	if(k <= 0):
        return True
	else:
        return False
"
Pretty print JSON	"import json
person_string = '{""name"": ""Bob"", ""languages"": ""English"", ""numbers"": [2, 1.6, null]}'
person_dict = json.loads(person_string)
print(json.dumps(person_dict, indent=4, sort_keys=True))
"
write the python program to generate a random number between 0 and 9	"

def read_csv(input_file):
	with open(input_file) as csv_file:
        csv_reader = csv.reader(csv_file, delimiter=',')
        for row in csv_reader:
            print(f'{row}')
            break
"
write a Python program to find Maximum Frequent Character in String	"

test_str = ""GeeksforGeeks""
print(""The original string is : "" + test_str)


all_freq = {}
for i in test_str:
	if i in all_freq:
        all_freq[i] += 1
	else:
        all_freq[i] = 1
res = max(all_freq, key=all_freq.get)


print(""The maximum of all characters in GeeksforGeeks is : "" + res)
"
using split() + join()	"test_str = ""GFG is good""
print(""The original string is : "" + test_str)
rep_str = ""best""
res = "" "".join(test_str.split(' ')[:-1] + [rep_str])
print(""The String after performing replace : "" + res)
"
gas equation Pressure P and Tempreature T given	"def find_volume_of_ideal_gas(pressure: float, temp: float, n: float) -> float:
	r = 8.3145  
	return (n * r * temp) / pressure
"
write a function to find uncommon words from two strings	"

def UncommonWords(str1, str2):

	count = {}

	for word in str1.split():
        count[word] = count.get(word, 0) + 1

	for word in str2.split():
        count[word] = count.get(word, 0) + 1

	return [word for word in count if count[word] == 1]
"
of strings and return the list	"def myfunc(listitems):
	final = []
	for strchar in listitems:
        for letters in strchar:
            if letters in ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'):
                strchar = strchar.replace(letters, """")
        final.append(strchar)
	return final


myfunc([""rohan"", ""END""])
"
string from console input	"class InputOutString(object):
	def __init__(self):
        self.s = """"

	def getString(self):
        self.s = raw_input()


strObj = InputOutString()
strObj.getString()
"
write a python function to print a given string n times	"def printn(string, n):
	print(string * n)
"
Write a Python program to sort a list alphabetically in a dictionary.	"num = {'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]}
sorted_dict = {x: sorted(y) for x, y in num.items()}
print(sorted_dict)
"
"""Green"", ""White"", ""Pink""# output# {'Green', 'White'}"	"

color1 = ""Red"", ""Green"", ""Orange"", ""White""
color2 = ""Black"", ""Green"", ""White"", ""Pink""
print(set(color1) & set(color2))
"
write a python Program to Determine all Pythagorean Triplets in the Range	"limit = 50
c = 0
m = 2
while(c < limit):
	for n in range(1, m + 1):
        a = m * m - n * n
        b = 2 * m * n
        c = m * m + n * n
        if(c > limit):
            break
        if(a == 0 or b == 0 or c == 0):
            break
        print(a, b, c)
	m = m + 1
"
Write a python function to copy the sign bit from one variable to another	"def copysign(dst, src):
	return math.copysign(dst, src)
"
21. Python Program to Find Armstrong Number in an Interval	"lower = 100
upper = 2000


for num in range(lower, upper + 1):
	order = len(str(num))
	sum = 0
	temp = num
	while temp > 0:
        digit = temp % 10
        sum += digit ** order
        temp //= 10

	if num == sum:
        print(num)
"
dictionary input	"def flatten_dict(dd, separator='_', prefix=''):
	flattened = {prefix + separator + k if prefix else k: v
                 for kk, vv in dd.items()
                 for k, v in flatten_dict(vv, separator, kk).items()
                 } if isinstance(dd, dict) else {prefix: dd}
	return flattened
"
keys. The function should just print the values only.	"def print_dict_keys_val_3():
	d = dict()
	for i in range(1, 21):
        d[i] = i**2
	for (k, v) in d.items():
        print(v)
"
write a python function to validate the email	"

import re
regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'


def check(email):
	if(re.search(regex, email)):
        print(""Valid Email"")
	else:
        print(""Invalid Email"")
"
the input string	"vowels = 'aeiou'
ip_str = 'India is my country'
ip_str = ip_str.casefold()
count = {}.fromkeys(vowels, 0)
for char in ip_str:
	if char in count:
        count[char] += 1
print(count)
"
combinations of the string in lexicographic sorted order.	"def get_ordered_combinations_with_replacement(string, k):
	[print(''.join(x))
     for x in combinations_with_replacement(sorted(string), int(k))]
"
elements are square of even number in [1,2,3,4,5,6,7,8,9,10].	"li = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
evenNumbers = map(lambda x: x**2, filter(lambda x: x % 2 == 0, li))
print(evenNumbers)
"
given list of numbers	"lst = eval(input(""Enter list : ""))
mean = 0
sum = 0
for i in lst:
	sum = sum + i
print("" The mean of given list is :"", sum)
"
Write a function that returns a dictionary sorted descending by its keys	"def descending_dict_keysort(d: dict):
	return {
        key: val for key,
        val in sorted(
            d.items(),
            reverse=True,
            key=lambda ele: ele[0])}
"
35 how to open xml file element tree	"import xml.etree.ElementTree as ET


tree = ET.parse('filename.xml')
tree_root = tree.getroot()
"
8 print into lowersase an uppercase sentence in python	"s = ""Kilometer""
print(s.lower())
"
is raised.	"def iter_except(func, exception, first=None):
	
	try:
        if first is not None:
            yield first()   
        while True:
            yield func()
	except exception:
        pass
"
write a python program to print squares of numbers until 20	"for i in range(20):
	print(i * i)
"
list and even numbers from the second list	"def mergeList(list1, list2):
	thirdList = []
	for num in list1:
        if (num % 2 != 0):
            thirdList.append(num)
	for num in list2:
        if (num % 2 == 0):
            thirdList.append(num)
	return thirdList
"
Write a python program to print negative Numbers in a List	"
list1 = [11, -21, 0, 45, 66, -93]

for num in list1:

	if num < 0:
        print(num, end="" "")
"
Write a python function that Counts the Number of Blank Spaces in a Text File	"def count_blank_space():
	fname = input(""file name:"")
	count = 0
	with open(fname, 'r') as f:
        for line in f:
            count += line.count(' ')
	return count
"
Returns the number of times the specified element appears in the list	"vowels = ['a', 'e', 'i', 'o', 'i', 'u']
count = vowels.count('i')
print('The count of i is:', count)
"
Write a function to find power of number using recursion	"def power(N, P):
	if (P == 0 or P == 1):
        return N
	else:
        return (N * power(N, P - 1))


print(power(5, 2))
"
write a program to find factorinal of a number	"import math


number = 8
fa = math.factorial(number)
print('Factorial', fa)
"
called is called.	"class User:
	def __init__(self, msg=""Demo of custom message by repr and str in class""):
        self.msg = msg

	def __repr__(self):
        return f""Object of User class is called with parameter {self.msg}""

	def __str__(self):
        return f""Object of User class is called with parameter {self.msg}""
"
input and reverses the order of its elements	"def reverse(seq):
	SeqType = type(seq)
	emptySeq = SeqType()
	if seq == emptySeq:
        return emptySeq
	restrev = reverse(seq[1:])
	first = seq[0:1]
	result = restrev + first
	return result
"
write a python program  to Shuffle Deck of Cards	"deck = list(
	itertools.product(
        range(
            1, 14), [
            'Spade', 'Heart', 'Diamond', 'Club']))
random.shuffle(deck)
print(deck)
"
prints it	"sentence = 'the quick brown fox'
print(sentence.replace(' ', ''))
"
write a python function with generator for an infinite sequence	"def infinite_sequence():
	n = 0
	while True:
        yield n
        n += 1
"
write a function that acts like a ReLU function for a 1D array	"def relu_list(input_list: list) -> list:
	return [(lambda x: x if x >= 0 else 0)(x) for x in input_list]
"
Write a python program to remove 11 and 18 from a list. Print the final list.	"
list1 = [11, 5, 17, 18, 23, 50]

unwanted_num = {11, 18}

list1 = [ele for ele in list1 if ele not in unwanted_num]

print(""New list after removing unwanted numbers: "", list1)
"
write a python program to print unique words in a sentence	"sentence = 'the king is the one'
unique = set(sentence.split(' '))
print(unique)
"
[12,24,35,70,88,120,155].	"li = [12, 24, 35, 70, 88, 120, 155]
li = [x for (i, x) in enumerate(li) if i % 2 != 0]
print(li)
"
76 function to showcast documemtation of namedtuple	"def show_doc_named():
	from collections import namedtuple
	IplData = namedtuple(
        'IplData', 'match toss choice session1 session2 winner')
	IplData.__doc__ = 'Namedtuple class to store the IPL match data'
	IplData.match.__doc__ = 'Team name'
	IplData.toss.__doc__ = 'Who won the toss'
	IplData.choice.__doc__ = 'Decision taken by wiinng team toss'
	IplData.session1.__doc__ = 'Run scored by Team1'
	IplData.session2.__doc__ = 'Run scored by Team2'
	IplData.winner.__doc__ = 'Winning Team'
	return help(IplData)
"
the system	"def get_max_integer():
	import sys
	return sys.maxsize
"
Create and print a dictionary	"thisdict = {
	""brand"": ""Ford"",
	""model"": ""Mustang"",
	""year"": 1964
}
print(f""Sample Dictionary:{thisdict}"")
"
initialising string	"ini_string = ""123abcjw:, .@! eiw""
"
6. Write a python program to swap two variables, Using a temporary variable	"

x = 5
y = 10


temp = x
x = y
y = temp


print('The value of x after swapping: {}'.format(x))
print('The value of y after swapping: {}'.format(y))
"
memory it consumes	"import sys
string_var = 'string variable'
print(sys.getsizeof(string_var))
"
given number	"num = 16
sum = 0
while (num > 0):
	sum += num
	num -= 1
print(f'The sum is {sum}')
"
12 write a program to convert key-values list to flat dictionary	"

test_dict = {'month': [1, 2, 3],
             'name': ['Jan', 'Feb', 'March']}

print(""The original dictionary is : "" + str(test_dict))

res = dict(zip(test_dict['month'], test_dict['name']))
print(""Flattened dictionary : "" + str(res))
"
Write a python function to find the area of a circle, whose radius is given	"

def findArea(r):
	PI = 3.142
	return PI * (r * r)
"
removes trailing characters	"word = "" xyz ""
rstrip = word.rstrip()
print(f""String ater removal of trailing characters:{rstrip}"")
"
10, 20, 50, 100, 200 and 500 ) against a given amount.	"def no_notes(a):
	Q = [500, 200, 100, 50, 20, 10, 5, 2, 1]
	x = 0
	for i in range(9):
        q = Q[i]
        x += int(a / q)
        a = int(a % q)
	if a > 0:
        x = -1
	return x
"
Write a Python program to print euclidean distance between two array/ vectors	"import numpy as np
a = np.array([78, 84, 87, 91, 76])
b = np.array([92, 83, 91, 79, 89])
dist = np.linalg.norm(a - b)
print('Differnce in performance between A and B : ', dist)
"
sets by removing duplicates	"set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
print(set1.union(set2))
"
write a program to move numbers to the end of a string	"

str1 = 'hi 123 how are you doing? 567 is with you. Take care of 89'

res = ''
dig = ''


for ele in str1:
	if ele.isdigit():
        dig += ele
	else:
        res += ele

res += dig


print(""Strings after digits at end : "" + str(res))
"
write a python program to implement try catch code	"

try:
	s = {5, 6}
	s * 3
except Exception as e:
	print(e)
"
nested dictionary and return it	"def lists_to_dict(test_list1, test_list2, test_list3):
	res = [{a: {b: c}}
           for (a, b, c) in zip(test_list1, test_list2, test_list3)]
	return res
"
case.	"

class IOString(object):
	def __init__(self):
        self.s = """"

	def getString(self):
        self.s = input()

	def printString(self):
        print(self.s.upper())


strObj = IOString()
strObj.getString()
strObj.printString()
"
66 write a program to transpose a matrix using a nested loop	"

X = [[12, 7],
     [4, 5],
     [3, 8]]


result = [[0, 0, 0],
          [0, 0, 0]]
"
frequency) in a string	"def char_frequency(str1):
	dict = {}
	for n in str1:
        keys = dict.keys()
        if n in keys:
            dict[n] += 1
        else:
            dict[n] = 1
	return dict


print(char_frequency('google.com'))
"
write a python program to print squares of numbers until 20	"for i in range(20):
	print(i * i)
"
and returns its inversion	"def invert_dict(input_dict):
	my_inverted_dict = {value: key for key, value in input_dict.items()}
	return my_inverted_dict
"
dictionary.	"test_dict = {6: 2, 8: 9, 3: 9, 10: 8}
N = 4
res = []
for key, val in sorted(
        test_dict.items(),
        key=lambda x: x[0],
        reverse=True)[
        : N]:
	res.append(key)
print(""Top N keys are: "" + str(res))
"
Write a function to calculate the density given mass and volume	"def cal_density(mass, volume):
	return (mass / volume)
"
16. Python program to find the factorial of a number.	"num = 7
factorial = 1


if num < 0:
	print(""Sorry, factorial does not exist for negative numbers"")
elif num == 0:
	print(""The factorial of 0 is 1"")
else:
	for i in range(1, num + 1):
        factorial = factorial * i
	print(""The factorial of"", num, ""is"", factorial)
"
52 callable_check	"def collable_check(x: ""Leterally can be anything""):
	return callable(x)
"
60 Write a function program to reverse the digits of an integer.	"def reverse_integer(x):
	sign = -1 if x < 0 else 1
	x *= sign

	
	while x:
        if x % 10 == 0:
            x /= 10
        else:
            break

	
	x = str(x)
	lst = list(x)  
	lst.reverse()
	x = """".join(lst)
	x = int(x)
	return sign * x
"
Write a Python program to reverse a tuple.	"
x = (""w3resource"")
y = reversed(x)
"
Convert dictionary to JSON	"import json
person_dict = {'name': 'Bob',
               'age': 12,
               'children': None
               }
person_json = json.dumps(person_dict)
print(person_json)
"
Write a function to return the perimeter of a isoscales triangle	"def cal_perimeter_iso_triangle(s1, s2):
	return 2 * s1 + s2
"
factorial of that number	"

def factorial(n):

	
	return 1 if (n == 1 or n == 0) else n * factorial(n - 1)
"
Write a Python function to Find the Sum of Cosine Series	"

def cosine(x, n):
	cosx = 1
	sign = -1
	for i in range(2, n, 2):
        pi = 22 / 7
        y = x * (pi / 180)
        cosx = cosx + (sign * (y**i)) / math.factorial(i)
        sign = -sign
	return cosx
"
write a program to find a given character in a string and print its position	"a = ""Hello World""
x = a.find(""r"")
print(x)
"
55 write a  program to find LCM	"

def lcm(x, y):
	if x > y:
        greater = x
	else:
        greater = y
	while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1
	return lcm


num1 = int(input(""Enter first number: ""))
num2 = int(input(""Enter second number: ""))
print(""The L.C.M. of"", num1, ""and"", num2, ""is"", lcm(num1, num2))
"
Check if the key exists or not in JSON	"import json


studentJson = """"""{
	""id"": 1,
	""name"": ""Piyush Jain"",
	""class"": null,
	""percentage"": 35,
	""email"": ""piyushjain220@gmail.com""
}""""""


print(""Checking if percentage key exists in JSON"")
student = json.loads(studentJson)
if ""percentage"" in student:
	print(""Key exist in JSON data"")
	print(student[""name""], ""marks is: "", student[""percentage""])
else:
	print(""Key doesn't exist in JSON data"")
"
Arrange string characters such that lowercase letters should come first	"str1 = ""PyNaTive""
lower = []
upper = []
for char in str1:
	if char.islower():
        lower.append(char)
	else:
        upper.append(char)
sorted_string = ''.join(lower + upper)
print(sorted_string)
"
write a program to join two lists	"

list1 = [""a"", ""b"", ""c""]
list2 = [1, 2, 3]


list3 = list1 + list2
print(list3)
"
returns it	"def invert_dict(dictionary):
	inverted_dict = {value: key for key, value in dictionary.items()}
	return inverted_dict
"
Write a Python program to get the current username using getpass library	"import getpass
print(getpass.getuser())
"
Incremented Date if it is	"

date = ""20/04/2021""
dd, mm, yy = date.split('/')
dd = int(dd)
mm = int(mm)
yy = int(yy)
if(mm == 1 or mm == 3 or mm == 5 or mm == 7 or mm == 8 or mm == 10 or mm == 12):
	max1 = 31
elif(mm == 4 or mm == 6 or mm == 9 or mm == 11):
	max1 = 30
elif(yy % 4 == 0 and yy % 100 != 0 or yy % 400 == 0):
	max1 = 29
else:
	max1 = 28
if(mm < 1 or mm > 12):
	print(""Date is invalid."")
elif(dd < 1 or dd > max1):
	print(""Date is invalid."")
elif(dd == max1 and mm != 12):
	dd = 1
	mm = mm + 1
	print(""The incremented date is: "", dd, mm, yy)
elif(dd == 31 and mm == 12):
	dd = 1
	mm = 1
	yy = yy + 1
	print(""The incremented date is: "", dd, mm, yy)
else:
	dd = dd + 1
	print(""The incremented date is: "", dd, mm, yy)
"
write a program to check if a substring is present in a given string	"

string = ""how are you?""
substring = ""are""
if (string.find(substring) == -1):
	print(""NO"")
else:
	print(""YES"")
"
write a python program to sort a list of tuples using Lambda.	"

marks = [
	('Computer Science', 88),
	('Physics', 90),
	('Maths', 97),
	('Chemistry', 82)]
print(""Original list of tuples:"")
print(marks)
marks.sort(key=lambda x: x[1])
print(""\nSorting the List of Tuples:"")
print(marks)
"
write a Python function to find the volume of Icosahedron	"

def findVolume(a):

	volume = ((5 / 12)
             * (3 + 5 ** 0.5)
              * a * a * a)
	return volume


a = 5


print(""Volume: "", findVolume(a))
"
Write a python program to turn every item of a list into its square.	"sample_list = [1, 2, 3, 4, 5, 6, 7]
square_list = [x * x for x in sample_list]
print(square_list)
"
53 write a program to find Armstrong number in an interval	"

lower = int(input(""Enter lower range: ""))
upper = int(input(""Enter upper range: ""))

for num in range(lower, upper + 1):
	sum = 0
	temp = num
	while temp > 0:
        digit = temp % 10
        sum += digit ** 3
        temp //= 10
        if num == sum:
            print(num)
"
write a python program to check is all are num/int	"print('ab,12'.isalnum())
"
length k	"

def string_k(k, str):

	string = []

	text = str.split("" "")

	for x in text:

        if len(x) > k:

            string.append(x)

	return string


k = 3
str1 = ""geek for geeks""
print(string_k(k, str1))
"
write a function to multiply all the numbers in a list	"def multiply_all(a_list):
	product = 1
	for i in a_list:
        product *= i
	return product
"
Write a python program to print the smallest number in a list	"

list1 = [10, 20, 1, 45, 99]

print(""Smallest element is:"", min(list1))
"
final list.	"
list1 = [11, 5, 17, 18, 23, 50]

for ele in list1:
	if ele % 2 == 0:
        list1.remove(ele)

print(""New list after removing all even numbers: "", list1)
"
Write a Python program to print the calendar of a given month and year	"import calendar
y = int(input(""Input the year : ""))
m = int(input(""Input the month : ""))
print(calendar.month(y, m))
"
Given an input string, count occurrences of all characters within a string	"str1 = ""Apple""
countDict = dict()
for char in str1:
	count = str1.count(char)
	countDict[char] = count
print(countDict)
"
velocity u, time t and acceleration a	"def cal_displacement(
	initial_velocity: float,
	accelration: float,
        time: float) -> float:
	return initial_velocity * time + .5 * accelration * (time)**2
"
middle of s1 given two strings, s1 and s2	"def appendMiddle(s1, s2):
	middleIndex = int(len(s1) / 2)
	middleThree = s1[:middleIndex:] + s2 + s1[middleIndex:]
	print(""After appending new string in middle"", middleThree)


appendMiddle(""Ault"", ""Kelly"")
"
Write a python program for printing number of unique elements in a list	"input_list = [1, 2, 2, 5, 8, 4, 4, 8]

l1 = []

count = 0

for item in input_list:
	if item not in l1:
        count += 1
        l1.append(item)


print(""No of unique items are:"", count)
"
71 write a program to add 2 binary numbers	"

num1 = '00001'
num2 = '10001'


sum = bin(int(num1, 2) + int(num2, 2))
print(sum)
"
Write a python program to print even length words in a string	"def printWords(s):
	s = s.split(' ')


for word in s:
	if len(word) % 2 == 0:
        print(word)


s = ""This is a python language""
printWords(s)
"
"square root is not an integer"""	"def find_integer_square_roots(num):
	found = False
	for k in range(1, (num // 2) + 1):
        if ((k**2) == num):
            found = True
            break
	if not found:
        return ""Error - the square root is not an integer""
	return -k, k
"
Write a function that generates Factorial of number	"def factorial(n):
	if n == 0 or n == 1:
        return 1
	else:
        return n * factorial(n - 1)
"
consonants and should contain vowels only.	"def find_substr():
	import re
	v = ""aeiou""
	c = ""qwrtypsdfghjklzxcvbnm""
	m = re.findall(r""(?<=[%s])([%s]{2,})[%s]"" % (c, v, c), input(), flags=re.I)
	print('\n'.join(m or ['-1']))
"
write a python function to count number of vowels in a string	"def count_vowels(text):
	v = set('aeiou')
	for i in v:
        print(f'\n {i} occurs {text.count(i)} times')
"
Python program to access function iside function	"def test(a):
	def add(b):
        nonlocal a
        a += 1
        return a + b

	return add


func = test(4)
print(func(4))
"
20 Write a python program to move number to end of string and print them	"test_str = 'the2sun4rises5sinthe6east9'

print(""The original string is : "" + str(test_str))
s = ''
r = ''
for i in test_str:
	if i.isdigit():
        s = s + i
	else:
        r = r + i
print(r + s)
"
Write a function to return the curved surface area of a cone	"def cal_cone_curved_surf_area(slant_height, radius):
	pi = 3.14
	return pi * radius * slant_height
"
Write a python function to sort a list of tuples by the second Item	"

def Sort_Tuple(tup):

	lst = len(tup)
	for i in range(0, lst):

        for j in range(0, lst - i - 1):
            if (tup[j][1] > tup[j + 1][1]):
                temp = tup[j]
                tup[j] = tup[j + 1]
                tup[j + 1] = temp
	return tup
"
write a python function to find URLs in a string	"

import re


def Find(string):
	regex = r""(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\"".,<>?«»“”‘’]))""
	url = re.findall(regex, string)
	return [x[0] for x in url]
"
66 Write a Python function to push all zeros to the end of a list.	"def move_zero(num_list):
	a = [0 for i in range(num_list.count(0))]
	x = [i for i in num_list if i != 0]
	x.extend(a)
	return(x)
"
Write a python function that Counts the Number of Blank Spaces in a Text File	"

def count_blank_space(fname):
	k = 0
	with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            for i in words:
                for letter in i:
                    if(letter.isspace):
                        k = k + 1
	return k
"
Lists and print it	"
test_list = [{'Nikhil': 17, 'Akash': 18, 'Akshat': 20},
             {'Nikhil': 21, 'Akash': 30, 'Akshat': 10},
             {'Nikhil': 31, 'Akash': 12, 'Akshat': 19}]


s = []
count = 0
for i in test_list:
	if count < 1:
        s.append(list(i.keys()))
	s.append(list(i.values()))
	count += 1
print(s)
"
Driven code	"mat = [[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]]
rotateMatrix(mat)
"
write a python program to print a random number between 0 and 1	"import random
print(random.uniform(0, 1))
"
Write a function to return the cartisian distance of a point from origin	"def cal_dist_from_orign(x: float, y: float) -> float:
	return (x**2 + y**2)**(1 / 2)
"
32 function to remove values from dictionary	"def remove_dic_value(a: dict, key):
	a.pop(key)
	return a
"
write a Python function that returns the determinant of a given square matrix	"def determinant(A):
	if len(A) == 1:
        return A[0][0]
	elif len(A) == 2:
        return A[0][0] * A[1][1] - A[0][1] * A[1][0]
	else:
        s = 0
        for i in range(len(A)):
            B = [[A[row][col] for col in range(1, len(A))]
                 for row in range(len(A)) if row != i]
            s += ((-1)**i) * A[i][0] * determinant(B)
        return s


print(determinant([[3, 0], [2, 2]]))
"
47. Python Program to Sort Words in Alphabetic Order	"
my_str = ""Hello this Is an Example With cased letters""
words = [word.lower() for word in my_str.split()]
words.sort()

print(""The sorted words are:"")
for word in words:
	print(word)
"
Write a function to return the volume of a cone	"def cal_cone_volume(height, radius):
	pi = 3.14
	return pi * (radius**2) * height / 3
"
write a python program that prints the area of a rectangle	"length = 10
width = 5
print(f'Area: {length * width}')
"
order reserved.	"def removeDuplicate(li):
	newli = []
	seen = set()
	for item in li:
        if item not in seen:
            seen.add(item)
            newli.append(item)
	return newli


li = [12, 24, 35, 24, 88, 120, 155, 88, 120, 155]
print(removeDuplicate(li))
"
program Creating a Dictionary with Mixed keys	"Dict = {'Name': 'Geeks', 1: [1, 2, 3, 4]}
print(""\nDictionary with the use of Mixed Keys: "")
print(Dict)
"
7 add a value to the start of a list python	"var = 7
array = [1, 2, 3, 4, 5, 6]
array.insert(0, var)
"
write a python program to create dictionary from the lists	"

L1 = ['a', 'b', 'c', 'd']
L2 = [1, 2, 3, 4]
d = dict(zip(L1, L2))
print(f'dictionary:{d}')
"
Write a python function to extract odd length words in String	"def findoddlenthwords(test_str):
	res = []
	for ele in test_str.split():
        if len(ele) % 2:
            res.append(ele)
	return res
"
in a list	"original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]
prices = [i if i > 0 else 0 for i in original_prices]
print(f""Final List:{prices}"")
"
write a function to find the sum of Sine series	"

import math


def sin(x, n):
	sine = 0
	for i in range(n):
        sign = (-1)**i
        pi = 22 / 7
        y = x * (pi / 180)
        sine = sine + ((y**(2.0 * i + 1)) / math.factorial(2 * i + 1)) * sign
	return sine
"
itertools.permutations(iterable, r)	"def random_permutation(iterable, r=None):
	import random
	pool = tuple(iterable)
	r = len(pool) if r is None else r
	return tuple(random.sample(pool, r))
"
80 write a program to print EVEN length words of a string	"str = ""Python is a programming language""


words = list(str.split(' '))


print(""str: "", str)
print(""list converted string: "", words)
print(""EVEN length words:"")
for W in words:
	if(len(W) % 2 == 0):
        print(W)
"
for the below list	"

def gnome_sort(alist):
	for pos in range(1, len(alist)):
        while (pos != 0 and alist[pos] < alist[pos - 1]):
            alist[pos], alist[pos - 1] = alist[pos - 1], alist[pos]
            pos = pos - 1


alist = [2, 3, 5, 6, 4, 5]
gnome_sort(alist)
print('Sorted list: ', end='')
print(alist)
"
"world!hello world!hello world!hello world!""."	"import zlib
s = b'hello world!hello world!hello world!hello world!'
t = zlib.compress(s)
print(t)
print(zlib.decompress(t))
"
Write a function that returns a list sorted ascending	"def ascending_sort(l: list):
	sorted(l, reverse=False)
"
Write a Python program to convert string into a datetime object	"from datetime import datetime
date_string = ""Mar 26 2021  4:20PM""
datetime_object = datetime.strptime(date_string, '%b %d %Y %I:%M%p')
print(datetime_object)
"
list but don’t add duplicates	"speed = {'jan': 47, 'feb': 52, 'march': 47, 'April': 44, 'May': 52, 'June': 53,
         'july': 54, 'Aug': 44, 'Sept': 54}


speedList = []
for item in speed.values():
	if item not in speedList:
        speedList.append(item)
print(""unique list"", speedList)
"
write a python function to find the L.C.M. of two input number	"

def compute_lcm(x, y):

	if x > y:
        greater = x
	else:
        greater = y

	while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1

	return lcm


num1 = 54
num2 = 24


print(""The L.C.M. is"", compute_lcm(num1, num2))
"
value and print it	"
test_dict = {5: 3, 1: 3, 10: 4, 7: 3, 8: 1, 9: 5}

res = 0
test_dict = list(test_dict.items())
for idx in range(0, len(test_dict)):
	if idx == test_dict[idx][0] or idx == test_dict[idx][1]:
        res += 1

print(""The required frequency : "" + str(res))
"
49. python function for finding the logarithmic value of a number	"def log(x):
	

	return math.log(x)
"
write a python code to implement RELU function	"def relu(array):
	return [max(0, i)
            for i in array if(isinstance(i, int) or isinstance(i, float))]
"
of numbers	"

num_array = [8, 6, 15, 23, 14, 28, 5, 1, 99]
largest = second_largest = num_array[0]
for i in range(1, len(num_array)):
	if num_array[i] > largest:
        second_largest = largest
        largest = num_array[i]
	elif num_array[i] > second_largest:
        second_largest = num_array[i]
print(second_largest)
"
write a python function to return the nth fibonacci number	"def fib(n):
	if n <= 1:
        return n
	else:
        return (fib(n - 1) + fib(n - 2))
"
Write a Python function to Print an Identity Matrix	"

def print_identity_matrix(n):
	for i in range(0, n):
        for j in range(0, n):
            if(i == j):
                print(""1"", sep="" "", end="" "")
            else:
                print(""0"", sep="" "", end="" "")
        print()
"
using regex in Python	"

import re


def find(string, sample):

	if (sample in string):

        y = ""^"" + sample

        x = re.search(y, string)

        if x:
            print(""string starts with the given substring"")

        else:
            print(""string doesn't start with the given substring"")

	else:
        print(""entered string isn't a substring"")
"
47 write a program to  sort Dictionary by key-value Summation and print it	"

test_dict = {3: 5, 1: 3, 4: 6, 2: 7, 8: 1}
res = sorted(test_dict.items(), key=lambda sub: sub[0] + sub[1])
res = {sub[0]: sub[1] for sub in res}
print(""The sorted result : "" + str(res))
"
Using endswith() + join() + list comprehension + zip() + loop	"
def help_fnc(i, j):
	for ele in range(len(j), -1, -1):
        if i.endswith(j[:ele]):
            return j[ele:]


test_list = [""India"", ""gone"", ""new"", ""best""]

print(""The original list is : "" + str(test_list))

res = ''.join(help_fnc(i, j) for i, j in zip(['']
                                             + test_list, test_list))

print(""The resultant joined string : "" + str(res))
"
percentage	"def cal_sp_after_discount(sp: float, discount: float) -> float:
	return sp * (1 - discount / 100)
"
Write a function that will provide the ascii value of a character	"

def charToASCII(chr):
	return f'ASCII value of {chr} is: {ord(chr)}'
"
Write a function te return cube of a number	"def cube(num):
	return num ** 3
"
Write a python function to multiply all values in a list	"
def multiplyList(myList):
	result = 1
	for x in myList:
        result = result * x
	return result
"
and the Last Character have been Exchanged	"

def change(string):
	return string[-1:] + string[1:-1] + string[:1]
"
Write a Python Program to Remove the Given Key from a Dictionary	"

def remove_item_dict(d, key):
	if key in d:
        del d[key]
	else:
        print(""Key not found!"")
        exit(0)
"
Shuffle a list randomly	"import random
list = [2, 5, 8, 9, 12]
random.shuffle(list)
print(""Printing shuffled list "", list)
"
Write a Python program to Multiply two list and print the resultant list	"test_list1 = [1, 3, 4, 6, 8]
test_list2 = [4, 5, 6, 2, 10]
res_list = []
for i in range(0, len(test_list1)):
	res_list.append(test_list1[i] * test_list2[i])
print(""Resultant list is : "" + str(res_list))
"
60 function to use global varibale implementation	"def gloabl_use(n):
	global val
	return val * n
"
Interning of string	"hello1 = 'Hello'
hello2 = 'Hell' + 'o'
hello3 = 'Hell'
hello3 = hello3 + 'o'
print('hello1 is hello2:', hello1 is hello2)
print('hello1 is hello3:', hello1 is hello3)
"
write a python function that would print the ASCII value of a given character	"def print_ascii(char):
	print(ord(char))
"
Squares and Sum of all Digits in the Number is Less than 10	"

l = 6
u = 9
a = [x for x in range(l, u + 1) if (int(x**0.5))**2
     == x and sum(list(map(int, str(x)))) < 10]
print(a)
"
Write a python function to sort a list of tuples by the second Item	"

def Sort_Tuple(tup):

	lst = len(tup)
	for i in range(0, lst):

        for j in range(0, lst - i - 1):
            if (tup[j][1] > tup[j + 1][1]):
                temp = tup[j]
                tup[j] = tup[j + 1]
                tup[j + 1] = temp
	return tup
"
modify the 1st element of the 2nd sublist	"my_list2[1][0] = 'a'
print(""after my_list2[1][0] = 'a':  ---> "", my_list2)


for a, b in zip(my_list1, my_list2):
	print('id my_list1: {}, id my_list2: {}'.format(id(a), id(b)))
"
write a program to print maximum frequency character in a string	"

str1 = ""watch the match""
all_freq = {}
for i in str1:
	if i in all_freq:
        all_freq[i] += 1
	else:
        all_freq[i] = 1
res = max(all_freq, key=all_freq.get)
print(""Maximum of all characters is: "" + str(res))
"
write a program to create identity matrix with dimension provided	"dim = 3
M = []
while len(M) < dim:
	M.append([])
	while len(M[-1]) < dim:
        M[-1].append(0.0)


for i in range(dim):
	M[i][i] = 1.0


print('Identity Matrix')
for i in range(dim):
	row = '|'
	for b in range(dim):
        row = row + ' ' + str(M[i][b])
	print(row + ' ' + Solution: '|')
"
Write python function role a dice	"

import random
min = 1
max = 6


roll_again = ""yes""


while roll_again == ""yes"" or roll_again == ""y"":
	print(""Rolling the dices..."")
	print(""The values are...."")
	print(random.randint(min, max))
	print(random.randint(min, max))

	roll_again = input(""Roll the dices again?"")
"
write a python program to check is an num/int	"print('11'.isnumeric())
"
write a Python function to Calculate Curved Surface Area of Cylinder	"def curvedsurfacearea(r, h):
	cursurf_ar = (2 * pi * r * h)
	return cursurf_ar


r = 5
h = 8


print(""Curved Surface Area Of Cylinder = "", curvedsurfacearea(r, h))
"
write a python function for Named Entity Recognizer using NLTK	"def ner_checker(texts):
	all_set = set()

	def nltk_ner_check(texts):
        for i, text in texts:
            for entity in nltk.ne_chunk(nltk.pos_tag(nltk.word_tokenize(text))):
                if isinstance(entity, nltk.tree.Tree):
                    etext = "" "".join([word for word, tag in entity.leaves()])
                    
                    all_set.add(etext)

	nltk_ner_check(texts=texts)
	return all_set
"
write a program to compute the count of each word in a sentence and print it	"word_freq = {}
line = 'how many how words does this many have'
for word in line.split():
	word_freq[word] = word_freq.get(word, 0) + 1
print(word_freq)
"
write a function to remove i-th indexed character in a given string	"

def remove_char(string, i):

	str1 = string[: i]

	str2 = string[i + 1:]

	return str1 + str2
"
Write a python program to find and print product of two matrices	"

A = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]

B = [[5, 8, 1, 2],
     [6, 7, 3, 0],
     [4, 5, 9, 1]]

result = [[0, 0, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]]


for i in range(len(A)):
	for j in range(len(B[0])):
        for k in range(len(B)):
            result[i][j] += A[i][k] * B[k][j]

for r in result:
	print(r)
"
9. python function to add even mubers in a list	"def add_even_num(l):
	sum = reduce(lambda a, b: a + b, filter(lambda a: (a % 2 == 0), l))
	return sum
"
for the below list	"

def radix_sort(alist, base=10):
	if alist == []:
        return

	def key_factory(digit, base):
        def key(alist, index):
            return ((alist[index] // (base**digit)) % base)
        return key
	largest = max(alist)
	exp = 0
	while base**exp <= largest:
        alist = counting_sort(alist, base - 1, key_factory(exp, base))
        exp = exp + 1
	return alist


def counting_sort(alist, largest, key):
	c = [0] * (largest + 1)
	for i in range(len(alist)):
        c[key(alist, i)] = c[key(alist, i)] + 1

	c[0] = c[0] - 1
	for i in range(1, largest + 1):
        c[i] = c[i] + c[i - 1]

	result = [None] * len(alist)
	for i in range(len(alist) - 1, -1, -1):
        result[c[key(alist, i)]] = alist[i]
        c[key(alist, i)] = c[key(alist, i)] - 1

	return result


alist = [2, 3, 5, 6, 4, 5]
sorted_list = radix_sort(alist)
print('Sorted list: ', end='')
print(sorted_list)
"
write a python function to generate wordcloud on given text or file	"import os


def get_word(data):
	if not (isinstance(data, str) or os.path.isfile(data)):
        raise TypeError(""Text must be string or a File object."")
	from wordcloud import WordCloud, STOPWORDS
	import matplotlib.pyplot as plt
	stopwords = set(STOPWORDS)
	if os.path.isfile(data):
        with open(data, 'r') as f:
            data = f.read()

	data = ' '.join(data.lower().split(' '))
	wordcloud = WordCloud(width=400, height=400,
                          background_color='white',
                          stopwords=stopwords,
                          min_font_size=15).generate(data)

	
	plt.figure(figsize=(8, 8), facecolor=None)
	plt.imshow(wordcloud)
	plt.axis(""off"")
	plt.tight_layout(pad=0)

	plt.show()
"
all characters by 5	"

def shift_n_letters(letter, n):
	return chr(
        (ord(letter)
	- 97
         + n %
         26) %
        26
        + 97) if ord(letter) >= 97 else chr(
            (ord(letter)
            - 65
             + n %
             26) %
            26
        + 65)


name = ""hello""


res = """".join([shift_n_letters(x, 5) for x in name])


print('Resulting string', res)
"
affecting the local counterpart:	"def my_func():
	var = 'locally changed'


var = 'global'
my_func()
print(var)
"
loan amount, interest rate, annual payments and tenure.	"import itertools


def loan_schedule(principal, interest_rate, annual_payment, tenure):
	if(tenure <= 0):
        print(""Invalid tenure"", tenure)
        raise ValueError
	if(interest_rate > 1 or interest_rate < 0):
        print(""Invalid interest rate"", interest_rate,
              "" Expected between 0 and 1"")
        raise ValueError
	cashflows = [principal, *list(itertools.repeat(-annual_payment, tenure))]
	effective_interest_rate = 1 + interest_rate
	return [
        val for val in list(
            itertools.accumulate(
                cashflows,
                lambda bal,
                pmt: (
                    bal
                            * effective_interest_rate
                    + pmt))) if val > 0]
"
write a python function to get dot product between two lists of numbers	"def dot_product(a, b):
	return sum(e[0] * e[1] for e in zip(a, b))
"
digits and letters and print them	"

x = input(""Enter a string! "")
d = l = 0
for c in x:
	if c.isdigit():
        d = d + 1
	elif c.isalpha():
        l = l + 1
	else:
        pass
print(""Letters: "", l)
print(""Digits: "", d)
"
Write a Python function to create a union of sets.	"def union_of_sets(Set1, Set2):
	result = Set1 | Set2
	return result
"
Write a Python Program to Check if a Number is a Strong Number	"

def strong_no_check(num):
	sum1 = 0
	temp = num
	while(num):
        i = 1
        f = 1
        r = num % 10
        while(i <= r):
            f = f * i
            i = i + 1
        sum1 = sum1 + f
        num = num // 10
	if(sum1 == temp):
        return True
	else:
        return False
"
write a python program to print current datetime	"from datetime import datetime


now = datetime.now()
print(now)
"
Remove the last element from the stack	"s = [1, 2, 3, 4]
print(f""last element from the stack:{s.pop()}"")
"
write a python program to add two numbers	"num1 = 1.5
num2 = 6.3
sum = num1 + num2
print(f'Sum: {sum}')
"
61 write a program to print the elements of an array present on even position	"arr = [1, 2, 3, 4, 5]

print(""Elements of given array present on even position: "")

for i in range(1, len(arr), 2):
	print(arr[i])
"
write Python code to demonstrate Kth Non-None String from Rear using filter()	"

test_list = ["""", """", ""Akshat"", ""Nikhil""]


print(""The original list : "" + str(test_list))


K = 2


res = list(filter(None, test_list))[-K]


print(""The Kth non empty string from rear is : "" + str(res))
"
thea and distance for axis of rotation to place force applied is r	"def cal_torque(force: float, theta: float, r: float) -> float:
	import math
	return force * r * math.sin(theta)
"
Write a function to return the surface area of a sphere	"def cal_area_sphere(radius):
	pi = 3.14
	return 4 * pi * (radius**2)
"
47 write a python function to print lcm of n numbers python	"import math


def LCMofArray(a):
	lcm = a[0]
	for i in range(1, len(a)):
        lcm = lcm * a[i] // math.gcd(lcm, a[i])
	return lcm


arr1 = [1, 2, 3]
print(""LCM of arr1 elements:"", LCMofArray(arr1))
"
by the given mean and standard deviation	"def shift_and_scale(list_of_nums, mean, std):
	return [(x - mean) / std for x in list_of_nums]
"
write a program that uses delete function on  Dictionary	"Dict = {5: 'Welcome', 6: 'To', 7: 'Geeks',
        'A': {1: 'Geeks', 2: 'For', 3: 'Geeks'},
        'B': {1: 'Geeks', 2: 'Life'}}
print(""Initial Dictionary: "")
print(Dict)


del Dict[6]
print(""\nDeleting a specific key: "")
print(Dict)


del Dict['A'][2]
print(""\nDeleting a key from Nested Dictionary: "")
print(Dict)
"
Write a Python program to typecast given input to float	"num = float(input(""Input a value: ""))
print(num)
"
Write a Python Program to Detect if Two Strings are Anagrams	"

def anagram_check(s1, s2):
	if(sorted(s1) == sorted(s2)):
        return True
	else:
        return False
"
Write a Python function to find the intersection of two arrays	"def array_intersection(A, B):
	inter = list(set(A) & set(B))
	return inter
"
write a program to print length of a string	"

str1 = ""great way to learn!""
print(len(str1))
"
occurrence of even element.	"
test_list = [1, 3, 7, 4, 7, 2, 9, 1, 10, 11]

indices_list = [idx for idx in range(
	len(test_list)) if test_list[idx] % 2 == 0]


res = indices_list[-1] - indices_list[0]

print(""Even elements distance : "" + str(res))
"
Write a python program to print the uncommon elements in List	"

test_list1 = [[1, 2], [3, 4], [5, 6]]
test_list2 = [[3, 4], [5, 7], [1, 2]]

res_list = []
for i in test_list1:
	if i not in test_list2:
        res_list.append(i)
for i in test_list2:
	if i not in test_list1:
        res_list.append(i)

print(""The uncommon of two lists is : "" + str(res_list))
"
write a function to convert list to tuple	"def list2tuple(l):
	return tuple(l)
"
Check if there is a value for a key in JSON	"import json


studentJson = """"""{
	""id"": 1,
	""name"": ""Piyush Jain"",
	""class"": null,
	""percentage"": 35,
	""email"": ""piyushjain220@gmail.com""
}""""""
student = json.loads(studentJson)
if not (student.get('email') is None):
	print(""value is present for given JSON key"")
	print(student.get('email'))
else:
	print(""value is not present for given JSON key"")
"
Write a Python Program to Remove and print the Duplicate Items from a List	"

a = [2, 3, 8, 9, 2, 4, 6]
b = set()
unique = []
for x in a:
	if x not in b:
        unique.append(x)
        b.add(x)
print(""Non-duplicate items:"")
print(unique)
"
string 'n' times.	"def repeated_string(s, n):
	return s.count('a') * (n // len(s)) + s[:n % len(s)].count('a')
"
Write a function to return the circumference of a circle	"def cal_circumference(r):
	pi = 3.14
	return 2 * pi * r
"
travelled in given time	"def cal_speed(distance: float, time: float) -> float:
	return distance / time
"
deviation of elements within the list	"mean = sum(s1) / len(s1)
variance = sum([((x - mean) ** 2) for x in s1]) / len(s1)
res = variance ** 0.5
print(""Standard deviation of sample is : "" + str(res))
"
given list	"l = [""good"", ""oh!"", ""excellent!"", ""#450""]
print([n for n in l if n.isalpha() or n.isdigit()])
"
list for the below list	"

def bubble_sort(alist):
	for i in range(len(alist) - 1, 0, -1):
        no_swap = True
        for j in range(0, i):
            if alist[j + 1] < alist[j]:
                alist[j], alist[j + 1] = alist[j + 1], alist[j]
                no_swap = False
        if no_swap:
            return


alist = [2, 3, 5, 6, 4, 5]
bubble_sort(alist)
print('Sorted list: ', end='')
print(alist)
"
Non-Empty String	"

def remove(string, n):
	first = string[:n]
	last = string[n + 1:]
	return first + last
"
removes leading characters	"word = "" xyz ""
lstrip = word.lstrip()
print(f""String ater removal of leading characters:{lstrip}"")
"
98 write a program to reverse a string that contains digits in Python	"

def reverse(n):
	s = str(n)
	p = s[::-1]
	return p


num = int(input('Enter a positive value: '))
print('The reverse integer:', reverse(num))
"
Write a  program to split strings using split function.	"string = ""India is my country.""
string_list = string.split(' ')
print(string_list)
"
Counting total alphanumeric in a string	"str1 = ""abc4234AFde""
digitCount = 0
for i in range(0, len(str1)):
	char = str1[i]
	if(char.isalpha()):
        digitCount += 1
print('Number of alphanumeric: ', digitCount)
"
what if we put a mutable object into the immutable tuple	"tup1 = ([],)
print('tup before: ', tup1)
tup1[0] += [1]
"
objects of mass m1 and m2 and distance of r between them	"def cal_gforce(mass1: float, mass2: float, distance: float) -> float:
	g = 6.674 * (10)**(-11)
	return (g * mass1 * mass2) / (distance**2)
"
of letters and digits.	"s = raw_input()
d = {""DIGITS"": 0, ""LETTERS"": 0}
for c in s:
	if c.isdigit():
        d[""DIGITS""] += 1
	elif c.isalpha():
        d[""LETTERS""] += 1
	else:
        pass
print(""LETTERS"", d[""LETTERS""])
print(""DIGITS"", d[""DIGITS""])
"
write a python function to convert a number from binary to decimal	"
def binaryToDecimal(n):
	num = n
	dec_value = 0
	base = 1
	temp = num
	while(temp):
        last_digit = temp % 10
        temp = int(temp / 10)

        dec_value += last_digit * base
        base = base * 2
	return dec_value
"
and print the result in boolean format(True or False)	"x = int(input(""Enter any no. ""))


def perfect_number(n):
	sum = 0
	for x in range(1, n):
        if n % x == 0:
            sum += x
	return sum == n


print(perfect_number(x))
"
Write a python function to find gcd using eucliean algorithm	"

def gcd(a, b):
	if a == 0:
        return b

	return gcd(b % a, a)
"
the result	"transposed = []
matrix = [[1, 2, 3, 4], [4, 5, 6, 8]]


for i in range(len(matrix[0])):
	transposed_row = []

	for row in matrix:
        transposed_row.append(row[i])
	transposed.append(transposed_row)


print(f""{transposed}"")
"
write a python function to return only odd numbers in a list	"def filter_odd(nums):
	return list(filter(lambda num: num % 2 == 1, nums))
"
92 write a program to print the version information	"

print(""Python version: "", sys.version)
print(""Python version info: "", sys.version_info)
"
Write a python program to find and print  K th column of a matrix	"

test_list = [[4, 5, 6], [8, 1, 10], [7, 12, 5]]


K = 2
res = [sub[K] for sub in test_list]
print(""The Kth column of matrix is : "" + str(res))
"
200 inclusive.	"import random
print(random.sample(range(100), 5))
"
"Print a unicode string ""hello world""."	"unicodeString = u""hello world!""
print(unicodeString)
"
8 write a program to break a list into chunks of size N	"l = [1, 2, 3, 4, 5, 6, 7, 8, 9]
n = 4
x = [l[i:i + n] for i in range(0, len(l), n)]
print(x)
"
Write a function to implement Pigeonhole Sort */	"def pigeonhole_sort(a):
	my_min = min(a)
	my_max = max(a)
	size = my_max - my_min + 1
	holes = [0] * size
	for x in a:
        assert type(x) is int, ""integers only please""
        holes[x - my_min] += 1
	i = 0
	for count in range(size):
        while holes[count] > 0:
            holes[count] -= 1
            a[i] = count + my_min
            i += 1


a = [8, 3, 2, 7, 4, 6, 8]
print(""Sorted order is : "", end="" "")
pigeonhole_sort(a)
for i in range(0, len(a)):
	print(a[i], end="" "")
"
77 show all local values while one function is running	"def show_local():
	import math
	a = 10
	b = 'Hello There'
	print(locals())
"
numbers	"num1 = float(input(""Enter first number: ""))
num2 = float(input(""Enter second number: ""))
num3 = float(input(""Enter third number: ""))


if (num1 >= num2) and (num1 >= num3):
	largest = num1
elif (num2 >= num1) and (num2 >= num3):
	largest = num2
else:
	largest = num3


print(""The largest number is"", largest)
"
write a python function to check whether the number is a lucky number	"

def isLucky(n):

	isLucky.counter = 2
	next_position = n
	if isLucky.counter > n:
        return 1
	if n % isLucky.counter == 0:
        return 0
	next_position = next_position - next_position / isLucky.counter
	isLucky.counter = isLucky.counter + 1
	return isLucky(next_position)
"
19 function to print ascii value of a character.	"def show_ascii(a: str):
	print(ord(a))
"
of Tuple Values	"test_dict = {'END Program': (5, 6, 1), 'is': (8, 3, 2), 'best': (1, 4, 9)}
prod_list = []
for x in zip(*test_dict.values()):
	res = 1
	for ele in x:
        res *= ele
	prod_list.append(res)
res = tuple(prod_list)
print(""The product from each index is : "" + str(res))
"
and velocity v	"def cal_ke(mass: float, velocity: float) -> float:
	return (mass * (velocity)**2) / 2
"
Write a Python program to check/test multiple variables against a value	"a = 10
b = 20
c = 30
if 10 in {a, b, c}:
	print(""True"")
else:
	print(""False"")
"
string and print the output	"

str1 = input(""Please Enter Your Own String : "")
vowels = 0

for i in str1:
	if(i == 'a' or i == 'e' or i == 'i' or i == 'o' or i == 'u' or i == 'A' or
            i == 'E' or i == 'I' or i == 'O' or i == 'U'):
        vowels = vowels + 1

print(""Total Number of Vowels in this String = "", vowels)
"
list for the below list	"

def bucket_sort(alist):
	largest = max(alist)
	length = len(alist)
	size = largest / length

	buckets = [[] for _ in range(length)]
	for i in range(length):
        j = int(alist[i] / size)
        if j != length:
            buckets[j].append(alist[i])
        else:
            buckets[length - 1].append(alist[i])

	for i in range(length):
        insertion_sort(buckets[i])

	result = []
	for i in range(length):
        result = result + buckets[i]

	return result


def insertion_sort(alist):
	for i in range(1, len(alist)):
        temp = alist[i]
        j = i - 1
        while (j >= 0 and temp < alist[j]):
            alist[j + 1] = alist[j]
            j = j - 1
        alist[j + 1] = temp


alist = [2, 3, 5, 6, 4, 5]
sorted_list = bucket_sort(alist)
print('Sorted list: ', end='')
print(sorted_list)
"
original form	"

a = {""a"": 1, ""b"": 2, ""c"": 3}
b = dict(zip(a.values(), a.keys()))
print(b)
"
the length is less than 2.	"def substring_copy(str, n):
	flen = 2
	if flen > len(str):
        flen = len(str)
	substr = str[:flen]

	result = """"
	for i in range(n):
        result = result + substr
	return result


print(substring_copy('abcdef', 2))
print(substring_copy('p', 3))
"
and print the evaluation result.	"expression = raw_input()
print(eval(expression))
"
write a program to Pretty Print a dictionary with dictionary values.	"test_dict = {'tsai': {'rate': 5, 'remark': 'good'}, 'cs': {'rate': 3}}
print(""The Pretty Print dictionary is : "")
for sub in test_dict:
	print(f""\n{sub}"")
	for sub_nest in test_dict[sub]:
        print(sub_nest, ':', test_dict[sub][sub_nest])
"
monotonically increasing or decreasing, return False otherwise	"

def isMonotonic(A):
	return (all(A[i] <= A[i + 1] for i in range(len(A) - 1))
            or all(A[i] >= A[i + 1] for i in range(len(A) - 1)))
"
Concatenation of two List	"my_list1 = [4, 3, 2, 9, 10, 44, 1]
my_list2 = [5, 6, 2, 8, 15, 14, 12]
print(f""Sum of two list:,{my_list1+my_list2}"")
"
write a python program to add two octal numbers	"
a = ""123""
b = ""456""
sum = oct(int(a, 8) + int(b, 8))
print(sum[2:])
"
Write a program to find common divisors between two numbers in a given pair	"def ngcd(x, y):
	i = 1
	while(i <= x and i <= y):
        if(x % i == 0 and y % i == 0):
            gcd = i
        i += 1
	return gcd


def num_comm_div(x, y):
	n = ngcd(x, y)
	result = 0
	z = int(n**0.5)
	i = 1
	while(i <= z):
        if(n % i == 0):
            result += 2
        if(i == n / i):
            result -= 1
        i += 1
	return result
"
inclusive.	"import random


print(random.randrange(7, 16))
"
area, base perimeter & height as input	"def prism_surface_area(base_area, base_perimeter, height):
	surface_area = 2 * base_area + (base_perimeter * height)
	return surface_area
"
Write a function to return the total surface area of a cube of side a	"def cal_surface_area_cube(a):
	return 6 * (a**2)
"
write a python program to make use of enumerate method	"

for count, value in enumerate(obj):
	print(count, value)
"
Write a function to print all possible subarrays using recursion	"def printSubArrays(arr, start, end):
	if end == len(arr):
        return
	elif start > end:
        return printSubArrays(arr, 0, end + 1)
	else:
        print(arr[start:end + 1])
        return printSubArrays(arr, start + 1, end)


arr = [1, 2, 3]
printSubArrays(arr, 0, 0)
"
the Newton-Raphson method.	"def newton_raphson(c, x=0):
	for _ in range(20):
        polynomial = c[0] * x**3 + c[1] * x**2 + c[2] * x + c[3]
        derivative = 3 * c[0] * x**2 + 2 * c[1] * x + c[2]
        x -= polynomial / derivative
	return round(x, 3)


print(newton_raphson([-0.1, 0.4, 0.1, -0.8]))
"
write a python program to check is an variable is printable	"print('1@ a'.isprintable())
"
write a python program to get numbers divisible by fifteen from a list	"

num_list = [45, 55, 60, 37, 100, 105, 220]
result = list(filter(lambda x: (x % 15 == 0), num_list))
print(f""Numbers divisible by 15 are {result}"")
"
first and last number of a list is same	"def isFirst_And_Last_Same(numberList):
	firstElement = numberList[0]
	lastElement = numberList[-1]
	if (firstElement == lastElement):
        return True
	else:
        return False
"
positive area is possible with the given angles	"
def isTriangleExists(a, b, c):

	if(a != 0 and b != 0 and c != 0 and (a + b + c) == 180):

        if((a + b) >= c or (b + c) >= a or (a + c) >= b):
            return ""YES""
        else:
            return ""NO""
	else:
        return ""NO""
"
Numeric Strings Using all() + list comprehension + isdigit()	"test_list = [(""45"", ""86""), (""Gfg"", ""1""), (""98"", ""10""), (""Gfg"", ""Best"")]
print(""The original list is : "" + str(test_list))
res = [sub for sub in test_list if all(ele.isdigit() for ele in sub)]
print(""Filtered Tuples : "" + str(res))
"
result	"l = [1, 2, 3, 4, 5, 5, 5, 5, 5, 5, 5, 7, 8, 8, 0]
result = set(l)
print(""Result : "", result)
"
Write a python program for printing number of unique elements in a list	"input_list = [1, 2, 2, 5, 8, 4, 4, 8]

l1 = []

count = 0

for item in input_list:
	if item not in l1:
        count += 1
        l1.append(item)


print(""No of unique items are:"", count)
"
repeating characters.	"str = ""akshayjain""


def longest_non_repeat(str):
	i = 0
	max_length = 1

	for i, c in enumerate(str):
        start_at = i
        sub_str = []
        while (start_at < len(str)) and (str[start_at] not in sub_str):
            sub_str.append(str[start_at])
            start_at = start_at + 1
        if len(sub_str) > max_length:
            max_length = len(sub_str)
        print(sub_str)
	return max_length


longest_non_repeat(str)
"
write a python program that prints the length of tuple	"thistuple = (""apple"", ""banana"", ""cherry"")
print(len(thistuple))
"
natural numbers, where n is the input	"def sum_first_n_recursive(n):
	if n == 0:
        return 0
	return sum_first_n_recursive(n - 1) + n
"
else return None ax**2 + bx + c = 0	"def roots_of_qad_eq(a: float, b: float, c: float):
	d = b**2 - 4 * a * c
	if d >= 0:
        return (-b + (d)**(1 / 2)) / 2 * a, (-b - (d)**(1 / 2)) / 2 * a
	else:
        return None
"
Write a function to return the volume of a hemi sphere	"def cal_hemisphere_volume(radius: float) -> float:
	pi = 3.14
	return (2 / 3) * pi * (radius**3)
"
write a program to create print array in beautiful format	"a = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]


for i in a:
	row = '|'
	for b in i:
        row = row + ' ' + str(b)
	print(row + ' ' + '|')
"
write a python function to that performs as ReLU	"

def ReLU(num):
	if num > 0:
        return num
	return 0
"
final list.	"
list1 = [11, 5, 17, 18, 23, 50]

for ele in list1:
	if ele % 2 == 0:
        list1.remove(ele)

print(""New list after removing all even numbers: "", list1)
"
43 function to print yesterday and tomorrow date	"def tmrw_yest_time():
	import datetime
	yesterday = datetime.datetime.now() - datetime.timedelta(1)
	tmrw = datetime.datetime.now() + datetime.timedelta(1)
	print(yesterday, tmrw)
"
write a python function to check external IP address	"def check_ip():
	import re
	import urllib.request as ur
	url = ""http://checkip.dyndns.org""
	with ur.urlopen(url) as u:
        s = str(u.read())
        ip = re.findall(r""\d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}"", s)
        print(""IP Address: "", ip[0])
        return ip[0]
"
45 logging message	"def logging(msg, *, dt=datetime.utcnow()):
	print(f'message at {dt} was {msg}')
"
19. python program to compare strings using interning	"import sys


def compare_using_interning(n):
	a = sys.intern('a long string that is not intered' * 200)
	b = sys.intern('a long string that is not intered' * 200)
	for i in range(n):
        if a is b:
            pass
"
write a python program to print current working directory	"print(os.getcwd())
"
length in a string	"

str1 = ""It is wonderful and sunny day for a picnic in the park""
str_len = 5


res_str = []

text = str1.split("" "")

for x in text:

	if len(x) < str_len:
        res_str.append(x)


print(""Words that are less than "" + str(str_len) + "": "" + str(res_str))
"
write a python Creating a Dictionary and  Accessing element using key	"Dict = {'Dict1': {1: 'Geeks'},
        'Dict2': {'Name': 'For'}}


print(Dict['Dict1'])
print(Dict['Dict1'][1])
print(Dict['Dict2']['Name'])
"
Write a function that returns sum of all odd elements in the list	"def sum_odd_elements(l: list):
	return sum([i for i in l if i % 2 == 1])
"
44. Python Program to Multiply Two Matrices using Nested Loop	"

X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]
"
write a python function to compute gcd	"

def compute_gcd(x, y):

	while(y):
        x, y = y, x % y
	return x
"
Count Tuple Elements Inside List	"random = ['a', ('a', 'b'), ('a', 'b'), [3, 4]]
count = random.count(('a', 'b'))
print(""The count of ('a', 'b') is:"", count)
"
write a python function to bubblesort an array	"
def bubbleSort(arr):
	n = len(arr)

	for i in range(n - 1):
        for j in range(0, n - i - 1):
            if arr[j] > arr[j + 1]:
                arr[j], arr[j + 1] = arr[j + 1], arr[j]
"
91 write a python program to concatenate tuple and print it	"
test_tup1 = (1, 3, 5)
test_tup2 = (4, 6)

print(""The original tuple 1 : "" + str(test_tup1))
print(""The original tuple 2 : "" + str(test_tup2))
c = test_tup1 + test_tup2
print(c)
"
containing the squares of the elements of the input list	"def square_list_elements(list_to_be_squared):
	return list(map(lambda x: x**2, list_to_be_squared))
"
3x4 matrix	"Y = [[5, 8, 1, 2],
     [6, 7, 3, 0],
     [4, 5, 9, 1]]
"
input and reverses the order of its elements	"def reverse(seq):
	SeqType = type(seq)
	emptySeq = SeqType()
	if seq == emptySeq:
        return emptySeq
	restrev = reverse(seq[1:])
	first = seq[0:1]
	result = restrev + first
	return result
"
current working directory	"import os


def change_dir(path):
	return os.chdir(path)
"
write a program to print logrithmic values of any number	"

import math
x = 100
base = 5
print(math.log(x, base))
"
write a python function to sort list using heapq	"def heapsort(iterable):
	from heapq import heappush, heappop
	h = []
	for value in iterable:
        heappush(h, value)
	return [heappop(h) for i in range(len(h))]
"
8 print into lowersase an uppercase sentence in python	"s = ""Kilometer""
print(s.lower())
"
of the array should be i*j.	"input_str = input()
dimensions = [int(x) for x in input_str.split(',')]
rowNum = dimensions[0]
colNum = dimensions[1]
multilist = [[0 for col in range(colNum)] for row in range(rowNum)]


for row in range(rowNum):
	for col in range(colNum):
        multilist[row][col] = row * col


print(multilist)
"
in a dictionary	"input_dict = {'key_a': 10, 'kEy': 2, 'Key_B': 13}
for key in list(input_dict.keys()):
	new_key = key[0].upper() + key[1:-1] + key[-1].upper()
	input_dict[new_key] = input_dict[key]
	if key != new_key:
        del input_dict[key]
"
Write a python program to print positive Numbers in a List	"
list1 = [11, -21, 0, 45, 66, -93]

for num in list1:

	if num >= 0:
        print(num, end="" "")
"
Write a function to get list of profanity words from Google profanity URL	"def profanitytextfile():
	url = ""https://github.com/RobertJGabriel/Google-profanity-words/blob/master/list.txt""
	html = urlopen(url).read()
	soup = BeautifulSoup(html, features=""html.parser"")

	textlist = []
	table = soup.find('table')
	trs = table.find_all('tr')
	for tr in trs:
        tds = tr.find_all('td')
        for td in tds:
            textlist.append(td.text)
	return textlist
"
7 write a  program to remove empty tuples from a list of tuples	"def Remove(tuples):
	tuples = filter(None, tuples)
	return tuples
"
key:value pair using enumerate	"

my_list = ['a', 'b', 'c', 'd', 'e']
for index, value in enumerate(my_list):
	print('{0}: {1}'.format(index, value))
"
69 Write a Python function to add two binary numbers.	"def add_binary_nums(x, y):
	max_len = max(len(x), len(y))

	x = x.zfill(max_len)
	y = y.zfill(max_len)

	result = ''
	carry = 0

	for i in range(max_len - 1, -1, -1):
        r = carry
        r += 1 if x[i] == '1' else 0
        r += 1 if y[i] == '1' else 0
        result = ('1' if r % 2 == 1 else '0') + result
        carry = 0 if r < 2 else 1

	if carry != 0:
        result = '1' + result

	return result.zfill(max_len)
"
principle amount, rate of interest and time is given	"def compound_interest(p, r, t):
	ci = p * (pow((1 + r / 100), t))
	return ci
"
nearest square number	"import math


def nearest_square(n):
	upp = math.floor(math.sqrt(n))
	low = math.floor(math.sqrt(n))
	upp_diff = upp ** 2 - n
	low_diff = n - low ** 2

	if upp_diff > low_diff:
        return upp
	else:
        return low
"
list and even numbers from the second list	"def mergeList(list1, list2):
	thirdList = []
	for num in list1:
        if (num % 2 != 0):
            thirdList.append(num)
	for num in list2:
        if (num % 2 == 0):
            thirdList.append(num)
	return thirdList
"
sample.py	"val = 10
counter_67 = dict()
"
write a program to print sum of all even numbers in a list	"

ls = [1, 2, 3, 4, 5, 6, 7, 8, 10, 22]
sum = 0
for i in ls:
	if i % 2 == 0:
        sum += i
print(sum)
"
Write a function to return the lateral surface area of a cone	"def cal_cone_lateral_surf_area(height, radius):
	pi = 3.14
	return pi * radius * (((height**2) + (radius**2))**(1 / 2))
"
write a python program to convert a dictionary to list of tuples	"dict_new = {'1': 'A', '2': 'B'}
tup = dict_new.items()
print(list(tup))
"
in kg to energy	"def cal_energy_by_mass(mass: float) -> float:
	c = 300000
	return mass * (c**2)
"
write a function to right rotate a given list by given input	"def right_rotate(lst, n):
	n = n % len(lst)
	return lst[-n:] + lst[:-n]
"
write a python program to count the number of lower case in a string	"

string = ""This is a very good place to Visit""
count = 0
for i in string:
	if(i.islower()):
        count = count + 1
print(f""The number of lowercase characters is:{count}"")
"
47 first class function	"def call_func(x, func):
	return fn(x)
"
