Description	Code
Write a python function to remove duplicates from list	"

def remove_duplicates(lista):
	lista2 = []
	if lista:
        for item in lista:
            if item not in lista2:  
                lista2.append(item)
	else:
        return lista
	return lista2


print(""List with duplicates removed:"", remove_duplicates([1, 2, 3, 3]))
"
join using a - hyphen.	"def word_join(s):
	words = s.split(' ')
	return '-'.join(words)


print(word_join(""This is 17B Assignment""))
"
write a function to find out the second maximum number in the given list	"def find_second_maximum(lst):
	max = float('-inf')
	sec_max = float('-inf')

	for elem in list:
        if elem > max:
            sec_max = max
            max = elem
        elif elem > sec_max:
            sec_max = elem
	return sec_max
"
Concatenation of two List	"my_list1 = [4, 3, 2, 9, 10, 44, 1]
my_list2 = [5, 6, 2, 8, 15, 14, 12]
print(f""Sum of two list:,{my_list1+my_list2}"")
"
date of birth	"

def zodiac_sign(day, month):

	if month == 'december':
        astro_sign = 'Sagittarius' if (day < 22) else 'capricorn'

	elif month == 'january':
        astro_sign = 'Capricorn' if (day < 20) else 'aquarius'

	elif month == 'february':
        astro_sign = 'Aquarius' if (day < 19) else 'pisces'

	elif month == 'march':
        astro_sign = 'Pisces' if (day < 21) else 'aries'

	elif month == 'april':
        astro_sign = 'Aries' if (day < 20) else 'taurus'

	elif month == 'may':
        astro_sign = 'Taurus' if (day < 21) else 'gemini'

	elif month == 'june':
        astro_sign = 'Gemini' if (day < 21) else 'cancer'

	elif month == 'july':
        astro_sign = 'Cancer' if (day < 23) else 'leo'

	elif month == 'august':
        astro_sign = 'Leo' if (day < 23) else 'virgo'

	elif month == 'september':
        astro_sign = 'Virgo' if (day < 23) else 'libra'

	elif month == 'october':
        astro_sign = 'Libra' if (day < 23) else 'scorpio'

	elif month == 'november':
        astro_sign = 'scorpio' if (day < 22) else 'sagittarius'

	print(astro_sign)
"
Write a function to return the median of numbers in a list	"def cal_median(num_list: list) -> float:
	if num_list:
        if len(num_list) % 2 != 0:
            return sorted(num_list)[int(len(num_list) / 2) - 1]
        else:
            return (sorted(num_list)[int(len(num_list) / 2) - 1] + sorted(num_list)[int(len(num_list) / 2)]) / 2
	else:
        return None
"
write a python function to return words in a sentence in sorted order	"def get_sorted_words(sentence):
	words = [word for word in sentence.split()]
	words.sort()
	return words
"
36. Python funcction to Find the Factors of a Number	"def print_factors(x):
	print(""The factors of"", x, ""are:"")
	for i in range(1, x + 1):
        if x % i == 0:
            print(i)
"
dictionary	"def invert_dict_non_unique(my_dict):
	my_inverted_dict = dict()
	for key, value in my_dict.items():
        my_inverted_dict.setdefault(value, list()).append(key)
	return my_inverted_dict
"
69 Write a Python function to add two binary numbers.	"def add_binary_nums(x, y):
	max_len = max(len(x), len(y))

	x = x.zfill(max_len)
	y = y.zfill(max_len)

	result = ''
	carry = 0

	for i in range(max_len - 1, -1, -1):
        r = carry
        r += 1 if x[i] == '1' else 0
        r += 1 if y[i] == '1' else 0
        result = ('1' if r % 2 == 1 else '0') + result
        carry = 0 if r < 2 else 1

	if carry != 0:
        result = '1' + result

	return result.zfill(max_len)
"
Occurs in a List	"a = [2, 3, 2, 3, 4, 4, 5, 5, 6, 6, 6]
k = 0
num = 6
for j in a:
	if(j == num):
        k = k + 1
print(""Number of times"", num, ""appears is"", k)
"
write a Python function to return the volume of the rectangular right wedge	"def volumeRec(a, b, e, h):
	return (((b * h) / 6) * (2 * a + e))


a = 2
b = 5
e = 5
h = 6
print(""Volume = "", volumeRec(a, b, e, h))
"
write a python program to create multiplication table of 5	"

n = 5
for i in range(1, 11):
	print(n, 'x', i, '=', n * i)
"
write a python function that would print the ASCII value of a given character	"def print_ascii(char):
	print(ord(char))
"
Write a fucntion to convert Fahrenheit to Celsius	"def Fahrenheit_to_Celsius(f):
	celsius = (f - 32) / 1.8
	return celsius
"
Write a function to merge dictionaries	"def merge1():
	test_list1 = [{""a"": 1, ""b"": 4}, {""c"": 10, ""d"": 15},
                  {""f"": ""gfg""}]
	test_list2 = [{""e"": 6}, {""f"": 3, ""fg"": 10, ""h"": 1},
                  {""i"": 10}]
	print(""The original list 1 is : "" + str(test_list1))
	print(""The original list 2 is : "" + str(test_list2))
	for idx in range(0, len(test_list1)):
        id_keys = list(test_list1[idx].keys())
        for key in test_list2[idx]:

            if key not in id_keys:
                test_list1[idx][key] = test_list2[idx][key]

	print(""The Merged Dictionary list : "" + str(test_list1))
"
based of distance travelled in given time	"def cal_time(distance: float, speed: float) -> float:
	return distance / speed
"
"first ""j"" in the list"	"

def firstOccurence(arr, i, j):
	res = 0
	for k in arr:
        if k == j:
            break
        if k == i:
            res += 1
	return res
"
write a python function to repeat calls to function with specified arguments	"def repeatfunc(func, times=None, *args):
	from itertools import starmap, repeat
	if times is None:
        return starmap(func, repeat(args))
	return starmap(func, repeat(args, times))
"
21 write a function that removes all the punctuations from a string	"

import string


def remove_punct(s):
	return """".join(ch for ch in s if ch not in set(string.punctuation))
"
possible combinations from the digits.	"

a = int(input(""Enter first number:""))
b = int(input(""Enter second number:""))
c = int(input(""Enter third number:""))
d = []
d.append(a)
d.append(b)
d.append(c)
for i in range(0, 3):
	for j in range(0, 3):
        for k in range(0, 3):
            if(i != j & j != k & k != i):
                print(d[i], d[j], d[k])
"
sort the list	"words.sort()
"
14 how to add element at first position in array python	"x = [1, 3, 4]
a = 2
x.insert(1, a)
"
Write a function to return the mean of numbers in a list	"def cal_mean(num_list: list) -> float:
	if num_list:
        return sum(num_list) / len(num_list)
	else:
        return None
"
29 function to convert temperature as per user mention.	"def temp_converter(temp, temp_given_in='F'):
	if temp < 0:
        raise ValueError(""Input Temperature is Negative"")
	else:
        if temp_given_in.upper() == 'F':
            t = (temp - 32) * 5 / 9
            return t
        elif temp_given_in.upper() == 'C':
            t = 9 / 5 * (temp) + 32
            return t
        elif temp_given_in.upper() not in ('C', 'F'):
            raise NotImplementedError(""Invalid Temperature Coneversion"")
"
Define a function which can compute the sum of two numbers.	"def sum_nums(number1, number2):
	return number1 + number2
"
M and radius R	"def cal_mi_sphere(mass: float, radius: float) -> float:
	return (7 / 5) * mass * (radius**2)
"
write a python function to swap first and last element of a list	"
def swapList(newList):
	newList[0], newList[-1] = newList[-1], newList[0]
	return newList


newList = [12, 35, 9, 56, 24]
print(swapList(newList))
"
console (n>0).	"n = int(raw_input())
sum = 0.0
for i in range(1, n + 1):
	sum += float(float(i) / (i + 1))
print(sum)
"
given list	"

mylist = [
	'nowplaying',
	'PBS',
	'PBS',
	'nowplaying',
	'job',
	'debate',
	'thenandnow']


def get_unique_elements(list):
	unique = [x for i, x in enumerate(mylist) if i == mylist.index(x)]
	return unique


get_unique_elements(mylist)
"
26 write a program to check if a string contains any special character	"

def run(string):

	regex = re.compile('[@_!#$%^&*()<>?/\\|}{~:]')

	if(regex.search(string) == None):
        print(""String is accepted"")

	else:
        print(""String is not accepted."")


if __name__ == '__main__':

	
	string = ""Hello@World""

	
	run(string)
"
write a python program that prints the area of a square	"side = 5
print(f'Area: {side * side}')
"
write a python function to calculate nPr	"

def nPr(n, r):

	def fact(n):
        if (n <= 1):
            return 1
        return n * fact(n - 1)

	return int(fact(n)
               / fact(n - r))
"
units.	"

def calc_elect_bill(units):
	if units > 0:
        if units <= 750:
            return 5 * units
        else:
            return 5 * (750) + 7 * (units - 750)
	else:
        return -1
"
range is given	"N = 20
number_list = [x for x in range(N) if x % 2 != 0]
print(f'List of Odd Numbers:', number_list)
"
Calculate the pair-wise product of two lists	"list1 = [1, 2, 3]
list2 = [5, 6, 7]
final = [list1[i] * list2[i] for i in range(len(list1))]
print(f""pair-wise product of two lists:{final}"")
"
write a python program to print positive numbers in a list	"

list1 = [2, 4, -5, 3, 8, -10, -11]


for i in list1:
	if i > 0:
        print(i, end="" "")
"
r and time in years y	"def get_si(p: float, r: float, t: float) -> float:
	return (p * r * t) / 100
"
words and return the longest word	"

import functools


def longestWord(word_list):
	if word_list is None or isinstance(
            word_list,
            list) == False or len(word_list) == 0:
        raise ValueError(
            ""Input word_list to function longestWord must be list of words of size at least 1"")

	if len(word_list) == 1:
        return word_list[0]
	else:
        return functools.reduce(lambda x, y: x if len(x) >= len(y) else y, word_list)
"
Write a Python Program to Print an Identity Matrix	"n = 3
for i in range(0, n):
	for j in range(0, n):
        if(i == j):
            print(""1"", sep="" "", end="" "")
        else:
            print(""0"", sep="" "", end="" "")
"
rows given by the user	"

n = 10
a = []
for i in range(n):
	a.append([])
	a[i].append(1)
	for j in range(1, i):
        a[i].append(a[i - 1][j - 1] + a[i - 1][j])
	if(n != 0):
        a[i].append(1)
for i in range(n):
	print(""	"" * (n - i), end="" "", sep="" "")
	for j in range(0, i + 1):
        print('{0:6}'.format(a[i][j]), end="" "", sep="" "")
	print()
"
30 program to count number of cpu cores available	"os.cpu_count()
"
list elements into sublists and print the output.	"from itertools import groupby


def pack_consecutive_duplicates(l_nums):
	return [list(group) for key, group in groupby(l_nums)]


n_list = [0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]
print(""Original list:"")
print(n_list)
print(""\nAfter packing consecutive duplicates of the said list elements into sublists:"")
print(pack_consecutive_duplicates(n_list))
"
no using closer	"

def fib():
	cache = {1: 1, 2: 1}

	def calc_fib(n):
        if n not in cache:
            print(f'Calculating fib({n})')
            cache[n] = calc_fib(n - 1) + calc_fib(n - 2)
        return cache[n]
	return calc_fib
"
71 write a program to find simple interest	"

p = float(input(""Enter the principle amount : ""))
r = float(input(""Enter the rate of interest : ""))
t = float(input(""Enter the time in the years: ""))
"
Strings List Using sorted() + lambda	"

test_list = ['gfg', 'is', 'best', 'for', 'geeks']


print(""The original list is : "" + str(test_list))


res = sorted(test_list, key=lambda sub: sub[-1])


print(""Sorted List : "" + str(res))
"
write a python program to check is all are digit	"print('0xa'.isdigit())
"
Test if string starts with H	"word = ""Hello World""
check = word.startswith('H')
print(f""String starts with H?:{check}"")
"
write a python program to print the divisors of a integer	"num = int(input(""Please enter a integer ""))
mid = int(num / 2)
print(""The divisiors of "", num, "" are :"")
for a in range(2, mid + 1):
	if num % a == 0:
        print(a, end=' ')
else:
	print()
	print(""-End-"")
"
3. write a python Program to calculate the square root	"num = 8
num_sqrt = num ** 0.5
print('The square root of %0.3f is %0.3f' % (num, num_sqrt))
"
9. Python Program to Convert Celsius To Fahrenheit	"celsius = 37.5
fahrenheit = (celsius * 1.8) + 32
print(
	'%0.1f degree Celsius is equal to %0.1f degree Fahrenheit' %
	(celsius, fahrenheit))
"
Check if there is a value for a key in JSON	"import json


studentJson = """"""{
	""id"": 1,
	""name"": ""Piyush Jain"",
	""class"": null,
	""percentage"": 35,
	""email"": ""piyushjain220@gmail.com""
}""""""
student = json.loads(studentJson)
if not (student.get('email') is None):
	print(""value is present for given JSON key"")
	print(student.get('email'))
else:
	print(""value is not present for given JSON key"")
"
write a python function to convert hours to seconds	"

def convert_to_seconds(num_hours):
	minutes = num_hours * 60
	seconds = minutes * 60
	return seconds
"
18. Python Program to Print the Fibonacci sequence	"

nterms = int(input(""How many terms? ""))
"
in a list	"l = [[5 * i + j for j in range(1, 6)] for i in range(5)]
print(l)
"
Count Tuple Elements Inside List	"random = ['a', ('a', 'b'), ('a', 'b'), [3, 4]]
count = random.count(('a', 'b'))
print(""The count of ('a', 'b') is:"", count)
"
Write a Python function to	"def binary_palindrome(n):
	s = int(bin(n)[2:])
	r = str(s)[::-1]
	if int(r) == s:
        return ""The binary representation of the number is a palindrome.""
	else:
        return ""The binary representation of the number is NOT a palindrome.""
"
write a program to find intersection	"a = {1, 2, 3, 4}
b = {3, 4, 5, 6}


intersection_both = a.intersection(b)
print(""Intersection"", intersection_both)
"
write a python function to return first n items of the iterable as a list	"def take(n, iterable):
	import itertools
	return list(itertools.islice(iterable, n))
"
than a given input.	"test_dict = {'tsai': 4, 'random_key': 2, 'foo': 3, 'bar': 'END'}
K = 3
res = {key: val for key, val in test_dict.items()
       if type(val) != int or val > K}
print(""Values greater than K : "", res.keys())
"
them and then print it in console.	"def printValue(s1, s2):
	print(s1 + s2)
"
237 in the sequence.	"

numbers = [
	386, 462, 47, 418, 907, 344, 236, 375, 823, 566, 597, 978, 328, 615, 953, 345,
	399, 162, 758, 219, 918, 237, 412, 566, 826, 248, 866, 950, 626, 949, 687, 217,
	815, 67, 104, 58, 512, 24, 892, 894, 767, 553, 81, 379, 843, 831, 445, 742, 717,
	958, 743, 527
]


for x in numbers:
	if x == 237:
        print(x)
        break
	elif x % 2 == 0:
        print(x)
"
Dictionaries to List of Lists Using list comprehension	"

test_list = [{'Nikhil': 17, 'Akash': 18, 'Akshat': 20},
             {'Nikhil': 21, 'Akash': 30, 'Akshat': 10},
             {'Nikhil': 31, 'Akash': 12, 'Akshat': 19}]


print(""The original list is : "" + str(test_list))


res = [[key for key in test_list[0].keys()], *[list(idx.values())
                                               for idx in test_list]]


print(""The converted list : "" + str(res))
"
6 python add all values of another list	"a = [1, 2, 3]
b = [4, 5, 6]
a += b
"
math module.	"import random
print(random.random() * 100 - 5)
"
Python code to convert string to list	"def Convert_2(string):
	li = list(string.split(""-""))
	return li


str1 = ""Geeks-for-Geeks""
print(Convert(str1))
"
2 write a python function to split a string at space	"

def string_split_at_space(string):
	return string.split()
"
lambda function	"

def make_incrementor(n):
	return lambda x: x + n


f = make_incrementor(42)
f(0)
print(f(1))
"
Write a program to add an integer and [revious non negative integer	"def f(n):
	if n == 0:
        return 0
	elif n == 1:
        return 1
	else:
        return f(n - 1) + f(n - 2)
"
Counting total Upper Case in a string	"str1 = ""abc4234AFde""
digitCount = 0
for i in range(0, len(str1)):
	char = str1[i]
	if(char.upper()):
        digitCount += 1
print('Number total Upper Case: ', digitCount)
"
write a python function tp print the occurences of i before first j in list	"list1 = [4, 5, 6, 4, 1, 4, 8, 5, 4, 3, 4, 9]
i, j = 4, 8


count = 0
for k in list1:
	if k == i and k != j:
        count = count + 1
	elif k == j:
        break


print(count)
"
Calculate the sum of every pair of numbers from two lists	"list1 = [1, 2, 3]
list2 = [5, 6, 7]
final = [a + b for a in list1 for b in list2]
print(f""sum of every pair of numbers from two lists:{final}"")
"
Python program to check for palindrom	"def isPalindrome(string):
	left_pos = 0
	right_pos = len(string) - 1

	while right_pos >= left_pos:
        if not string[left_pos] == string[right_pos]:
            return False
        left_pos += 1
        right_pos -= 1
	return True


print(isPalindrome('aza'))
"
Write a Python program to count and display the vowels of a given text.	"def vowel(text):
	vowels = ""aeiuoAEIOU""
	main_list = [letter for letter in text if letter in vowels]
	return len(main_list), main_list
"
tuples. Print the final list.	"
test_list = [(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)]
K = 1
res = [ele for ele in test_list if len(ele) != K]

print(""Filtered list : "" + str(res))
"
Write a function to implement stooge sort	"def stoogesort(arr, l, h):
	if l >= h:
        return
	if arr[l] > arr[h]:
        t = arr[l]
        arr[l] = arr[h]
        arr[h] = t
	if h - l + 1 > 2:
        t = (int)((h - l + 1) / 3)
        stoogesort(arr, l, (h - t))
        stoogesort(arr, l + t, (h))
        stoogesort(arr, l, (h - t))


arr = [2, 4, 5, 3, 1]
n = len(arr)
stoogesort(arr, 0, n - 1)
for i in range(0, n):
	print(arr[i], end='')
"
in a input expression is valid, False otherwise	"

def isValid(s):
	stack = []
	mapping = {')': '(', '}': '{', ']': '['}
	for char in s:
        if char in mapping:
            if not stack:
                return False
            top = stack.pop()
            if mapping[char] != top:
                return False
        else:
            stack.append(char)

	return not stack
"
Write a Python Program to Swap the First and Last Value of a List	"

a = [2, 3, 8, 9, 2, 4, 6]
n = len(a)
temp = a[0]
a[0] = a[n - 1]
a[n - 1] = temp
print(""New list is:"")
print(a)
"
containing the squares of the elements of the input list	"def square_list_elements(list_to_be_squared):
	return list(map(lambda x: x**2, list_to_be_squared))
"
Write a function to return the area of a equilateral triangle	"def cal_eq_triangle_area(a: float) -> float:
	if a:
        return (3**(1 / 2)) * (a**2) / 4
	else:
        return None
"
tuple	"def convert(list):
	return tuple(list)
"
monte carlo method	"

import random


def pi_monte_carlo(n=1000000):
	count = 0
	for _ in range(n):
        x = random.random()
        y = random.random()
        if x ** 2 + y ** 2 <= 1:
            count += 1
	return 4 * count / n


print(pi_monte_carlo())
"
numbers is even	"def is_prod_even(num1, num2):
	sum = num1 + num2
	return not sum % 2
"
or 5 below 500.	"n = 0
for i in range(1, 500):
	if not i % 5 or not i % 3:
        n = n + i
print(n)
"
keep only positive values in the list	"original_prices = [1.25, -9.45, 10.22, 3.78, -5.92, 1.16]
prices = [i if i > 0 else 0 for i in original_prices]
print(f""{prices}"")
"
write a python function to transpose a user provided two dimensional list	"

def transpose(lst):
	return list(zip(*lst))
"
concatenation and return concatenated number as integer	"def concat_two_numbers(num1, num2):
	combined_num = str(num1) + str(num2)
	return int(combined_num)
"
Please write a program to shuffle and print the list [3,6,7,8].	"from random import shuffle
li = [3, 6, 7, 8]
shuffle(li)
print(li)
"
write a program to remove duplicate elements in a list and print the list	"

test_list = [1, 3, 5, 6, 3, 5, 6, 1]
print(""The original list is : "" + str(test_list))

res = []
for i in test_list:
	if i not in res:
        res.append(i)

print(""The list after removing duplicates : "" + str(res))
"
write a python program that sorts and prints a comma separated list of values	"values = 'one,two,three,four,five'
items = values.split(',')
items.sort()
print(','.join(items))
"
write a python function that returns the square of a given input number	"def square(x):
	return x**2
"
Generate a Python list of all the even numbers between two given numbers	"num1 = 4
num2 = 30
myval = [i for i in range(num1, num2, 2)]
print(myval)
"
write a function that return space count	"
def count_space(str1):

	count = 0

	for i in range(0, len(str1)):

        if str1[i] == "" "":
            count += 1

	return count
"
Write a function to count the number of digits in a number	"def count_digits(n):
	return len(str(n))
"
63 write a program to check if the given number is a disarium number	"

def calculateLength(n):
	length = 0
	while(n != 0):
        length = length + 1
        n = n // 10
	return length


num = 175
rem = sum = 0
len = calculateLength(num)

n = num

while(num > 0):
	rem = num % 10
	sum = sum + int(rem**len)
	num = num // 10
	len = len - 1

if(sum == n):
	print(str(n) + "" is a disarium number"")
else:
	print(str(n) + "" is not a disarium number"")
"
list but don’t add duplicates	"speed = {'jan': 47, 'feb': 52, 'march': 47, 'April': 44, 'May': 52, 'June': 53,
         'july': 54, 'Aug': 44, 'Sept': 54}


speedList = []
for item in speed.values():
	if item not in speedList:
        speedList.append(item)
print(""unique list"", speedList)
"
81 write a program to create N copies of a given string	"

str1 = ""Hello""
n = 3


str2 = str1 * 3


print(""str1: "", str1)
print(""str2: "", str2)
"
the result	"d = {'A': 100, 'B': 540, 'C': 239}
print(""Total sum of values in the dictionary:"")
print(sum(d.values()))
"
second largest elements in the passed list.	"def max2(x):
	if x[0] > x[1]:
        m1, m2 = (x[0], x[1])
	else:
        m1, m2 = (x[1], x[0])

	for i in range(2, len(x)):
        if x[i] > m1:
            m2 = m1
            m1 = x[i]
        elif x[i] > m2:
            m2 = x[i]
	return m1, m2
"
33. Python Program to Find LCM	"def compute_lcm(x, y):

	
	if x > y:
        greater = x
	else:
        greater = y

	while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1

	return lcm


num1 = 54
num2 = 24


print(""The L.C.M. is"", compute_lcm(num1, num2))
"
write a python program to multiply two matrices	"

X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]
Y = [[5, 8, 1, 2],
     [6, 7, 3, 0],
     [4, 5, 9, 1]]
result = [[0, 0, 0, 0],
          [0, 0, 0, 0],
          [0, 0, 0, 0]]
for i in range(len(X)):
	for j in range(len(Y[0])):
        for k in range(len(Y)):
            result[i][j] += X[i][k] * Y[k][j]
for r in result:
	print(r)
"
27 write a program to check if a string is binary or not	"

def check(string):
	p = set(string)
	s = {'0', '1'}
	if s == p or p == {'0'} or p == {'1'}:
        print(""Yes"")
	else:
        print(""No"")


if __name__ == ""__main__"":

	string = ""101010000111""
	check(string)
"
use built-in function filter to filter empty value	"new_str_list = list(filter(None, str_list))


print(""After removing empty strings"")
print(new_str_list)
"
"world!hello world!hello world!""."	"import zlib
s = 'hello world!hello world!hello world!hello world!'
t = zlib.compress(s)
print(t)
print(zlib.decompress(t))
"
rate r and time in years y	"def get_ci(p: float, r: float, t: float, n: float) -> float:
	return round(p * ((1 + (r / (n * 100)))**(n * t)) - p, 2)
"
and randomly give an output.	"def dice():
	import random
	min = 1
	max = 6
	roll_again = 'y'

	while roll_again == ""yes"" or roll_again == ""y"":
        print(""Rolling the dice..."")
        print(random.randint(min, max))
        roll_again = input(""Roll the dices again?"")
"
write a Python Recursive function to solve the tower of hanoi	"
def TowerOfHanoi(n, source, destination, auxiliary):
	if n == 1:
        print(""Move disk 1 from source"", source, ""to destination"", destination)
        return
	TowerOfHanoi(n - 1, source, auxiliary, destination)
	print(""Move disk"", n, ""from source"", source, ""to destination"", destination)
	TowerOfHanoi(n - 1, auxiliary, destination, source)


n = 4
TowerOfHanoi(n, 'A', 'B', 'C')
"
Write a Python function to print the GSD of Two Numbers	"

def gcd(a, b):
	if(b == 0):
        return a
	else:
        return gcd(b, a % b)
"
Write a Python program to get the copyright information using sys module	"import sys
print(""\nPython Copyright Information"")
print(sys.copyright)
print()
"
of numbers between 1 and 20 (both included).	"squaredNumbers = map(lambda x: x**2, range(1, 21))
print(squaredNumbers)
"
write a python function to find the resolution on the user provided image	"

def jpeg_res(filename):
	with open(filename, 'rb') as img_file:
        img_file.seek(163)
        a = img_file.read(2)
        height = (a[0] << 8) + a[1]
        a = img_file.read(2)
        width = (a[0] << 8) + a[1]
	print(f""The resolution of the image is {width}x{height}"")
"
is even and second list item is odd.	"def add_two_lists_even_odd(l1, l2):
	new = []
	for x, y in zip(l1, l2):
        if l1 % 2 == 0 and l2 % 2 != 0:
            new.append(x + y)
	return new
"
Write a Python program to validate an Email	"import re
regex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'


def check(email):
	if(re.search(regex, email)):
        print(""Valid Email"")
	else:
        print(""Invalid Email"")


email = ""ishwarraja@gmail.com""
check(email)
"
write a python program to index every 4th character from the below string	"code = 'varCjjlopaxntrrgnbXrOPraiiItUuUuzaQlliyaxx*t#rgiffFoce&ntPls87C!'
code[3::4]
"
print the last 5 elements in the list.	"def printList():
	li = list()
	for i in range(1, 21):
        li.append(i**2)
	print(li[-5:])
"
Write a Python program to convert Year/Month/Day to Day of Year.	"import datetime
today = datetime.datetime.now()
day_of_year = (today - datetime.datetime(today.year, 1, 1)).days + 1
print(day_of_year)
"
write a python program for basic HTML parser	"from html.parser import HTMLParser


class MyHTMLParser(HTMLParser):
	def handle_starttag(self, tag, attrs):
        print(tag)
        for attr in attrs:
            print(""->"", attr[0], "">"", attr[1])


parser = MyHTMLParser()


for i in range(int(input())):
	parser.feed(input())
"
46 write a program to check if the year is a leap year	"

year = int(input(""Enter a year: ""))
if (year % 4) == 0:
	if (year % 100) == 0:
        if (year % 400) == 0:
            print(""{0} is a leap year"".format(year))
        else:
            print(""{0} is not a leap year"".format(year))
	else:
        print(""{0} is a leap year"".format(year))
else:
	print(""{0} is not a leap year"".format(year))
"
number 2 to the power 20.	"def digits_sum():
	n = 2**20
	ans = sum(int(c) for c in str(n))
	return str(ans)
"
write a function to check weather a number is prime or not	"

def isprime(num):
	for i in range(2, num):
        if num % i == 0:
            return False
	return True
"
Write a function to return the area of a equilateral triangle	"def cal_eq_triangle_area(a: float) -> float:
	if a:
        return (3**(1 / 2)) * (a**2) / 4
	else:
        return None
"
Pick a random character from a given String	"import random


name = 'pynative'
char = random.choice(name)
print(""random char is "", char)
"
integers	"

s = input()
l = len(s)


i = 0
while i < l:
	num = ''
	symbol = s[i]
	while symbol.isdigit():
        num += symbol
        i += 1
        if i < l:
            symbol = s[i]
        else:
            break
	if num != '':
        print(num)
	i += 1
"
write a python function to find leftmost value greater than x	"def find_gt(a, x):
	from bisect import bisect_right
	i = bisect_right(a, x)
	if i != len(a):
        return a[i]
	raise ValueError
"
Writing JSON to a file	"import json
person_dict = {""name"": ""Bob"",
               ""languages"": [""English"", ""Fench""],
               ""married"": True,
               ""age"": 32
               }
with open('person.txt', 'w') as json_file:
	json.dump(person_dict, json_file)
"
Sort the list in ascending order	"my_list = [4, 3, 2, 9, 10, 44, 1]
my_list.sort()
print(f""Ascending Order list:,{my_list}"")
"
Output : paizwlc	"def mirror_character(word: str, value: int):
	import string
	letters = string.ascii_lowercase
	rev_letter = letters[::-1]
	dict_char = dict(zip(letters, rev_letter))
	final_1 = word[0:value]
	final_2 = []
	for i in range(value, len(word)):
        final_2.append(dict_char[word[i]])
	print(final_1 + ''.join(final_2))
"
in an class	"class GqLt:
	def __init__(self, msg=""Demo of lt and eq in class""):
        self.msg = msg

	def __eq__(self, other):
        
        if isinstance(other, GqLt):
            return ""Code to be written here to match equality check between two object of same class""
        else:
            raise ValueError('Invalid comparison')

	def __lt__(self, other):
        
        if isinstance(other, GqLt):
            return ""Code to be written here to match equality check between two object of same class""
        else:
            raise ValueError('Invalid comparison')
"
number, merge all overlapping intervals.	"org_intervals = [[1, 3], [2, 6], [5, 10], [11, 16], [15, 18], [19, 22]]
i = 0
while i < len(org_intervals) - 1:
	if org_intervals[i + 1][0] < org_intervals[i][1]:
        org_intervals[i][1] = org_intervals[i + 1][1]
        del org_intervals[i + 1]
        i = i - 1
	i = i + 1
print(org_intervals)
"
Write a python function to derive slope given 2 points (x1,y1) and (x2, y2)	"def get_slope(x1, y1, x2, y2):
	if (x1 == x2):
        return ValueError
	return -((y2 - y1) / (x2 - x1))
"
from [ _ or @ or $ ].	"

import re
password = ""R@m@_f0rtu9e$""
flag = 0
while True:
	if (len(password) < 8):
        flag = -1
        break
	elif not re.search(""[a-z]"", password):
        flag = -1
        break
	elif not re.search(""[A-Z]"", password):
        flag = -1
        break
	elif not re.search(""[0-9]"", password):
        flag = -1
        break
	elif not re.search(""[_@$]"", password):
        flag = -1
        break
	elif re.search(""\\s"", password):
        flag = -1
        break
	else:
        flag = 0
        print(""Valid Password"")
        break

if flag == -1:
	print(""Not a Valid Password"")
"
29 print current day in python	"today = date.today()
print(""Today's date:"", today)
"
28. Python Program to Find ASCII Value of Character	"c = 'p'
print(""The ASCII value of '"" + c + ""' is"", ord(c))
"
write a python function that takes input radius and return area of circle	"def findArea(r):
	PI = 3.142
	return PI * (r * r)
"
print it	"

test_tup1 = (10, 4, 5, 6)
test_tup2 = (5, 10)

print(""The original tuple 1 : "" + str(test_tup1))
print(""The original tuple 2 : "" + str(test_tup2))

res = set(test_tup2).issubset(test_tup1)
print(""Is 2nd tuple subset of 1st ? : "" + str(res))
"
write a python program to check is an title	"print('HelloWorld'.istitle())
"
7 add a value to the start of a list python	"var = 7
array = [1, 2, 3, 4, 5, 6]
array.insert(0, var)
"
Write a python program to print positive Numbers in a List	"
list1 = [11, -21, 0, 45, 66, -93]

for num in list1:

	if num >= 0:
        print(num, end="" "")
"
dictionary values	"

test_dict = {'gfg': [5, 6, 7, 8],
             'is': [10, 11, 7, 5],
             'best': [6, 12, 10, 8],
             'for': [1, 2, 5]}


print(f""The original dictionary is : {test_dict}"")


res = sorted({ele for val in test_dict.values() for ele in val})


print(f""The unique values list is : {res}"")
"
only and print it	"

list = ['sadgas1', 'sasg.as3$', 'hsd', '^atg', 'gaf']
result = [item for item in list if item.isalpha()]
print(result)
"
in dictionary and print it	"

test_dict = {5: 3, 1: 3, 10: 4, 7: 3, 8: 1, 9: 5}
res = sum(list(test_dict.keys())) < sum(list(test_dict.values()))

print(""The required result : "" + str(res))
"
print it	"

test_dict1 = {'gfg': 1, 'is': 2, 'best': 3}
test_dict2 = {'gfg': 1, 'is': 2, 'good': 3}

print(""The original dictionary 1 is : "" + str(test_dict1))
print(""The original dictionary 2 is : "" + str(test_dict2))


count = 0
for key1, value1 in test_dict1.items():
	for key2, value2 in test_dict2.items():
        if key1 == key2 and value1 == value2:
            count = count + 1
print(count)
"
46. Python Program to Remove Punctuations From a String	"

punctuations = '''!()-[]{};:'""\\,<>./?@#$%^&*_~'''


my_str = ""Hello!!!, he said ---and went.""
no_punct = """"
for char in my_str:
	if char not in punctuations:
        no_punct = no_punct + char
print(no_punct)
"
numbers is even	"def is_prod_even(num1, num2):
	prod = num1 * num2
	return not prod % 2
"
43 write a program to convert kilometers to miles	"

kilometers = float(input('How many kilometers?: '))
conv_fac = 0.621371
miles = kilometers * conv_fac
print('%0.3f kilometers is equal to %0.3f miles' % (kilometers, miles))
"
a List where Words can Repeat	"

a = ['the', 'tsai', 'python', 'a', 'the', 'a']
c = []
count = 0
b = 'a'
n = 3
for i in a:
	if(i == b):
        count = count + 1
        if(count != n):
            c.append(i)
	else:
        c.append(i)
if(count == 0):
	print(""Item not found "")
else:
	print(""The number of repetitions is: "", count)
	print(""Updated list is: "", c)
	print(""The distinct elements are: "", set(a))
"
iterate through rows	"for i in range(len(X)):
	
	for j in range(len(X[0])):
        result[i][j] = X[i][j] + Y[i][j]


for r in result:
	print(r)
"
write a python program to merge two sorted lists	"a = [3, 4, 6, 10, 11, 18]
b = [1, 5, 7, 12, 13, 19, 21]


a.extend(b)
c = sorted(a)
print(f""{c}"")
"
given data or not	"def check_sha256_hash(hashed, data):
	import hashlib
	return True if hashed == hashlib.sha256(data.encode()).hexdigest() else False
"
Write a program to print all the even numbers in a range	"

r1, r2 = 1, 28


for _ in range(r1, r2 + 1):
	if _ % 2 == 0:
        print(_)
"
write a program for Reversing a sublist	"a = [[2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20]]
a[2].reverse()
print(a)
"
Write a python function that Counts the Number of Blank Spaces in a Text File	"def count_blank_space():
	fname = input(""file name:"")
	count = 0
	with open(fname, 'r') as f:
        for line in f:
            count += line.count(' ')
	return count
"
upto n, where n is an argument	"def recursive_sum(n):
	if n <= 1:
        return n
	else:
        return n + recursive_sum(n - 1)
"
Write a Python Program to Multiply All the Items in a Dictionary	"

def mul_dict(d):
	tot = 1
	for i in d:
        tot = tot * d[i]
	return tot
"
element from both lists in the pair	"firstList = [2, 3, 4, 5, 6, 7, 8]
secondList = [4, 9, 16, 25, 36, 49, 64]
result = zip(firstList, secondList)
resultSet = set(result)
print(resultSet)
"
for a radius	"

class CircleArea():
	def __init__(self, radius):
        self.radius = radius

	def area(self):
        return 3.14 * self.radius * self.radius


a = 6
obj = CircleArea(a)
print(""Area of rectangle:"", obj.area())
"
3. python function to return the squareroot of a list of numbers	"def sqrt(n):
	return [i**0.5 for i in range(n)]
"
length 10	"

list1 = [5] * 10


print(list1)
"
single integer	"L = [11, 33, 50]
x = int("""".join(map(str, L)))
print(""Single Integer: "", x)
"
write a python function to get the minimum number in passed list	"

def min_check(x):
	min_val = x[0]
	for check in x:
        if check < min_val:
            min_val = check
	return min_val


print(f'{min_check([2,4,5,7,98])}')
"
largest among sum and other two inputs	"def find_the_largest(num1, num2):
	sum_ = num1 + num2
	if num1 >= sum_ and num1 >= num2:
        return num1
	elif num2 >= sum_ and num2 >= num1:
        return num2
	else:
        return sum_
"
Write a function that returns sum of all odd elements in the list	"def sum_even_elements(l: list):
	return sum([i for i in l if i % 2 == 0])
"
Write a python function to multiply all values in a list	"
def multiplyList(myList):
	result = 1
	for x in myList:
        result = result * x
	return result
"
write a python function to generate SHA256 for given text	"def get_sha256(text):
	import hashlib
	return hashlib.sha256(text).hexdigest()
"
Write a python function to convert hours to either mins or seconds	"

def convert_to_minutes(num_hours):
	
	minutes = num_hours * 60
	return minutes


def convert_to_seconds(num_hours):
	
	minutes = convert_to_minutes(num_hours)
	seconds = minutes * 60
	return seconds


min = convert_to_minutes(1)
print(min)


seconds = convert_to_seconds(1)
print(seconds)
"
81 generate intereger random number between user choice	"def gen_ran_int_number(lower, upper):
	import random
	final = [random.randint(lower, upper) for _ in range(10)]
	return final
"
write a python function to calculate the area of tetraheadron	"

def area_of_tetrahedron(side):
	return (1.73205
            * (side * side));
"
Write a function to convert time from 12 hour to 24 hour format	"def convert24(str1):
	if str1[-2:] == ""AM"" and str1[:2] == ""12"":
        return ""00"" + str1[2:-2]
	elif str1[-2:] == ""AM"":
        return str1[:-2]

	elif str1[-2:] == ""PM"" and str1[:2] == ""12"":
        return str1[:-2]
	else:
        return str(int(str1[:2]) + 12) + str1[2:8]


print(convert24(""08:05:45 PM""))
"
write a python program to print reverse list	"

print(f'reverse the given list elements: {list1[::-1]}')
"
element of tuple  using sort() + lambda	"test_list = [(4, 5, 1), (6, 1, 5), (7, 4, 2), (6, 2, 4)]
print(""The original list is : "" + str(test_list))
N = 1
test_list.sort(key=lambda x: x[N])
print(""List after sorting tuple by Nth index sort : "" + str(test_list))
"
Write a function to calculate Volume of Pentagonal Pyramid	"def volumePentagonal(a, b, h):
	return (0.83) * a * b * h
"
transactions	"txns = [1.09, 23.56, 57.84, 4.56, 6.78]
TAX_RATE = .08


def get_price_with_tax(txn):
	return txn * (1 + TAX_RATE)


final_prices = list(map(get_price_with_tax, txns))
print(f""{final_prices}"")
"
equal to the given number using a while loop	"input_num = 27
while input_num:
	print(input_num)
	input_num -= 1
"
write a python program to print the ASCII value of a character	"character = 'x'
print(f'The ASCII value of {character} is {ord(character)}')
"
and print it	"

l1 = [1, 2, 3, 4]
l2 = [5, 8, 7, 0]


res = []
for i in range(len(l1)):
	res.append(l1[i] - l2[i])


print(res)
"
write a Python function to Find the Intersection of Two Lists	"def intersection(a, b):
	return list(set(a) & set(b))
"
Write a function to merge two lists element wise	"def merge_lists(l1: list, l2: list):
	return list(zip(l1, l2))
"
list for the below list	"

def counting_sort(alist, largest):
	c = [0] * (largest + 1)
	for i in range(len(alist)):
        c[alist[i]] = c[alist[i]] + 1

	c[0] = c[0] - 1
	for i in range(1, largest + 1):
        c[i] = c[i] + c[i - 1]

	result = [None] * len(alist)

	for x in reversed(alist):
        result[c[x]] = x
        c[x] = c[x] - 1

	return result


alist = [2, 3, 5, 6, 4, 5]
k = max(alist)
sorted_list = counting_sort(alist, k)
print('Sorted list: ', end='')
print(sorted_list)
"
write a program to transpose a matrix	"M = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]


if not isinstance(M[0], list):
	M = [M]


rows = len(M)
cols = len(M[0])


MT = []
while len(MT) < dim:
	MT.append([])
	while len(MT[-1]) < dim:
        MT[-1].append(0.0)


for i in range(rows):
	for j in range(cols):
        MT[j][i] = M[i][j]


print(""Transpose Array"")
for i in range(rows):
	row = '|'
	for b in range(cols):
        row = row + ' ' + str(MT[i][b])
	print(row + ' ' + '|')
"
iterate through rows of X	"for i in range(len(X)):
	
	for j in range(len(Y[0])):
        
        for k in range(len(Y)):
            result[i][j] += X[i][k] * Y[k][j]
print(f""Final Result is{result}"")
"
first number by second number and return the quotient and remainder	"def divide_first_number_by_second(num1, num2):
	return (num1 // num2), (num1 % num2)
"
Remove the last element from the stack	"s = [1, 2, 3, 4]
print(f""last element from the stack:{s.pop()}"")
"
48 write a python program to merge a list of dictionaires	"result = {}
for d in L:
	result.update(d)
"
Write a function to adds two lists element wise	"def adds_listelements(l1: list, l2: list):
	return [i + j for i, j in zip(l1, l2)]
"
Write a Python function to remove falsy values from a list	"def newlist(lst):
	return list(filter(None, lst))
"
write a python program to print the Area of a Triangle Given All Three Sides	"a = 15
b = 9
c = 7
s = (a + b + c) / 2
area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
print(""Area of the triangle is: "", round(area, 2))
"
Write a function to reverse a string	"

def revStr(inp):
	inp = inp[::-1]
	return inp
"
write a program to create zero matrix	"rows = 2
cols = 3
M = []
while len(M) < rows:
	M.append([])
	while len(M[-1]) < cols:
        M[-1].append(0.0)


print(""Zero Matrix"")
for i in range(rows):
	row = '|'
	for b in range(cols):
        row = row + ' ' + str(M[i][b])
	print(row + ' ' + '|')
"
of tuples and print it	"
test_list = [(4, 5, 9), (-3, 2, 3), (-3, 5, 6), (4, 6)]
print(""The original list is : "" + str(test_list))

result = [i for i in test_list if all(ele >= 0 for ele in i)]
print(""Positive elements Tuples : "" + str(result))
"
order they are paid for	"

def is_first_come_first_served(take_out_orders, dine_in_orders, served_orders):
	if len(served_orders) == 0:
        return True

	if len(take_out_orders) and take_out_orders[0] == served_orders[0]:
        return is_first_come_first_served(
            take_out_orders[1:],
            dine_in_orders, served_orders[1:])

	elif len(dine_in_orders) and dine_in_orders[0] == served_orders[0]:
        return is_first_come_first_served(
            take_out_orders, dine_in_orders[1:],
            served_orders[1:])

	else:
        return False
"
Write a python program to find and print if a number given is disarium or not	"

num = 135
num_len = len(str(num))
n = num
sum = 0
exp = num_len
while n != 0:
	i = int(n % 10)
	n = int(n / 10)
	sum += i ** exp
	exp -= 1
if sum == num:
	print(""disarium"")
else:
	print(""not disarium"")
"
17. python function to modify a tuple	"def modify_tuple(t):
	print(f'Initial t mem-add = {id(t)}')
	t[0].append(100)
	print(f'Final t mem-add = {id(t)}')
"
-*- coding: utf-8 -*-	"
"
Write a python program to accept a number n and calculate n+nn+nn	"

n = int(input(""Enter a number n: ""))
temp = str(n)
t1 = temp + temp
t2 = temp + temp + temp
comp = n + int(t1) + int(t2)
print(""The value is:"", comp)
"
tuples to the list of dictionary	"def addentry(listname, addlist):
	for names, ages in addlist:
        listname.append(addlist)
	return listname


addentry([{'1': ""A""}], [(""2"", ""B"")])
"
Write a function pow(x, n), which calculates x raised to the power n	"

def myPow(x, n):
	def pow(y, n):
        if n == 0:
            return 1.0
        else:
            partial = pow(x, n // 2)
            result = partial * partial
            if n % 2 == 1:
                result *= x
            return result

	if n >= 0:
        return pow(x, n)
	else:
        return 1 / pow(x, -n)
"
based of distance travelled in given time	"def cal_time(distance: float, speed: float) -> float:
	return distance / speed
"
write a python function to calculate simple interest	"
def simple_interest(p, t, r):
	si = (p * t * r) / 100
	return si

 


def compound_interest(principle, rate, time):
	Amount = principle * (pow((1 + rate / 100), time))
	CI = Amount - principle
	print(""Compound interest is"", CI)
"
Write a python function to Count the Number of Lines in a Text File	"def check_lines():
	fname = input(""file name: "")
	num_lines = 0
	with open(fname, 'r') as f:
        for line in f:
            num_lines += 1
	print(""Number of lines = "", num_lines)
"
write a python function to get HTML code for a given URL	"def get_html(url=""http://www.python.org""):
	import urllib.request

	fp = urllib.request.urlopen(url)
	mybytes = fp.read()
	mystr = mybytes.decode(""utf8"")
	fp.close()
	print(mystr)
"
occurrence of an input from the list	"list1 = [5, 20, 15, 20, 25, 50, 20]


def removeValue(sampleList, val):
	return [value for value in sampleList if value != val]


resList = removeValue(list1, 20)
print(resList)
"
Insert a number at the beginning of the queue	"q = [1, 2, 3, 4]
q.insert(0, 5)
print(f""Revised List:{q}"")
"
69 write a python program for printing custom order dictionary	"test_dict = {'is': 2, 'for': 4, 'gfg': 1, 'best': 3, 'geeks': 5}
ord_list = ['gfg', 'is', 'best', 'for', 'geeks']

c = {}
for i in ord_list:
	if i in test_dict:
        c.update({i: test_dict[i]})
print(c)
"
to be searched in the list.	"import math


def bin_search(li, element):
	bottom = 0
	top = len(li) - 1
	index = -1
	while top >= bottom and index == -1:
        mid = int(math.floor((top + bottom) / 2.0))
        if li[mid] == element:
            index = mid
        elif li[mid] > element:
            top = mid - 1
        else:
            bottom = mid + 1


return index


li = [2, 5, 7, 9, 11, 17, 222]
print(bin_search(li, 11))
print(bin_search(li, 12))
"
except common items	"set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
set1.symmetric_difference_update(set2)
print(set1)
"
write a python program to split a string based on space	"strin = ""Hello how are you ?""
res = strin.split()
print(f""{res}"")
"
dictionary	"def invert_dict_non_unique(my_dict):
	my_inverted_dict = dict()
	for key, value in my_dict.items():
        my_inverted_dict.setdefault(value, list()).append(key)
	return my_inverted_dict
"
person	"def bmi_calculator(height, weight):
	bmi = weight / (height**2)
	return bmi
"
and print it	"string = 'The quick brown fox jumps over the lazy dog'
print(string.title())
"
a new list	"list1 = [1, 2, 3, 4, 5]
list2 = [5, 4, 3, 2, 1]
sum_list = [a + b for (a, b) in zip(list1, list2)]
print(sum_list)
"
the string, ignoring all other characters	"import re


inputStr = ""English = 78 Science = 83 Math = 68 History = 65""
markList = [int(num) for num in re.findall(r'\b\d+\b', inputStr)]
totalMarks = 0
for mark in markList:
	totalMarks += mark


percentage = totalMarks / len(markList)
print(""Total Marks is:"", totalMarks, ""Percentage is "", percentage)
"
write a python function to count the occurrences of a value in a list.	"

def count_occurrences(lst, val):
	return lst.count(val)
"
write a python function to Count the Number of Digits in a Number	"def count_digits():
	n = int(input(""Enter number:""))
	count = 0
	while n > 0:
        count = count + 1
        n = n // 10
	return count
"
a Given List	"a = [11, 22, 33, 44, 55, 66, 77, 88, 99]
avg = sum(a) / len(a)
print(""Average of elements in the list"", round(avg, 2))
"
write a python function to Find Hash of File	"

def hash_file(filename):

	h = hashlib.sha1()
	with open(filename, 'rb') as file:
        chunk = 0
        while chunk != b'':
            chunk = file.read(1024)
            h.update(chunk)
	return h.hexdigest()
"
44 universal function	"def universal_func(*args, **kwargs):
	print(args)
	print(**kwargs)
"
equation ax**2 + bx + c = 0	"def prod_of_roots(a: float, b: float):
	if a:
        return -b / a
	else:
        return None
"
Write a program to copy a given array	"M = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
rows = len(M)
cols = len(M[0])


MC = []
while len(MC) < rows:
	MC.append([])
	while len(MC[-1]) < cols:
        MC[-1].append(0.0)


for i in range(rows):
	for j in range(cols):
        MC[i][j] = M[i][j]


print(""Copied Array"")
for i in range(rows):
	row = '|'
	for b in range(cols):
        row = row + ' ' + str(MC[i][b])
	print(row + ' ' + '|')
"
Write a Python Program to Add Two Matrices and print result.	"X = [[1, 2, 3],
     [4, 5, 6],
     [7, 8, 9]]


Y = [[10, 11, 12],
     [13, 14, 15],
     [16, 17, 18]]


result = [[0, 0, 0],
          [0, 0, 0],
          [0, 0, 0]]


for i in range(len(X)):
	for j in range(len(X[0])):
        result[i][j] = X[i][j] + Y[i][j]
for r in result:
	print(r)
"
order	"def sort_descending(list_to_be_sorted):
	return sorted(list_to_be_sorted, reverse=True)
"
50 write a python function to find the median on an array of numbers	"def median(arr):

	if len(arr) == 1:
        return arr[0]

	else:
        arr = sorted(arr)
        a = arr[0:round(len(arr) / 2)]
        b = arr[len(a):len(arr)]
        if len(arr) % 2 == 0:
            return (a[len(a) - 1] + b[0]) / 2
        else:
            return a[len(a) - 1]
"
Write a Python function to count number of lists in a list of lists	"def countList(lst):
	count = 0
	for el in lst:
        if type(el) == type([]):
            count += 1
	return count
"
heads and tails	"import random
heads = 0
tails = 0
for i in range(100):
	if(random.choice([True, False])):
        heads += 1
	else:
        tails += 1
print(f'{heads} heads, {tails} tails')
"
them alphabetically.	"items = [x for x in input().split(',')]
items.sort()
print(','.join(items))
"
Write a function that returns a replace values in string with values provided	"def replace_values(s: str, old, new) -> str:
	s.replace(old, new)
"
consecutive natural numbers	"def getMissingNo(A):
	n = len(A)
	total = (n + 1) * (n + 2) / 2
	sum_of_A = sum(A)
	return total - sum_of_A
"
From given string replace each punctuation with #	"from string import punctuation


str1 = '/*Jon is @developer & musician!!'
replace_char = '#'
for char in punctuation:
	str1 = str1.replace(char, replace_char)


print(""The strings after replacement : "", str1)
"
write a python function to convert given variable to said datatype	"

def type_conversion(typ, a):
	if(typ) == 'int':
        return(int(a))
	elif(typ) == 'float':
        return(float(a))
	else:
        return(str(a))


type_conversion('str', 1)
"
date is in string	"ini_list = [{'name': 'akash', 'd.o.b': '1997-03-02'},
            {'name': 'manjeet', 'd.o.b': '1997-01-04'},
            {'name': 'nikhil', 'd.o.b': '1997-09-13'}]


print(""initial list : "", str(ini_list))


ini_list.sort(key=lambda x: x['d.o.b'])


print(""result"", str(ini_list))
"
take input from the user	"print(""Select operation."")
print(""1.Add"")
print(""2.Subtract"")
print(""3.Multiply"")
print(""4.Divide"")

choice = input(""Enter choice(1/2/3/4):"")

num1 = int(input(""Enter first number: ""))
num2 = int(input(""Enter second number: ""))

if choice == '1':
	print(num1, ""+"", num2, ""="", add(num1, num2))

elif choice == '2':
	print(num1, ""-"", num2, ""="", subtract(num1, num2))

elif choice == '3':
	print(num1, ""*"", num2, ""="", multiply(num1, num2))
elif choice == '4':
	print(num1, ""/"", num2, ""="", divide(num1, num2))
else:
	print(""Invalid input"")
"
write a python function to return the number of lines in a file	"def count_lines(filename):
	with open(filename, 'r') as f:
        contents = f.read().split('\n')
        return len(contents)
"
write a python function to find the nth catalan number	"

def catalan(n):
	if n <= 1:
        return 1
	res = 0
	for i in range(n):
        res += catalan(i) * catalan(n - i - 1)
	return res
"
divisible by 5 and 7 , between 1 and 1000 inclusive.	"import random


print(
	random.sample(
        [i for i in range(1, 1001) if i % 5 == 0 and i % 7 == 0],
        5))
"
83 write a program to Capitalizes the first letter of each word in a string	"

def capitalize(text):
	return text.title()


str1 = ""Hello world!""
str2 = ""hello world!""
str3 = ""HELLO WORLD!""
str4 = ""includehelp.com is a tutorials site""


print(""str1: "", str1)
print(""str2: "", str2)
print(""str3: "", str3)
print(""str4: "", str4)
print()
"
write a function that converts a integer dictionary into a list of tuples.	"def dict_to_tuple(input_dict):
	out_tuple = [(a, b) for a, b in input_dict.items()]
	return out_tuple
"
are divisible by 7, between a given range 0 and n.	"def putNumbers(n):
	i = 0
	while i < n:
        j = i
        i = i + 1
        if j % 7 == 0:
            yield j


for i in reverse(100):
	print(i)
"
Removal all the characters other than integers from string	"str1 = 'I am 25 years and 10 months old'
res = """".join([item for item in str1 if item.isdigit()])
print(res)
"
36 python parse datetime from string	"

datetime_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')
"
numbers	"

import math


def st_dev(arr):
	avg = sum(arr) / len(arr)
	ss_dev = sum([(x - avg) ** 2 for x in arr])
	return math.sqrt(ss_dev / (len(arr) - 1))
"
Write a python program to Count occurrences of given element in a list	"def countX(lst, x):
	return lst.count(x)
"
write a program to multiply two matrix	"

rowsA = len(A)
colsA = len(A[0])
rowsB = len(B)
colsB = len(B[0])


if colsA != rowsB:
	raise ArithmeticError('Number of A columns must equal number of B rows.')


C = []
while len(C) < rowsA:
	C.append([])
	while len(C[-1]) < colsB:
        C[-1].append(0.0)


for i in range(rowsA):
	for j in range(colsB):
        total = 0
        for ii in range(colsA):
            total += A[i][ii] * B[ii][j]
        C[i][j] = total


print(""Multiplied Array"")
for i in range(rowsA):
	row = '|'
	for b in range(colsA):
        row = row + ' ' + str(C[i][b])
	print(row + ' ' + '|')
"
42 function to print the India Time	"def get_India_time():
	import datetime
	import pytz
	print(datetime.datetime.now(pytz.timezone('Asia/kolkata')))
"
write a python program that converts a octal number to octal and prints it	"octal_num = '17'
decimal_num = int(octal_num, 8)
print(decimal_num)
"
Write a Python function that shifts the character of strings	"

def char_shift(string, shift_count):
	
	return """".join([chr(ord(x) + shift_count)
                    if(ord(x) + shift_count) <= 122 else
                    chr(96 + (ord(x) + shift_count) - 122) for x in string])
"
M and radius R	"def cal_mi_sphere(mass: float, radius: float) -> float:
	return (7 / 5) * mass * (radius**2)
"
write a program to remove odd numbers from a list using list comprehensions	"nums = [1, 2, 3, 4, 5, 6, 7, 8]
no_odd_nums = [i for i in nums if i % 2 == 0]
"
write a Python function to count the number of occurrences in list	"def countX(lst, x):
	return lst.count(x)


lst = [8, 6, 8, 10, 8, 20, 10, 8, 8]
x = 8
print('{} has occurred {} times'.format(x, countX(lst, x)))
"
+ bx + c = 0	"def root_type(a: float, b: float, c: float):
	if b**2 - 4 * a * c >= 0:
        return 'real'
	else:
        return 'imaginary'
"
Write a python function to remove duplicate words from a given string	"def remove_duplicate_words(string):
	string = string.strip().split()
	return ' '.join(set(string))
"
write a python program to print the words in a sentence in reverse order	"sentence = 'the quick brown fox'
words = sentence.split(' ')
words.reverse()
print(' '.join(words))
"
whitespace as input to print the words composed of digits only.	"import re
s = input()
print(re.findall(""\\d+"", s))
"
alternative values	"

t = (1, 2, 4, 3, 8, 9)
print([t[i] for i in range(0, len(t), 2)])
"
occurrence of even element.	"
test_list = [1, 3, 7, 4, 7, 2, 9, 1, 10, 11]

indices_list = [idx for idx in range(
	len(test_list)) if test_list[idx] % 2 == 0]


res = indices_list[-1] - indices_list[0]

print(""Even elements distance : "" + str(res))
"
write a python function to return the dot product of two vectors	"def dotproduct(vec1, vec2):
	return sum(map(operator.mul, vec1, vec2))
"
write a program to return the absolute value	"

num = -10
print(f'Absolute of {num} is {abs(num)}')
"
Write a python function to check if 2 strings are anagrams or not	"def anagram(s1, s2):
	if sorted(s1) == sorted(s2):
        return True
	else:
        return False
"
console and generate a list and a tuple which contains every number.	"values = raw_input()
l = values.split("","")
t = tuple(l)
print(l)
print(t)
"
character and print it	"

test_str = 'geeks4g!!!eeks'
s = ''
for i in test_str:

	if i.isalnum() == False:
        break
	else:
        s += i
print(s)
"
dequeue	"

class CircularQueue(object):
	def __init__(self, limit=10):
        self.limit = limit
        self.queue = [None for i in range(limit)]
        self.front = self.rear = -1

	def __str__(self):
        if (self.rear >= self.front):
            return ' '.join([str(self.queue[i])
                             for i in range(self.front, self.rear + 1)])

        else:
            q1 = ' '.join([str(self.queue[i])
                          for i in range(self.front, self.limit)])
            q2 = ' '.join([str(self.queue[i])
                          for i in range(0, self.rear + 1)])
            return q1 + ' ' + q2

	def isEmpty(self):
        return self.front == -1

	def isFull(self):
        return (self.rear + 1) % self.limit == self.front

	def enqueue(self, data):
        if self.isFull():
            print('Queue is Full!')
        elif self.isEmpty():
            self.front = 0
            self.rear = 0
            self.queue[self.rear] = data
        else:
            self.rear = (self.rear + 1) % self.limit
            self.queue[self.rear] = data

	def dequeue(self):
        if self.isEmpty():
            print('Queue is Empty!')
        elif (self.front == self.rear):
            self.front = -1
            self.rear = -1
        else:
            self.front = (self.front + 1) % self.limit
"
This is how pass works in case of multiple inheritance	"class A1(object):
	def foo(self):
        print(""class A1"")


class B1(A1):
	pass


class C1(A1):
	def foo(self):
        print(""class C1"")


class D1(B1, C1):
	pass
"
write a python function that would reverse the given string	"def reverse_string(str_to_be_reversed):
	return str_to_be_reversed[::-1]
"
first string :b # enter last string: e #Output : bcde	"first = input(""The first: "")
last = input(""The last: "")


while first <= last:
	print(first, end='')
	first = chr(ord(first) + 1)
print()
"
write a python function to return a set of all punctuation used in a string	"def get_punctuations(sentence):
	punctuations = '''!()-[]{};:'""\\,<>./?@#$%^&*_~'''
	used_punctuation = set()
	for char in sentence:
        if char in punctuations:
            used_punctuation.add(char)
	return used_punctuation
"
49. Python Program to Count the Number of Each Vowel	"vowels = 'aeiou'


ip_str = 'Hello, have you tried our tutorial section yet?'

ip_str = ip_str.casefold()
"
are composed of letters only.	"import re
emailAddress = 'bing@google.com'
pat2 = ""(\\w+)@(\\w+)\\.(com)""
r2 = re.match(pat2, emailAddress)
print(r2.group(2))
"
upto n, where n is an argument	"def recursive_sum(n):
	if n <= 1:
        return n
	else:
        return n + recursive_sum(n - 1)
"
(including duplicates).	"def permute_string(str):
	if len(str) == 0:
        return ['']
	prev_list = permute_string(str[1:len(str)])
	next_list = []
	for i in range(0, len(prev_list)):
        for j in range(0, len(str)):
            new_str = prev_list[i][0:j] + str[0] + prev_list[i][j:len(str) - 1]
            if new_str not in next_list:
                next_list.append(new_str)
	return next_lis
"
using list comprehension	"s1 = eval(input(""Enter list ""))
print([i**2 for i in s1])
"
30 function to print the regular polygon area	"def polygon_area(side_length=1, side=3):
	from math import tan
	if side_length <= 0:
        raise ValueError(""How come Side is zero."")
	else:
        if side <= 0 or side >= 7:
            raise NotImplementedError
        elif side in (2, 1):
            raise ValueError(""No Polygon of Side 1 & 2 Exists"")
        elif side == 3:
            return side_length * side_length * side / 4 * tan(180 / side)
        elif side == 4:
            return side_length * side_length
        elif side == 5:
            return side_length * side_length * side / 4 * tan(180 / side)
        elif side == 6:
            return side_length * side_length * side / 4 * tan(180 / side)
"
Python Program to find sum of nested list using Recursion	"total = 0


def sum_nestedlist(l):
	global total
	for j in range(len(l)):
        if type(l[j]) == list:

            sum_nestedlist(l[j])
        else:
            total += l[j]


sum_nestedlist([[1, 2, 3], [4, [5, 6]], 7])
print(total)
"
write a python function to check whether the number is a ugly number or not	"
def isUgly(n):
	if (n == 1):
        return 1
	if (n <= 0):
        return 0
	if (n % 2 == 0):
        return (isUgly(n // 2))
	if (n % 3 == 0):
        return (isUgly(n // 3))
	if (n % 5 == 0):
        return (isUgly(n // 5))
	return 0

 
 


def findNums(n):
	if (n <= 11):
        if (n == 8):
            print(""4 4"", end="" "")
        if (n == 10):
            print(""4 6"", end="" "")
        else:
            print(""-1"", end="" "")
	if (n % 2 == 0):
        print(""4 "", (n - 4), end="" "")
	else:
        print(""9 "", n - 9, end="" "")
"
write a python program to replace blank space to 1	"a = '1 0 0 1'
print(a.replace(' ', '1'))
"
index of value if the value of the key is list.	"test_list = [{'tsai': [5, 3, 9, 1], 'is': 8, 'good': 10},
             {'tsai': 1, 'for': 10, 'geeks': 9},
             {'love': 4, 'tsai': [7, 3, 22, 1]}]
N = 2
key = ""tsai""
for sub in test_list:
	if isinstance(sub[key], list):
        sub[key] = sub[key][N]
"
and print the new combined dictionary.	"test_dict1 = {'Gfg': 1, 'is': 2, 'best': 3}
test_dict2 = {'Gfg': 4, 'is': 10, 'for': 7, 'geeks': 12}
prio_dict = {1: test_dict2, 2: test_dict1}
res = prio_dict[2].copy()
for key, val in prio_dict[1].items():
	res[key] = val
print(""The dictionary after combination : "" + str(res))
"
values and prints this list.	"test_dict = {'Geeks': 2, 'for': 1, 'CS': 3}
res = list(sum(sorted(test_dict.items(), key=lambda x: x[1]), ()))
print(""List after conversion from dictionary : "", res)
"
write a python program to split in python	"

print('abcdefcdghcd'.split('cd', 2))
"
write a python function to check if a key exists in a dictionary	"

d = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3', 'key4': 'value4'}


def is_key_present(x):
	if x in d:
        print('Key is present in the dictionary')
	else:
        print('Key is not present in the dictionary')
"
write a function to convert miles to kilometers	"

def miles_to_kms(dist):
	return dist * 1.609
"
the sum and average	"
L = [4, 5, 1, 2, 9, 7, 10, 8]

count = 0

for i in L:
	count += i


avg = count / len(L)

print(""sum = "", count)
print(""average = "", avg)
"
10 write a python program to construct equidigit tuple and print them	"

list1 = [5654, 223, 982143, 34, 1021]


list2 = []
for sub in list1:

	mid_idx = len(str(sub)) // 2

	el1 = str(sub)[:mid_idx]
	el2 = str(sub)[mid_idx:]

	list2.append((int(el1), int(el2)))

print(""Equidigit tuples List : "" + str(list2))
"
Write a Python program to append a list to the second list.	"list1 = [1, 2, 3, 0]
list2 = ['Red', 'Green', 'Black']
final_list = list1 + list2
print(final_list)
"
Generators are faster than list comprehension	"

def test_plainlist(plain_list):
	for i in plain_list():
        pass


def test_listcompr(listcompr):
	for i in listcompr():
        pass


def test_generator(generator):
	for i in generator():
        pass


def test_generator_yield(generator_yield):
	for i in generator_yield():
        pass


print('plain_list:	 ', end='')
test_plainlist(plainlist)
print('\nlistcompr:	 ', end='')
test_listcompr(listcompr)
print('\ngenerator:	 ', end='')
test_generator(generator)
print('\ngenerator_yield:	 ', end='')
test_generator_yield(generator_yield)
"
Write a program that will determine the memory usage by python process	"import os
import psutil
print(psutil.Process(os.getpid()).memory_info().rss / 1024 ** 2)
"
by a specified key	"def sort_dict_list(dict_list, sort_key):
	dict_list.sort(key=lambda item: item.get(sort_key))
"
sentence	"sentence = 'the quick brown fox'
print(sentence[::2])
"
prints it	"sentence = 'the quick brown fox'
print(sentence.replace(' ', ''))
"
length of the word and print it	"sentence = 'the quick brown fox jumps over the lazy dog'
words = sentence.split(' ')
lengths = [str(len(word)) for word in words]
print(' '.join(lengths))
"
Write a Python Program to Transpose a Matrix  and print result.	"X = [[1, 2],
     [4, 5],
     [7, 8]]

Result = [[0, 0, 0],
          [0, 0, 0]]

for i in range(len(X)):
	for j in range(len(X[0])):
        result[j][i] = X[i][j]

for r in result:
	print(r)
"
operator in python.	"def multiply(x, y):
	if y < 0:
        return -multiply(x, -y)
	elif y == 0:
        return 0
	elif y == 1:
        return x
	else:
        return x + multiply(x, y - 1)
"
returns the list and the deleted element	"def delete_last_element(list_to_be_processed):
	deleted_element = list_to_be_processed.pop()
	return list_to_be_processed, deleted_element
"
maximum range and print it	"

test_dict = {""Gfg"": [6, 2, 4, 1], ""is"": [4, 7, 3, 3, 8], ""Best"": [1, 0, 9, 3]}

max_res = 0
for sub, vals in test_dict.items():

	max_res = max(max_res, max(vals) - min(vals))
	if max_res == max(vals) - min(vals):
        res = sub
print(""The maximum element key : "" + str(res))
"
write a python program to print the ASCII value of a character	"c = 'p'
print(""The ASCII value of '"" + c + ""' is"", ord(c))
"
length in a string	"

str1 = ""It is wonderful and sunny day for a picnic in the park""
str_len = 5


res_str = []

text = str1.split("" "")

for x in text:

	if len(x) < str_len:
        res_str.append(x)


print(""Words that are less than "" + str(str_len) + "": "" + str(res_str))
"
write a python program to multiply three numbers	"num1 = 1.5
num2 = 6.3
num3 = -2.3
product = num1 * num2 * num3
print(f'Product: {product}')
"
and guess it within 3 guesses	"print(""Please guess a number between 1 and 5 and I will guess within 3 chances!"")
guess1 = input(""Is it <= 3? enter y/n \n"")
if guess1 == ""y"":
	guess2 = input(""Is it <= 2? enter y/n \n"")
	if guess2 == ""y"":
        guess3 = input(""Is it 1? enter y/n \n"")
        if guess3 == ""y"":
            print(""Yay! found the number, its 1"")
        else:
            print(""Yay! found the number, its 2"")
	else:
        print(""Yay! found the number, its 3"")
else:
	guess2 = input(""Is it 4? enter y/n \n"")
	if guess2 == ""y"":
        print(""Yay! found the number, its 4"")
	else:
        print(""Yay! found the number, its 5"")
"
representation	"

def to_roman_numeral(num):
	lookup = [
        (1000, 'M'),
        (900, 'CM'),
        (500, 'D'),
        (400, 'CD'),
        (100, 'C'),
        (90, 'XC'),
        (50, 'L'),
        (40, 'XL'),
        (10, 'X'),
        (9, 'IX'),
        (5, 'V'),
        (4, 'IV'),
        (1, 'I'),
	]
	res = ''
	for (n, roman) in lookup:
        (d, num) = divmod(num, n)
        res += roman * d
	return res
"
43. Python Program to Transpose a Matrix using Nested List Comprehension	"

X = [[12, 7],
     [4, 5],
     [3, 8]]


result = [[X[j][i] for j in range(len(X))] for i in range(len(X[0]))]


for r in result:
	print(r)
"
Write a Python function to return carol numbers	"def carol_number(n):
	if n >= 0:
        return (2**n - 1)**2 - 2
"
using dictionary comprehension	"input = [{""foo"": ""bar"", ""Hello"": ""World""},
         {""key1"": ""val1"", ""key2"": ""val2""},
         {""sample_key"": ""sample_val""}]
merged_dict = {key: value for d in input for key, value in d.items()}
"
write a python function to print the hexadecimal value of a decimal number	"def print_hexadecimal(dec):
	print(hex(dec))
"
Write a function to return the volume of a cylinder	"def cal_cylinder_volume(height, radius):
	pi = 3.14
	return pi * (radius**2) * height
"
3x3 matrix	"X = [[12, 7, 3],
     [4, 5, 6],
     [7, 8, 9]]
"
30 program to count number of cpu cores available	"import os
os.cpu_count()
"
write a function to find the sum of Sine series	"

import math


def sin(x, n):
	sine = 0
	for i in range(n):
        sign = (-1)**i
        pi = 22 / 7
        y = x * (pi / 180)
        sine = sine + ((y**(2.0 * i + 1)) / math.factorial(2 * i + 1)) * sign
	return sine
"
a given n input by console (n>0).	"num = int(input(""Enter Number: ""))
sum = 0
for i in range(num + 1):
	sum += float(i / (i + 1))
print(""Sum: {:.2f}"".format(sum))
"
write a python function to return the factors of a number	"def get_factors(num):
	factors = []
	for i in range(1, num + 1):
        if num % i == 0:
            factors.append(i)
	return factors
"
write s python program to print the symmetric difference of two sets	"

A = {1, 2, 3, 4, 5}
B = {4, 5, 6, 7, 8}
print(A ^ B)
"
write a python function to return union of two sets	"def union_set(set1, set2):
	return set1 | set2
"
travelled in given time	"def cal_speed(distance: float, time: float) -> float:
	return distance / time
"
recursively	"

def check(n):
	if (n < 2):
        return (n % 2 == 0)
	return (check(n - 2))


n = int(input(""Enter number:""))
if(check(n) == True):
	print(""Number is even!"")
else:
	print(""Number is odd!"")
"
Write a python function to remove numeric digits from given string	"def removedigits(ini_string):
	res = ''.join([i for i in ini_string if not i.isdigit()])
	return res
"
write a python program to print the first 5 items in a list	"my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(my_list[:5])
"
write a function to check if a upper case letter exists in a given string	"

def check_upper(str1):

	for char in str1:
        k = char.isupper()
        if k == True:
            return True
	if(k != 1):
        return False
"
digit (no more than one digit)	"

def digSum(n):
	sum = 0
	while(n > 0 or sum > 9):

        if(n == 0):
            n = sum
            sum = 0
        sum += n % 10
        n = int(n / 10)
	return sum
"
Write a function to return the area of a rhombus with diagonals q1 and q2	"def cal_area_rhombus(q1, q2):
	return (q1 * q2) / 2
"
Write a function to return the perimeter of a square	"def cal_perimeter_square(side):
	return 4 * side
"
write a python function to sort the dictionary by key	"

def sort_dict_by_key(d, reverse=False):
	return dict(sorted(d.items(), reverse=reverse))
"
211, 2311, 30031)	"from math import sqrt
from itertools import count, islice


def is_prime(n):
	return n > 1 and all(n % i for i in islice(count(2), int(sqrt(n) - 1)))


def euclid_numbers(n):
	product = 1
	if n > 3:
        for i in range(n):
            if is_prime(i):
                product = product * i
                yield product
"
Write a Python program to print the calendar of any given year	"import calendar
year = 2020
print(calendar.calendar(year))
"
Pick a random character from a given String	"import random


name = 'pynative'
char = random.choice(name)
print(""random char is "", char)
"
write a functiom to concat two list	"l1 = [1, 2, 3]
l2 = [4, 5, 6]


def list_concat(l1, l2):
	return l1 + l2
"
Define a function which can compute the sum of two numbers.	"def SumFunction(number1, number2):
	return number1 + number2
"
Write a python function to generate Cube Numbers (1, 8, 27, 64, 125...)	"def cube_numbers(n):
	for i in range(n):
        yield i ** 3
"
Breakable Buffalo on Aug 09 2020 Donate	"def is_camel_case(s):
	return s != s.lower() and s != s.upper() and ""_"" not in s
"
write a Python program to print positive numbers in a list	"list1 = [11, -21, 0, 45, 66, -93]
for num in list1:
	if num >= 0:
        print(num, end="" "")
"
Calculate the sum of every pair of numbers from two lists	"list1 = [1, 2, 3]
list2 = [5, 6, 7]
final = [a + b for a in list1 for b in list2]
print(f""sum of every pair of numbers from two lists:{final}"")
"
write a python function to clamp a number within a user specified range	"

def clamp_number(num, a, b):
	return max(min(num, max(a, b)), min(a, b))
"
28 function to check two number ( floating also )  are close or not	"def check_isclose(x, y):
	from math import isclose
	return isclose(x, y)
"
in a pair of strings	"

str1 = ""ababccd12@""
str2 = ""bb123cca1@""


matched_chars = set(str1) & set(str2)
print(""No. of matching characters are : "" + str(len(matched_chars)))
"
write a python function to check whether all elements are equal to each other	"def all_equal(iterable):
	from itertools import groupby
	g = groupby(iterable)
	return next(g, True) and not next(g, False)
"
60 Write a function program to reverse the digits of an integer.	"

def reverse_integer(x):
	sign = -1 if x < 0 else 1
	x *= sign

	while x:
        if x % 10 == 0:
            x /= 10
        else:
            break

	x = str(x)
	lst = list(x)
	lst.reverse()
	x = """".join(lst)
	x = int(x)
	return sign * x
"
Counting total lower Case in a string	"str1 = ""abc4234AFdeaa""
digitCount = 0
for i in range(0, len(str1)):
	char = str1[i]
	if(char.lower()):
        digitCount += 1
print('Number total lower Case: ', digitCount)
"
Write a function that removes all special characters	"def clean_str(s):
	import re
	return re.sub('[^A-Za-z0-9]+', '', s)
"
Print the final dictionary	"
test_list = [2323, 82, 129388, 234, 95]

print(""The original list is : "" + str(test_list))

res = dict()
for ele in test_list:

	mid_idx = len(str(ele)) // 2
	key = int(str(ele)[:mid_idx])
	val = int(str(ele)[mid_idx:])

	res[key] = val

print(""Constructed Dictionary : "" + str(res))
"
print its contents	"def read_and_print_file(filepath):
	with open(filepath, ""r"") as infile:
        print(infile.read())
"
write a program to replace duplicate word occurence in String	"

str1 = ""IISC is the best. IISC has Classes in the evening for professionals. Classes help to learn new things.""


repl_dict = {'IISC': 'It', 'Classes': 'They'}


str_list = str1.split(' ')


res = set()


for idx, ele in enumerate(str_list):
	if ele in repl_dict:
        print(str(idx) + '  ' + ele)
        if ele in res:
            str_list[idx] = repl_dict[ele]
        else:
            res.add(ele)


res = ' '.join(str_list)


print(""Replaced String: "" + str(res))
"
specified size	"

from math import ceil


def chunk(lst, size):
	return list(
        map(lambda x: lst[x * size:x * size + size],
            list(range(ceil(len(lst) / size)))))
"
Python program to implement Gnome Sort	"def gnomeSort(arr, n):
	index = 0
	while index < n:
        if index == 0:
            index = index + 1
        if arr[index] >= arr[index - 1]:
            index = index + 1
        else:
            arr[index], arr[index - 1] = arr[index - 1], arr[index]
            index = index - 1
	return arr


arr = [34, 2, 10, -9]
n = len(arr)
arr = gnomeSort(arr, n)
print(""Sorted seqquence after applying Gnome Sort :"")
for i in arr:
	print(i)
"
write a python function to check whether the number is a nude number or not	"
def checkDivisbility(num):
	digit = 0
	N = num
	while (num != 0):
        digit = num % 10
        num = num // 10
        if (digit == 0 or N % digit != 0):
            return False
	return True
"
Calculate the sum of every pair of numbers from two lists	"list1 = [1, 2, 3]
list2 = [5, 6, 7]
final = [a + b for a in list1 for b in list2]
print(f""sum of every pair of numbers from two lists:{final}"")
"
Combinations from the Digits	"

a = 2
b = 9
c = 5
d = []
d.append(a)
d.append(b)
d.append(c)
for i in range(0, 3):
	for j in range(0, 3):
        for k in range(0, 3):
            if(i != j & j != k & k != i):
                print(d[i], d[j], d[k])
"
of list	"def n_power(l1: list, power: int) -> list:
	return [i**power for i in l1]
"
write a python program to print the items in a list apart from the first 4	"my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(my_list[4:])
"
"square root is not an integer"""	"def find_integer_square_roots(num):
	found = False
	for k in range(1, (num // 2) + 1):
        if ((k**2) == num):
            found = True
            break
	if not found:
        return ""Error - the square root is not an integer""
	return -k, k
"
write a Python function to find surface area of the Pentagonal Prism	"

def surfaceArea(a, b, h):
	return 5 * a * b + 5 * b * h


a = 5
b = 3
h = 7


print(""surface area ="", surfaceArea(a, b, h))
"
write a python program that would swap variable values	"a = 10
b = 15
a, b = b, a
"
write a function to find all urls in a given string	"

import re


def find_urls(string):

	regex = r""(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\"".,<>?«»“”‘’]))""
	url = re.findall(regex, string)
	return [x[0] for x in url]
"
32 print current version of python	"print(sys.version)
"
of corresponding elements	"

def zip_list(list1, list2):
	return list(zip(list1, list2))
"
otherwise.	"def is_empty(s):
	if s == """":
        return True
	else:
        return False
"
Write a python program to print all the keys in a dictionary.	"d = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
print(d.keys())
"
write a python function to check if a given string is a palindrome	"

def isPalindrome(s):
	return s == s[::-1]
"
write a program to compute the count of each word in a sentence and print it	"word_freq = {}
line = 'how many how words does this many have'
for word in line.split():
	word_freq[word] = word_freq.get(word, 0) + 1
print(word_freq)
"
Write a Python program to check and print whether a triangle is valid or not	"

def triangle_check(l1, l2, l3):
	if (l1 > l2 + l3) or (l2 > l1 + l3) or (l3 > l1 + l2):
        print('No, the lengths wont form a triangle')
	elif (l1 == l2 + l3) or (l2 == l1 + l3) or (l3 == l1 + l2):
        print('yes, it can form a degenerated triangle')
	else:
        print('Yes, a triangle can be formed out of it')


length1 = int(input('enter side 1\n'))
length2 = int(input('enter side 2\n'))
length3 = int(input('enter side 3\n'))
triangle_check(length1, length2, length3)
"
list  [[2],[3],[4],[3],[4],[5],[4],[5],[6]]	"

start_num = 2
repeat_count = 3
max_offset = 3
list4 = [[start_num + i + j]
         for j in range(max_offset) for i in range(repeat_count)]
print(list4)
"
Write a Python function to Find Whether a Number is a Power of Two	"def is_power_of_two(n):
	if n <= 0:
        return False
	else:
        return n & (n - 1) == 0
"
Write a Python program to Check Divisibility of 2 numbers	"nominator = int(input(""Enter Nominator: ""))
denominator = int(input(""Enter Denominator: ""))
if nominator % denominator == 0:
	print(""{} is completely Divisible by {}"".format(nominator, denominator))
else:
	print(""{} is not completely Divisible by {}"".format(nominator, denominator))
"
numbers.	"values = raw_input()
numbers = [x for x in values.split("","") if int(x) % 2 != 0]
print("","".join(numbers))
"
number 2 to the power 20.	"def digits_sum():
	n = 2**20
	ans = sum(int(c) for c in str(n))
	return str(ans)
"
Define a custom exception class which takes a string message as attribute.	"class MyError(Exception):
	def __init__(self, msg):
        self.msg = msg
"
write a python program uses else with for loop	"seq = ""abcde""
for k in seq:
	if k == ""f"":
        break
else:
	print(""f Not Found!"")
"
row) as input from the user and print the output.	"

size = int(input(""Input the size of the matrix: ""))
matrix = [[0] * size for row in range(0, size)]
for x in range(0, size):

	line = list(map(int, input().split()))

	for y in range(0, size):
        matrix[x][y] = line[y]


matrix_sum_diagonal = sum(matrix[size - i - 1][size - i - 1]
                          for i in range(size))
"
parallel in a given list	"def cal_total_cap_in_parallel(cap_list: list) -> float:
	return sum(cap_list)
"
write a python program to print the sum of first n numbers	"n = 10
sum = 0
while n > 0:
	sum += n
	n -= 1
print(sum)
"
12. Python Program to Check Leap Year	"year = 2000


if (year % 4) == 0:
	if (year % 100) == 0:
        if (year % 400) == 0:
            print(""{0} is a leap year"".format(year))
        else:
            print(""{0} is not a leap year"".format(year))
	else:
        print(""{0} is a leap year"".format(year))
else:
	print(""{0} is not a leap year"".format(year))
"
print the number	"class Number:
	def __init__(self, num):
        self.num = num

	def inputNum(self):
        self.num = int(input(""Enter an integer number: ""))

	def printNum(self):
        print(self.num)
"
numbers. Also, display the factors.	"def smallest_multiple(n):
	if (n <= 2):
        return n
	i = n * 2
	factors = [number for number in range(n, 1, -1) if number * 2 > n]
	print(factors)

	while True:
        for a in factors:
            if i % a != 0:
                i += n
                break
            if (a == factors[-1] and i % a == 0):
                return i
"
in Sublist	"

a = [['A', 34], ['B', 21], ['C', 26]]
for i in range(0, len(a)):
	for j in range(0, len(a) - i - 1):
        if(a[j][1] > a[j + 1][1]):
            temp = a[j]
            a[j] = a[j + 1]
            a[j + 1] = temp
"
even or odd, print out an appropriate message to the user.	"def check_number(num):
	mod = num % 2
	if mod > 0:
        return ""This is an odd number.""
	else:
        return ""This is an even number.""


print(check_number(5))
"
write a python program to del the first element of the array/list	"a = [-1, 1, 66.25, 333, 333, 1234.5]
del a[0]
print(a)
"
Compute the product of every pair of numbers from two lists	"list1 = [1, 2, 3]
list2 = [5, 6, 7]
final = [a * b for a in list1 for b in list2]
print(f""Product of every pair of numbers from two lists:{final}"")
"
write a python program to merge two dictionaries	"

dict_1 = {'apple': 9, 'banana': 6}
dict_2 = {'banana': 4, 'orange': 8}
combined_dict = {**dict_1, **dict_2}
print(combined_dict)
"
Write a function that returns length of the list	"

def list_length(l):
	return len(l)
"
in a pair of strings	"

str1 = ""ababccd12@""
str2 = ""bb123cca1@""


matched_chars = set(str1) & set(str2)
print(""No. of matching characters are : "" + str(len(matched_chars)))
"
Remove empty strings from the list of strings	"list1 = [""Mike"", """", ""Emma"", ""Kelly"", """", ""Brad""]
resList = [i for i in (filter(None, list1))]
print(resList)
"
list.	"import math


def bin_search(li, element):
	bottom = 0
	top = len(li) - 1
	index = -1
	while top >= bottom and index == -1:
        mid = int(math.floor((top + bottom) / 2.0))
        if li[mid] == element:
            index = mid
        elif li[mid] > element:
            top = mid - 1
        else:
            bottom = mid + 1
	return index


li = [2, 5, 7, 9, 11, 17, 222]
print(bin_search(li, 11))
print(bin_search(li, 12))
"
repeating characters.	"str = ""IshwarVenugopal""


def longest_non_repeat(str):
	i = 0
	max_length = 1

	for i, c in enumerate(str):
        start_at = i
        sub_str = []
        while (start_at < len(str)) and (str[start_at] not in sub_str):
            sub_str.append(str[start_at])
            start_at = start_at + 1

        if len(sub_str) > max_length:
            max_length = len(sub_str)

        print(sub_str)

	return max_length


longest_non_repeat(str)
"
Write a pythno function to print the length of a given tuple	"

my_tuple = (1, 2, 3, 4, 5, 6, 7, 8)


print(len(my_tuple))
"
24. Python Program to Find Numbers Divisible by Another Number	"my_list = [12, 65, 54, 39, 102, 339, 221, ]
result = list(filter(lambda x: (x % 13 == 0), my_list))
print(""Numbers divisible by 13 are"", result)
"
write a python program to use f string	"var1 = 'python language'
print(f'f-string is an good feature in {var1}')
"
upto n, where n is an argument	"def recursive_sum(n):
	if n <= 1:
        return n
	else:
        return n + recursive_sum(n - 1)
"
write a program to accept the strings which contains all vowels	"

str1 = ""__main__""
if len(set(str1).intersection(""AEIOUaeiou"")) >= 5:
	print('accepted')
else:
	print(""not accepted"")
"
they add up to a specific target.	"input_array = [2, 7, 11, 15]
target = 26
result = []


for i, num in enumerate(input_array):
	for j in range(i + 1, len(input_array)):
        print(i, j)
"
Write a python program to print only upto the letter 't' in a given string.	"

s = ""hi i love python""


i = 0
while s[i] != 't':
	print(s[i], end='')
	i += 1
"
else return None ax**2 + bx + c = 0	"def roots_of_qad_eq(a: float, b: float, c: float):
	d = b**2 - 4 * a * c
	if d >= 0:
        return (-b + (d)**(1 / 2)) / 2 * a, (-b - (d)**(1 / 2)) / 2 * a
	else:
        return None
"
Write a function that returns uppercase string	"def str_uppercase(s: str):
	return s.upper()
"
case of tie)	"

test_list = [{""Gfg"": [6, 7, 9], ""is"": 9, ""best"": 10},
             {""Gfg"": [2, 0, 3], ""is"": 11, ""best"": 19},
             {""Gfg"": [4, 6, 9], ""is"": 16, ""best"": 1}]
print(""The original list : "" + str(test_list))
K = ""Gfg""
idx = 2
K2 = ""best""
res = sorted(
	sorted(test_list, key=lambda ele: ele[K2]), key=lambda ele: ele[K][idx])
print(""The required sort order : "" + str(res))
"
3 add 1 to all elements in list python	"lst = [1, 2, 3]
list(map(lambda x: x + 1, lst))
"
removes trailing characters	"word = "" xyz ""
rstrip = word.rstrip()
print(f""String ater removal of trailing characters:{rstrip}"")
"
write a python program to print unique words in a sentence	"sentence = 'the king is the one'
unique = set(sentence.split(' '))
print(unique)
"
deleted both ends	"

class Deque(object):
	def __init__(self, limit=10):
        self.queue = []
        self.limit = limit

	def __str__(self):
        return ' '.join([str(i) for i in self.queue])

	def isEmpty(self):
        return len(self.queue) <= 0

	def isFull(self):
        return len(self.queue) >= self.limit

	def insertRear(self, data):
        if self.isFull():
            return
        else:
            self.queue.insert(0, data)

	def insertFront(self, data):
        if self.isFull():
            return
        else:
            self.queue.append(data)

	def deleteRear(self):
        if self.isEmpty():
            return
        else:
            return self.queue.pop(0)

	def deleteFront(self):
        if self.isFull():
            return
        else:
            return self.queue.pop()
"
numbers using yield	"def nextSquare():
	i = 1
	
	while True:
        yield i * i
        i += 1
"
write a Python Program to Find the Sum of Natural Numbers	"num = 16
if num < 0:
	print(""Enter a positive number"")
else:
	sum = 0
	while(num > 0):
        sum += num
        num -= 1
	print(""The sum is"", sum)
"
Write a Python Program to print the Reverse a Given Number	"

n = 1023
rev = 0
while(n > 0):
	dig = n % 10
	rev = rev * 10 + dig
	n = n // 10
print(""Reverse of the number:"", rev)
"
Write a python program to print negative Numbers in a List	"
list1 = [11, -21, 0, 45, 66, -93]

for num in list1:

	if num < 0:
        print(num, end="" "")
"
largest sum and return its sum.	"

def cross_sum(nums, left, right, p):
	if left == right:
        return nums[left]

	left_subsum = float('-Inf')

	current_sum = 0
	for i in range(p, left - 1, -1):
        current_sum += nums[i]
        left_subsum = max(left_subsum, current_sum)

        right_subsum = float('-Inf')

        current_sum = 0

	for i in range(p + 1, right + 1):
        current_sum += nums[i]
        right_subsum = max(right_subsum, current_sum)

	return left_subsum + right_subsum


def helper(nums, left, right):
	if left == right:
        return nums[left]

	p = (left + right) // 2

	left_sum = helper(nums, left, p)
	right_sum = helper(nums, p + 1, right)
	cross_sum1 = cross_sum(nums, left, right, p)

	return max(left_sum, right_sum, cross_sum1)


def maxSubArray(nums):
	return helper(nums, 0, len(nums) - 1)
"
from user.	"def symmetric_diff_sets():
	M, m = input(), set(list(map(int, input().split())))
	N, n = input(), set(list(map(int, input().split())))
	s = sorted(list(m.difference(n)) + list(n.difference(m)))
	for i in s:
        print(i)
"
the result	"def mul_two_numbers(num1, num2):
	mul = num1 * num2
	return mul
"
Counting total Upper Case in a string	"str1 = ""abc4234AFde""
digitCount = 0
for i in range(0, len(str1)):
	char = str1[i]
	if(char.upper()):
        digitCount += 1
print('Number total Upper Case: ', digitCount)
"
Reverse a given string	"str1 = ""PYnative""
print(""Original String is:"", str1)


str1 = str1[::-1]
print(""Reversed String is:"", str1)
"
47 write a program to check if the number is a prime numnber	"

num = int(input(""Enter a number: ""))

if num > 1:
	for i in range(2, num):
        if (num % i) == 0:
            print(num, ""is not a prime number"")
            print(i, ""times"", num // i, ""is"", num)
            break
	else:
        print(num, ""is a prime number"")

else:
	print(num, ""is not a prime number"")
"
Write a Python function to find the union of two arrays	"def array_union(A, B):
	union = list(set(A) | set(B))
	return union
"
check if the number is negative	"if num < 0:
	print(""Sorry, factorial does not exist for negative numbers"")
elif num == 0:
	print(""The factorial of 0 is 1"")
else:
	print(""The factorial of"", num, ""is"", recur_factorial(num))
"
index 1 to 4	"

list1 = [11, 5, 17, 18, 23, 50]

del list1[1:5]

print(*list1)
"
python program to implement stooge sort	"def stoogesort(arr, l, h):
	if l >= h:
        return
	if arr[l] > arr[h]:
        t = arr[l]
        arr[l] = arr[h]
        arr[h] = t
	if h - l + 1 > 2:
        t = (int)((h - l + 1) / 3)
        stoogesort(arr, l, (h - t))
        stoogesort(arr, l + t, (h))
        stoogesort(arr, l, (h - t))


arr = [2, 4, 5, 3, 1]
n = len(arr)
stoogesort(arr, 0, n - 1)
for i in range(0, n):
	print(arr[i])
"
write Python program to illustrate enumerate function	"l1 = [""eat"", ""sleep"", ""repeat""]
s1 = ""geek""


obj1 = enumerate(l1)
obj2 = enumerate(s1)


print(""Return type:"", type(obj1))
print(list(enumerate(l1)))


print(list(enumerate(s1, 2)))
"
write a python program to shuffle the items in a list and print it	"from random import shuffle
mylist = [1, 2, 3, 4, 5]
shuffle(mylist)
print(mylist)
"
write a python function to find rightmost value less than or equal to x	"def find_le(a, x):
	from bisect import bisect_right
	i = bisect_right(a, x)
	if i:
        return a[i - 1]
	raise ValueError
"
a dataframe	"import pandas as pd
import numpy as np
mylist = list('abcedfghijklmnopqrstuvwxyz')
myarr = np.arange(26)
mydict = dict(zip(mylist, myarr))
ser = pd.Series(mydict)
df = ser.to_frame().reset_index()
print(df.head())
"
write a program to check if a string is binary or not	"

str1 = ""01110011 a""


set1 = set(str1)


if set1 == {'0', '1'} or set1 == {'0'} or set1 == {'1'}:
	print(""string is binary"")
else:
	print(""string is not binary"")
"
25 Write a python program to add phrase in the middle of string and print it	"

test_str = 'The sun in the east'
mid_str = ""rises""


s = """"
l = test_str.split("" "")
for i in range(0, len(l)):
	if i == len(l) // 2:
        l.insert(i, mid_str)
        break
s = "" "".join(i for i in l)
print(s)
"
write a python function to add elements of two lists	"def add_two_lists(list1, list2):
	list1 = [1, 2, 3]
	list2 = [4, 5, 6]
	sum_list = []

	for (item1, item2) in zip(list1, list2):
        sum_list.append(item1 + item2)
	return sum_list
"
7 write a python function to return every second number from a list	"

def every_other_number(lst):
	return lst[::2]
"
write a python program that sorts and prints a comma separated list of values	"values = 'one,two,three,four,five'
items = values.split(',')
items.sort()
print(','.join(items))
"
100 Write a Python class to convert an integer to a roman numeral.	"class Solution:
	def int_to_Roman(self, num):
        val = [
            1000, 900, 500, 400,
            100, 90, 50, 40,
            10, 9, 5, 4,
            1
        ]
        syb = [
            ""M"", ""CM"", ""D"", ""CD"",
            ""C"", ""XC"", ""L"", ""XL"",
            ""X"", ""IX"", ""V"", ""IV"",
            ""I""
        ]
        roman_num = ''
        i = 0
        while num > 0:
            for _ in range(num // val[i]):
                roman_num += syb[i]
                num -= val[i]
            i += 1
        return roman_num
"
Extract least frequency element	"res = defaultdict(int)
for ele in test_list:
	res[ele] += 1
min_occ = 9999
for ele in res:
	if min_occ > res[ele]:
        min_occ = res[ele]
        tar_ele = ele
"
dictionary.	"test_dict = {6: 2, 8: 9, 3: 9, 10: 8}
N = 4
res = []
for key, val in sorted(
        test_dict.items(),
        key=lambda x: x[0],
        reverse=True)[
        : N]:
	res.append(key)
print(""Top N keys are: "" + str(res))
"
write a python program that converts a octal number to octal and prints it	"octal_num = '17'
decimal_num = int(octal_num, 8)
print(decimal_num)
"
which ta	"N = int(input(""Enter Integer ""))
lst = [i**3 for i in range(1, N + 1)]
print(sum(lst))
"
printing result	"print(""The computed summation of products : "" + str(res))
"
write a Python program to calculate surface area of Torus	"

r = 3
R = 7


Surface = (float)(4 * pi * pi * R * r)
print(""Surface: "", Surface)
"
48. python function for finding the derivative of exponent of a number	"def dexp(x):

	return math.exp(x)
"
Driver Program to test ht above function	"n = 5
k = 2
print(""Value of C(%d,%d) is (%d)"" % (n, k, binomialCoeff(n, k)))
"
of an integer.	"
n = int(input(""Enter an integer:""))
a = []
for i in range(2, n + 1):
	if(n % i == 0):
        a.append(i)
a.sort()
print(""Smallest divisor is:"", a[0])
"
36 python parse datetime from string	"from datetime import datetime


datetime_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')
"
iterate through rows	"for i in range(len(X)):
	
	for j in range(len(X[0])):
        result[i][j] = X[i][j] + Y[i][j]


for r in result:
	print(r)
"
removes leading characters	"word = "" xyz ""
lstrip = word.lstrip()
print(f""String ater removal of leading characters:{lstrip}"")
"
lazy evaluation	"gen_succeeds = (i for i in range(5) for j in 1 / 0)
print('But obviously fails when we iterate ...')
for i in gen_succeeds:
	print(i)
"
Write a python program to perform Vertical Concatenation in Matrix	"
test_list = [[""India"", ""good""], [""is"", ""for""], [""Best""]]
print(""The original list : "" + str(test_list))
res = []
N = 0
while N != len(test_list):
	temp = ''
	for idx in test_list:

        try:
            temp = temp + idx[N]
        except IndexError:
            pass
	res.append(temp)
	N = N + 1

res = [ele for ele in res if ele]

print(""List after column Concatenation : "" + str(res))
"
Write a python program to Count Numbers, Alphabets, and Special Character	"Text = input(""Enter Text: "")
letter, number, spaces, special = 0, 0, 0, 0
for i in Text:
	if i.isalpha():
        letter += 1
	elif i.isspace():
        spaces += 1
	elif i.isnumeric():
        number += 1
	else:
        special += 1
print(
	"" Alphabets = {} \n Numbers = {} \n Space = {} \n Special Chracter = {}"".format(
        letter,
        number,
        spaces,
        special))
"
Write a Python Program to print the LCM of Two Numbers	"

def lcm(a, b):
	lcm.multiple = lcm.multiple + b
	if((lcm.multiple % a == 0) and (lcm.multiple % b == 0)):
        return lcm.multiple
	else:
        lcm(a, b)
	return lcm.multiple


lcm.multiple = 0
a = 4
b = 7
if(a > b):
	LCM = lcm(b, a)
else:
	LCM = lcm(a, b)


print(LCM)
"
Write a function to return the cartisian distance of a point from origin	"def cal_dist_from_orign(x: float, y: float) -> float:
	return (x**2 + y**2)**(1 / 2)
"
Write a python program to flatten  a multidimensional list	"

my_list = [[10, 20, 30], [40, 50, 60], [70, 80, 90]]


flattened = [x for temp in my_list for x in temp]
print(flattened)
"
Write a python to find LCM of two numbers	"a = int(input(""Enter the first number:""))
b = int(input(""Enter the second number:""))
if(a > b):
	min1 = a
else:
	min1 = b
while(1):
	if(min1 % a == 0 and min1 % b == 0):
        print(""LCM is:"", min1)
        break
	min1 = min1 + 1
"
39 how to remove integer from string in python	"s = '12abcd405'
result = ''.join([i for i in s if not i.isdigit()])
"
write a python program to shuffle the items in a list and print it	"from random import shuffle
mylist = [1, 2, 3, 4, 5]
shuffle(mylist)
print(mylist)
"
Write a function that returns the sum of digits of a given number	"

def digisum(num):
	sum_ = 0
	while num > 0:
        dig = num % 10
        sum_ += dig
        num //= 10
	return sum_
"
48 function to show documentation	"def doc_func(*args, **kwargs):
	
	pass
"
"an odd number""."	"def even_or_odd_num(n):
	if n % 2 == 0:
        print(""It is an even number"")
	else:
        print(""It is an odd number"")
"
and its cube in each tuple	"def list_of_tuple(l: list):
	final = [(i, pow(i, 3)) for i in l]
	return final
"
character.	"def ascii_value_of_character(char):
	return ord(char)
"
Add two strings	"def add_str(str1, str2):
	return str1 + str2
"
write a python Program to find area of circle	"

PI = 3.14
radius = float(6)
area = PI * radius * radius
circumference = 2 * PI * radius
print(f'Area Of a Circle {area}')
print(f'Circumference Of a Circle {circumference}')
"
write a python program to check if the list is empty	"

l = []
if not l:
	print(""List is empty"")
else:
	print(""List is not empty"")
"
write a Python program to print all the prime numbers within an interval	"lower = 900
upper = 1000
print(""Prime numbers between"", lower, ""and"", upper, ""are:"")
for num in range(lower, upper + 1):
	if num > 1:
        for i in range(2, num):
            if (num % i) == 0:
                break
        else:
            print(num)
"
Write a Python function to count occurrence of a word in the given text	"def text_searcher(text, word):
	count = 0
	for w in text.split():
        if w == word:
            count = count + 1
	return count
"
Calculate length of a string	"word = ""Hello World""
print(f""Length of string: {len(word)}"")
"
range	"min_value = 10
max_value = 10000
sum_all = sum(i * i for i in range(min_value, max_value))
print(f""{sum_all}"")
"
write a python function to collect data into fixed-length chunks or blocks	"def grouper(iterable, n, fillvalue=None):
	from itertools import zip_longest
	
	args = [iter(iterable)] * n
	return zip_longest(*args, fillvalue=fillvalue)
"
palindrome	"

def has_palindrome_permutation(the_string):
	unpaired_characters = set()

	for char in the_string:
        if char in unpaired_characters:
            unpaired_characters.remove(char)
        else:
            unpaired_characters.add(char)

	return len(unpaired_characters) <= 1
"
26. Python Program to Convert Decimal to Octal	"dec = 344


print(""The decimal value of"", dec, ""is:"")
print(oct(dec), ""in octal."")
"
100 Write a Python class to convert an integer to a roman numeral.	"class Solution:
	def int_to_Roman(self, num):
        val = [
            1000, 900, 500, 400,
            100, 90, 50, 40,
            10, 9, 5, 4,
            1
        ]
        syb = [
            ""M"", ""CM"", ""D"", ""CD"",
            ""C"", ""XC"", ""L"", ""XL"",
            ""X"", ""IX"", ""V"", ""IV"",
            ""I""
        ]
        roman_num = ''
        i = 0
        while num > 0:
            for _ in range(num // val[i]):
                roman_num += syb[i]
                num -= val[i]
            i += 1
        return roman_num
"
This function multiplies two numbers	"def multiply(x, y):
	return x * y
"
given sides.	"def pythagoras(opposite_side, adjacent_side, hypotenuse):
	if opposite_side == str(""x""):
        return ""Opposite = "" + str(((hypotenuse ** 2) - (adjacent_side ** 2)) ** 0.5)
	elif adjacent_side == str(""x""):
        return ""Adjacent = "" + str(((hypotenuse ** 2) - (opposite_side ** 2)) ** 0.5)
	elif hypotenuse == str(""x""):
        return ""Hypotenuse = "" + str(((opposite_side
                                       ** 2) + (adjacent_side ** 2)) ** 0.5)
	else:
        return ""You know the answer!""


print(pythagoras(3, 4, 'x'))
print(pythagoras(3, 'x', 5))
print(pythagoras('x', 4, 5))
print(pythagoras(3, 4, 5))
"
Join Two Sets	"set1 = {""a"", ""b"", ""c""}
set2 = {1, 2, 3}
set3 = set2.union(set1)
print(f""Joined Set:{set3}"")
"
1 write a program to reverse a list	"lst = [11, 5, 17, 18, 23]


def reverse(lst):
	new_lst = lst[::-1]
	return new_lst
"
write a function to accept a simple iterable and print the elements	"

def print_iter(iter):
	for item in iter:
        print(item)
"
write a python function to count how many times the predicate is true	"def quantify(iterable, pred=bool):
	return sum(map(pred, iterable))
"
given number	"

import math


def maxPrimeFactors(n):

	maxPrime = -1

	while n % 2 == 0:
        maxPrime = 2
        n >>= 1

	for i in range(3, int(math.sqrt(n)) + 1, 2):
        while n % i == 0:
            maxPrime = i
            n = n / i

	if n > 2:
        maxPrime = n

	return int(maxPrime)
"
radius & height as input	"def cylinder_surface_area(radius, height):
	surface_area = 3.14 * (radius ** 2) + (2 * 3.14 * radius * height)
	return surface_area
"
Numbers from 1 to N	"

maximum = int(input("" Please Enter any Maximum Value : ""))


for number in range(1, maximum + 1):
	if(number % 2 != 0):
        print(""{0}"".format(number))
"
write a python function to remove last element in the list	"def remove_last_element_list(list1):
	list1.pop()
	return list1
"
"bingo"""	"key_val_map = {
	""key1"": ""length1"",
	""key2"": ""len2"",
	""Hello"": ""hi"",
	""bingo"": ""print bingo""}
for key, val in key_val_map.items():
	if len(val) > len(key):
        print(""Bingo!"")
	else:
        print(""no bingo"")
"
sorting them alphanumerically.	"s = input()
words = [word for word in s.split("" "")]
print("" "".join(sorted(list(set(words)))))
"
operations like depoist, withdrwa, overdrawn	"

class BankAccount(object):
	def __init__(self, account_no, name, initial_balance=0):
        self.account_no = account_no
        self.name = name
        self.balance = initial_balance

	def deposit(self, amount):
        self.balance += amount

	def withdraw(self, amount):
        self.balance -= amount

	def overdrawn(self):
        return self.balance < 0
"
and last characters of a given string.	"def no_of_substring_with_equalEnds(str1):
	result = 0
	n = len(str1)
	for i in range(n):
        for j in range(i, n):
            if (str1[i] == str1[j]):
                result = result + 1
	return result
"
write a program to Pretty Print a dictionary with dictionary values.	"test_dict = {'tsai': {'rate': 5, 'remark': 'good'}, 'cs': {'rate': 3}}
print(""The Pretty Print dictionary is : "")
for sub in test_dict:
	print(f""\n{sub}"")
	for sub_nest in test_dict[sub]:
        print(sub_nest, ':', test_dict[sub][sub_nest])
"
Write a python function to remove an item from list	"def deleteelement(list, item):
	list.remove(item)
	return list
"
Write a python function to check if user provided year is a leap year or not	"

def is_leap(year):
	if (year % 4) == 0:
        if (year % 100) == 0:
            if (year % 400) == 0:
                print(f""{year} is a leap year"")
            else:
                print(f""{year} is not a leap year"")
        else:
            print(f""{year} is a leap year"")
	else:
        print(f""{year} is not a leap year"")
"
write a program to print number of words in a string	"

str1 = 'It is a glorious day'


res = len(str1.split())

print(""The number of words in string are : "" + str(res))
"
write a program to replace multiple words with a single word	"

str1 = 'CoffeeDay is best for coffee and having long conversations'

word_list = [""best"", 'long']

repl_word = 'good'

res = ' '.join(
	[repl_word if idx in word_list else idx for idx in str1.split()])


print(""String after multiple replace : "" + str(res))
"
bases raised to the corresponding number in the index using Python map	"

bases_num = [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
index = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]


def power_base(num1, index1):
	print(""Base numbers abd index: "")
	print(bases_num)
	print(index)
	result = list(map(pow, num1, index1))
	print(""\nPower of said number in bases raised to the corresponding number in the index:"")
	print(result)


power_base(bases_num, index)
"
39 write a python program  to print all pair combinations of two tuples	"

test_tuple1 = (4, 5)
test_tuple2 = (7, 8)

print(""The original tuple 1 : "" + str(test_tuple1))
print(""The original tuple 2 : "" + str(test_tuple2))

res = [(a, b) for a in test_tuple1 for b in test_tuple2]
res = res + [(a, b) for a in test_tuple2 for b in test_tuple1]

print(""The filtered tuple : "" + str(res))
"
numbers from an input list	"

def seperate_pn(l):
	pos_list = []
	neg_list = []
	for _ in l:
        if _ < 0:
            neg_list.append(_)
        else:
            pos_list.append(_)
	return pos_list, neg_list
"
49 Write a generator that returns True / False randomly	"

import random


def generate_tf():
	rand = random.random()
	if rand > 0.5:
        yield True
	else:
        yield False
"
equality operator works this way	"print('256 is 257-1', 256 is 257 - 1)
print('257 is 258-1', 257 is 258 - 1)
print('-5 is -6+1', -5 is -6 + 1)
print('-7 is -6-1', -7 is -6 - 1)
"
Write a Python function to convert height (in feet and inches) to centimeters	"def height_converter(h_ft, h_inch):
	h_inch += h_ft * 12
	h_cm = round(h_inch * 2.54, 1)
	return h_cm
"
Given an input string, count occurrences of all characters within a string	"str1 = ""Apple""
countDict = dict()
for char in str1:
	count = str1.count(char)
	countDict[char] = count
print(countDict)
"
provided radius	"

def area_of_circle(radius):
	PI = 3.14
	radius = float(radius)
	area = PI * radius * radius
	circumference = 2 * PI * radius
	print(f'Area Of a Circle {area}')
	print(f'Circumference Of a Circle {circumference}')
"
66 write a python program  to Remove dictionary Key Words and print it	"

test_str = 'gfg is best for geeks'
print(""The original string is : "" + str(test_str))
test_dict = {'geeks': 1, 'best': 6}
l = test_str.split()
print(l)
s = ''
for i in l:
	if i in test_dict:
        l.remove(i)
print("" "".join(i for i in l))
"
Recursion	"

def sum1(lst):
	total = 0
	for element in lst:
        if (type(element) == type([])):
            total = total + sum1(element)
        else:
            total = total + element
	return total
"
Count the number of spaces in a sring	"s = ""Count, the number of spaces""
lenx = s.count(' ')
print(f""number of spaces in sring: {lenx}"")
"
Write a Python program to typecast given input to integer	"num = int(input(""Input a value: ""))
print(num)
"
write a function to remove i-th indexed character in a given string	"

def remove_char(string, i):

	str1 = string[: i]

	str2 = string[i + 1:]

	return str1 + str2
"
Write a function to return reverse of a list	"

def reverse_list(l1: list) -> list:
	return l1[::-1]
"
write a python program to check name exists in given list	"

names1 = ['Amir', 'Bala', 'Chales']
for n in names1:
	name = n.lower()
	if 'amir' == name:
        print('Yes name exists:', name)
	else:
        print('No')
"
Write a function that returns runs a garbage collector	"def clear_memory():
	import gc
	gc.collect()
"
Calculate length of a string	"word = ""Hello World""
print(f""Length of string: {len(word)}"")
"
Write a program to reverse the key and item mapping	"

sample_dict = {1: 'Seeta', 2: 'Geeta', 3: 'Babita'}


print(""The original dictionary : "" + str(sample_dict))


sample_dict = {v: k for k, v in sample_dict.items()}


print(""Inverse mapped dictionary : "", str(sample_dict))
"
Write a python program to digit sum of a number	"Digits = input(""Enter a number: "")
sum = int(Digits[0])
number = Digits[0]
for i in Digits[1::]:
	sum += int(i)
	number += "" + {}"".format(i)
print(""Sum of {} is {}"".format(number, sum))
"
6 write a function to print merger of two dictionary	"def merge_dict(dict1: dict, dict2: dict):
	
	final_dict = {**dict1, **dict2}
	print(final_dict)
"
write a python program to count the number of each vowels	"

vowels = 'aeiou'


ip_str = 'Hello, have you tried our tutorial section yet?'


ip_str = ip_str.casefold()


count = {}.fromkeys(vowels, 0)


for char in ip_str:
	if char in count:
        count[char] += 1


print(count)
"
Given a Python list, remove all occurrence of a given number from the list	"num1 = 20
list1 = [5, 20, 15, 20, 25, 50, 20]


def removeValue(sampleList, val):
	return [value for value in sampleList if value != val]


resList = removeValue(list1, num1)
print(resList)
"
Write a function to print a string by repeating it n times	"

def print_repeatnstring(text: str, n: int) -> str:
	return text * n
"
Write a Python function to print number with commas as thousands separators	"def formattedNumber(n):
	return (""{:,}"".format(n))
"
Write a function that returns a list sorted ascending	"def ascending_sort(l: list):
	sorted(l, reverse=False)
"
"we should better create ""new"" objects:"	"my_list2 = [[1, 2, 3] for i in range(2)]
print('initially:  ---> ', my_list2)
"
"Write a python program to filter names not starting with ""a"""	"names = ['austin', 'penny', 'anthony', 'rihana', 'billy', 'angel']
a_names = list(filter(lambda name: name[0] == 'a', names))
print(a_names)
"
from user.	"def symmetric_diff_sets():
	M, m = input(), set(list(map(int, input().split())))
	N, n = input(), set(list(map(int, input().split())))
	s = sorted(list(m.difference(n)) + list(n.difference(m)))
	for i in s:
        print(i)
"
Write a function to calculate compound interest, given p, r, t	"

def comp_int(p, r, t):
	amount = p * (1 + (r / 100))**t
	interest = amount - p
	return interest
"
Driver Code	"if __name__ == '__main__':

	string = ""HellowWorld""

	
	i = 5

	
	print(remove(string, i))
"
write a program to find ceil of a number	"import math


number = 34.564
ce = math.ceil(number)
print('Ceil', ce)
"
27 write a python funtion to execute bash commands	"import subprocess
subprocess.call([""sudo"", ""apt"", ""update""])
"
doesn't occur twice.	"def single_number(arr):
	result = 0
	for i in arr:
        result ^= i
	return result
"
write a python program to check string istitle	"

str1 = 'Hello!2@#World'
if str1.istitle():
	print('Yes string is title')
"
List using map() + lambda	"

test_list = ['Manjeets', 'Akashs', 'Akshats', 'Nikhils']


print(""The original list : "" + str(test_list))


K = 4


res = list(map(lambda i: i[: (len(i) - K)], test_list))


print(""The list after removing last characters : "" + str(res))
"
a sentence	"sentence = 'this is my sentence and i will write it my way'
minlength = 3
result = [word for word in sentence.split(' ') if len(word) >= minlength]
"
write a python function to generate random number between a  given range	"import random


def get_weather_data(min, max):
	return random.randrange(min, max)


rand_num = get_weather_data(11, 20)
print(f""{rand_num}"")
"
Write a function to return the area of a right angle triangle	"

def cal_rt_triangle_area(base: float, height: float) -> float:
	if base and height:
        return (base * height) / 2
	else:
        return None
"
square, and cube of the number	"def square_cube(number):
	print(number ** 2)
	print(number ** 3)
"
test if string contains digits	"word = ""Hello World""
check = word.isdigit()
print(f""String contains digits?:{check}"")
"
5 add a third dimension matrix dataset python	"x = ['2D_matrix']  
"
for a radius	"class CircleArea:
	def __init__(self, radius):
        self.radius = radius

	def area(self):
        return math.pi * self.radius * self.radius


r = 2
obj = CircleArea(r)
print(""Area of circle:"", obj.area())
"
Please write a program to print Python built-in functions document of int()	"print(int.__doc__)
"
write a function to reverse words of string	"

def rev_sentence(sentence):

	words = sentence.split(' ')

	reverse_sentence = ' '.join(reversed(words))

	return reverse_sentence
"
89 write a program to find winner of the day	"

def find_winner_of_the_day(*match_tuple):
	team1_count = 0
	team2_count = 0

	for team_name in match_tuple:

        if team_name == ""Team1"":
            team1_count += 1
        else:
            team2_count += 1

	if team1_count == team2_count:
        return ""Tie""

	elif team1_count > team2_count:
        return ""Team1""

	else:
        return ""Team2""


if __name__ == ""__main__"":

	print(find_winner_of_the_day(""Team1"", ""Team2"", ""Team1""))
	print(find_winner_of_the_day(""Team1"", ""Team2"", ""Team1"", ""Team2""))
	print(find_winner_of_the_day(""Team1"", ""Team2"", ""Team2"", ""Team1"", ""Team2""))
"
write a python program to use string replace	"

print('abcdef12'.replace('cd', '12'))
"
write a program to print ascii code of a character	"

x = '5'
print(ord(x))
"
Write a function to return the volume of a cylinder	"def cal_cylinder_volume(height, radius):
	pi = 3.14
	return pi * (radius**2) * height
"
Convert dictionary to JSON	"import json
person_dict = {'name': 'Bob',
               'age': 12,
               'children': None
               }
person_json = json.dumps(person_dict)
print(person_json)
"
44 write a  Python function to find intersection of two sorted arrays	"def printIntersection(arr1, arr2, m, n):
	i, j = 0, 0
	while i < m and j < n:
        if arr1[i] < arr2[j]:
            i += 1
        elif arr2[j] < arr1[i]:
            j += 1
        else:
            print(arr2[j])
            j += 1
            i += 1


arr1 = [1, 2, 4, 5, 6]
arr2 = [2, 3, 5, 7]
m = len(arr1)
n = len(arr2)
printIntersection(arr1, arr2, m, n)
"
Print the final dictionary	"
test_list = [2323, 82, 129388, 234, 95]

print(""The original list is : "" + str(test_list))

res = dict()
for ele in test_list:

	mid_idx = len(str(ele)) // 2
	key = int(str(ele)[:mid_idx])
	val = int(str(ele)[mid_idx:])

	res[key] = val

print(""Constructed Dictionary : "" + str(res))
"
write a python program to print 5 random vowels	"import random
vowels = ['a', 'e', 'i', 'o', 'u']
print([random.choice(vowels) for _ in range(5)])
"
and width are given.	"h = 12
w = 11
area = 0.5 * h * w
print(area)
"
Write a function to adds two lists element wise only if numbers are even	"def adds_listevenelements(l1: list, l2: list):
	return [i + j for i, j in zip(l1, l2) if i * j % 2 == 0]
"
velocity u, time t and acceleration a	"def cal_final_velocity(
	initial_velocity: float,
	accelration: float,
        time: float) -> float:
	return initial_velocity + accelration * time
"
write a python function to get HTML code for a given URL	"def get_html(url=""http://www.python.org""):
	import urllib.request

	fp = urllib.request.urlopen(url)
	mybytes = fp.read()
	mystr = mybytes.decode(""utf8"")
	fp.close()
	print(mystr)
"
15 how to add extra zeros after decimal in python	"format(2.0, '.6f')

"
x and y given a variable t	"def linear_interpolate(x, y, t):
	if(t >= 1 or t <= 0):
        raise ValueError
	return t * x + (1 - t) * y
"
Numeric Strings Using lambda + filter() + isdigit()	"test_list = [(""45"", ""86""), (""Gfg"", ""1""), (""98"", ""10""), (""Gfg"", ""Best"")]
print(""The original list is : "" + str(test_list))
res = list(filter(lambda sub: all(ele.isdigit() for ele in sub), test_list))
print(""Filtered Tuples : "" + str(res))
"
[2,4,6,8] is even.	"li = [2, 4, 6, 8]
for i in li:
	assert i % 2 == 0
"
create a dictionary to show the count of each elemen	"sampleList = [11, 45, 8, 11, 23, 45, 23, 45, 89]
countDict = dict()
for item in sampleList:
	if(item in countDict):
        countDict[item] += 1
	else:
        countDict[item] = 1

print(""Printing count of each item  "", countDict)
"
Write a python program to Check and print if string is palindrome using Stack	"

class Stack:
	def __init__(self):
        self.items = []

	def is_empty(self):
        return self.items == []

	def push(self, data):
        self.items.append(data)

	def pop(self):
        return self.items.pop()


s = Stack()
text = ""ABA""

for character in text:
	s.push(character)

reversed_text = ''
while not s.is_empty():
	reversed_text = reversed_text + s.pop()

if text == reversed_text:
	print('The string is a palindrome.')
else:
	print('The string is not a palindrome.')
"
write a python program to clear a list	"given_list -= [6, 0, 4, 1]
given_list.clear()
"
order of the input list.	"def rearrange(lst):
	leftMostPosEle = 0  
	
	for curr in range(len(lst)):
        
        if (lst[curr] < 0):
            
            if (curr is not leftMostPosEle):
                
                lst[curr], lst[leftMostPosEle] = lst[leftMostPosEle], lst[curr]
            
            leftMostPosEle += 1
	return lst
"
Python program to convert time from 12 hour to 24 hour format	"def convert24(str1):
	if str1[-2:] == ""AM"" and str1[:2] == ""12"":
        return ""00"" + str1[2:-2]
	elif str1[-2:] == ""AM"":
        return str1[:-2]

	elif str1[-2:] == ""PM"" and str1[:2] == ""12"":
        return str1[:-2]
	else:
        return str(int(str1[:2]) + 12) + str1[2:8]


print(convert24(""08:05:45 PM""))
"
write a python function to prepend a single value in front of an iterator	"def prepend(value, iterator):
	import itertools
	return itertools.chain([value], iterator)
"
keep only the items that are present in both sets	"x = {""apple"", ""banana"", ""cherry""}
y = {""google"", ""microsoft"", ""apple""}


x.intersection_update(y)
print(f""Duplicate Value in Two set:{x}"")
"
write a program to print number of words in a string	"

str1 = 'It is a glorious day'


res = len(str1.split())

print(""The number of words in string are : "" + str(res))
"
37 function to add two tuple	"def add_tuple(tup1, tup2):
	return tup1 + tup2
"
Write a python function to count the number of Words in a Text File	"def check_words():
	fname = input(""file name: "")
	num_words = 0
	with open(fname, 'r') as f:
        for line in f:
            words = line.split()
            num_words += len(words)
	print(""Number of words = "", num_words)
"
an integer.	"def countSetBits(n):
	count = 0
	while (n):
        count += n & 1
        n >>= 1
	return count
"
Write a python function to convert a string to a list	"def convert_str_to_list(string):
	return string.split(' ')
"
Occurs in a List	"

a = [2, 3, 8, 9, 2, 4, 6]
k = 0
num = int(input(""Enter the number to be counted:""))
for j in a:
	if(j == num):
        k = k + 1
print(""Number of times"", num, ""appears is"", k)
"
list for the below list	"

def selection_sort(alist):
	for i in range(0, len(alist) - 1):
        smallest = i
        for j in range(i + 1, len(alist)):
            if alist[j] < alist[smallest]:
                smallest = j
        alist[i], alist[smallest] = alist[smallest], alist[i]


alist = [2, 3, 5, 6, 4, 5]
selection_sort(alist)
print('Sorted list: ', end='')
print(alist)
"
class with key generation, using cryptography module	"class Secure:
	def __init__(self):
        
        key = Fernet.generate_key()
        with open(""secret.key"", ""wb"") as key_file:
            key_file.write(key)

	@ staticmethod
	def load_key():
        
        return open(""secret.key"", ""rb"").read()

	def encrypt_message(self, message):
        
        key = self.load_key()
        encoded_message = message.encode()
        f = Fernet(key)
        encrypted_message = f.encrypt(encoded_message)
        print(""\nMessage has been encrypted: "", encrypted_message)
        return encrypted_message

	def decrypt_message(self, encrypted_message):
        
        key = self.load_key()
        f = Fernet(key)
        decrypted_message = f.decrypt(encrypted_message)
        print(""\nDecrypted message:"", decrypted_message.decode())


s = Secure()
encrypted = s.encrypt_message(""My deepest secret!"")
s.decrypt_message(encrypted)
"
Write a function to Check whether following json is valid or invalid	"import json


def validateJSON(jsonData):
	try:
        json.loads(jsonData)
	except ValueError as err:
        return False
	return True
"
dictionary and value of the second dictionary	"test_dict1 = {""tsai"": 20, ""is"": 36, ""best"": 100}
test_dict2 = {""tsai2"": 26, ""is2"": 19, ""best2"": 70}
keys1 = list(test_dict1.keys())
vals2 = list(test_dict2.values())
res = dict()
for idx in range(len(keys1)):
	res[keys1[idx]] = vals2[idx]
print(""Mapped dictionary : "" + str(res))
"
Write a Python function to return Padovan's Sequence	"def padovan_seq(n):
	if n >= 0:
        if n in {0, 1, 2}:
            return 1
        else:
            return padovan_seq(n - 3) + padovan_seq(n - 2)
"
write a program to print even length words in a string	"

str1 = ""I am doing fine""
s = str1.split(' ')
for word in s:
	if len(word) % 2 == 0:
        print(word)
"
python code to print all possible subarrays using recursion	"

def printSubArrays(arr, start, end):
	if end == len(arr):
        return
	elif start > end:
        return printSubArrays(arr, 0, end + 1)
	else:
        print(arr[start:end + 1])
        return printSubArrays(arr, start + 1, end)


arr = [1, 2, 3]
printSubArrays(arr, 0, 0)
"
write program to convert string to upper case	"st = ""ammar adil""


upper_st = st.upper()
print(""Upper Case"", upper_st)
"
and capitalize	"

def string_opertaion(st, conversion):
	if(conversion == 'lower'):
        return(st.lower())
	elif(conversion == 'upper'):
        return(st.upper())
	else:
        return(st.capitalize())


string_opertaion('AwesOME', None)
"
usage of kwargs	"def b_func(**kwargs):
	print('type of kwargs:', type(kwargs))
	print('kwargs contents: ', kwargs)
	print('value of argument a:', kwargs['a'])


b_func(a=1, b=2, c=3, d=4)
"
random choice	"

a, b, c = float, int, str
for i in range(5):
	j = choice([a, b, c])(i)
	print(j, type(j))
"
Write a python function to generate a random password	"

import random


LOWERCASE_CHARS = tuple(map(chr, range(ord('a'), ord('z') + 1)))
UPPERCASE_CHARS = tuple(map(chr, range(ord('A'), ord('Z') + 1)))
DIGITS = tuple(map(str, range(0, 10)))
SPECIALS = ('!', '@', '#', '$', '%', '^', '&', '*')


SEQUENCE = (LOWERCASE_CHARS,
            UPPERCASE_CHARS,
            DIGITS,
            SPECIALS,
            )


def generate_random_password(total, sequences):
	r = _generate_random_number_for_each_sequence(total, len(sequences))

	password = []
	for (population, k) in zip(sequences, r):
        n = 0
        while n < k:
            position = random.randint(0, len(population) - 1)
            password += population[position]
            n += 1
	random.shuffle(password)

	while _is_repeating(password):
        random.shuffle(password)

	return ''.join(password)


def _generate_random_number_for_each_sequence(total, sequence_number):
	
	current_total = 0
	r = []
	for n in range(sequence_number - 1, 0, -1):
        current = random.randint(1, total - current_total - n)
        current_total += current
        r.append(current)
	r.append(total - sum(r))
	random.shuffle(r)

	return r


def _is_repeating(password):
	
	n = 1
	while n < len(password):
        if password[n] == password[n - 1]:
            return True
        n += 1
	return False


if __name__ == '__main__':
	print(generate_random_password(random.randint(6, 30), SEQUENCE))
"
41 write a program to find area of a triangle	"

a = float(input('Enter first side: '))
b = float(input('Enter second side: '))
c = float(input('Enter third side: '))

s = (a + b + c) / 2

area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
print('The area of the triangle is %0.2f' % area)
"
another nested list and print the output.	"def checkSubset(input_list1, input_list2):
	return all(map(input_list1.__contains__, input_list2))


list1 = [[1, 3], [5, 7], [9, 11], [13, 15, 17]]
list2 = [[1, 3], [13, 15, 17]]
print(""Original list:"")
print(list1)
print(list2)
print(""\nIf the one of the said list is a subset of another.:"")
print(checkSubset(list1, list2))
"
Write a python program to implement a Stack using One Queue	"

class Stack:
	def __init__(self):
        self.q = Queue()

	def is_empty(self):
        return self.q.is_empty()

	def push(self, data):
        self.q.enqueue(data)

	def pop(self):
        for _ in range(self.q.get_size() - 1):
            dequeued = self.q.dequeue()
            self.q.enqueue(dequeued)
        return self.q.dequeue()


class Queue:
	def __init__(self):
        self.items = []
        self.size = 0

	def is_empty(self):
        return self.items == []

	def enqueue(self, data):
        self.size += 1
        self.items.append(data)

	def dequeue(self):
        self.size -= 1
        return self.items.pop(0)

	def get_size(self):
        return self.size


s = Stack()

print('Menu')
print('push <value>')
print('pop')
print('quit')

while True:
	do = input('What would you like to do? ').split()

	operation = do[0].strip().lower()
	if operation == 'push':
        s.push(int(do[1]))
	elif operation == 'pop':
        if s.is_empty():
            print('Stack is empty.')
        else:
            print('Popped value: ', s.pop())
	elif operation == 'quit':
        break
"
write a program to print length of a string	"

str1 = ""great way to learn!""
print(len(str1))
"
write a python program to explain the generator	"def f11(x):
	yield x + 1


g = f11(8)
print(next(g))
"
write a python program to display the Fibonacci sequence up to n-th term	"nterms = int(input(""How many terms? ""))


n1, n2 = 0, 1
count = 0


if nterms <= 0:
	print(""Please enter a positive integer"")
elif nterms == 1:
	print(""Fibonacci sequence upto"", nterms, "":"")
	print(n1)
else:
	print(""Fibonacci sequence:"")
	while count < nterms:
        print(n1)
        nth = n1 + n2
        n1 = n2
        n2 = nth
        count += 1
"
22.  Python Program to Find the Sum of Natural Numbers	"num = 16


if num < 0:
	print(""Enter a positive number"")
else:
	sum = 0
	while(num > 0):
        sum += num
        num -= 1
	print(""The sum is"", sum)
"
of the array should be i*j.	"input_str = raw_input()
dimensions = [int(x) for x in input_str.split(',')]
rowNum = dimensions[0]
colNum = dimensions[1]
multilist = [[0 for col in range(colNum)] for row in range(rowNum)]
for row in range(rowNum):
	for col in range(colNum):
        multilist[row][col] = row * col
print(multilist)
"
Write a Python function to interchange first and last elements in a list	"def swapList(newList):
	size = len(newList)
	temp = newList[0]
	newList[0] = newList[size - 1]
	newList[size - 1] = temp
	return newList
"
Write a function to return the cartisian distance between two points	"def cal_cart_distance(x1: float, y1: float, x2: float, y2: float) -> float:
	return ((x1 - x2)**2 + (y1 - y2)**2)**(1 / 2)
"
latitude and longitude.	"from math import radians, sin, cos, acos


print(""Input coordinates of two points:"")
slat = radians(float(input(""Starting latitude: "")))
slon = radians(float(input(""Ending longitude: "")))
elat = radians(float(input(""Starting latitude: "")))
elon = radians(float(input(""Ending longitude: "")))


dist = 6371.01 * acos(sin(slat) * sin(elat) + cos(slat)
                      * cos(elat) * cos(slon - elon))
print(""The distance is %.2fkm."" % dist)
"
into a dictioinary	"def list_to_dict(list1, list2):
	return dict(zip(list1, list2))
"
Addition of two vector	"v1 = [1, 2, 3]
v2 = [1, 2, 3]
s1 = [0, 0, 0]


for i in range(len(v1)):
	s1[i] = v1[i] + v2[i]
print(f""New Vector:{s1}"")
"
write a python program to check if a string is palindrome or not	"

my_str = 'aIbohPhoBiA'


my_str = my_str.casefold()
rev_str = reversed(my_str)


if list(my_str) == list(rev_str):
	print(""The string is a palindrome."")
else:
	print(""The string is not a palindrome."")
"
write a python program to print the ascii value of a string	"print([ord(ch) for ch in 'abc'])
"
Write a Python Program to Convert Binary to Gray Code	"

def binary_to_gray(n):
	
	n = int(n, 2)
	n ^= (n >> 1)

	return bin(n)[2:]
"
Write a python Class to calculate area of a rectangle and print the area	"

class rectangle():
	def __init__(self, breadth, length):
        self.breadth = breadth
        self.length = length

	def area(self):
        return self.breadth * self.length


a = 6
b = 4
obj = rectangle(a, b)
print(""Area of rectangle:"", obj.area())
"
and compute their sum and then print it in console.	"def sum_of_ints(s1, s2):
	print(int(s1) + int(s2))
"
itertools.product(*args, **kwds)	"def random_product(*args, repeat=1):
	import random
	pools = [tuple(pool) for pool in args] * repeat
	return tuple(map(random.choice, pools))
"
last modified date	"import glob
import os
import time


def retrieve_files_bydate(src_dir_path, *args):
	if(os.path.exists(src_dir_path) == False):
        print(""Destination Path doesn't exist"")
        return
	files_in_dir = glob.glob(src_dir_path + ""/*.*"")
	if (len(files_in_dir) <= 0):
        print(""No files present in:"", src_dir_path)
        return
	file_date_list = [
        (filename, time.ctime(os.path.getmtime(filename)))
        for filename in files_in_dir]
	return file_date_list
"
35. Python Program to Compute LCM Using GCD	"def compute_gcd(x, y):
	while(y):
        x, y = y, x % y
	return x


def compute_lcm(x, y):
	lcm = (x * y) // compute_gcd(x, y)
	return lcm


num1 = 54
num2 = 24
print(""The L.C.M. is"", compute_lcm(num1, num2))
"
get the username from a prompt	"username = input(""Login: >> "")
"
Write a function to return the lateral surface area of a cone	"def cal_cone_lateral_surf_area(height, radius):
	pi = 3.14
	return pi * radius * (((height**2) + (radius**2))**(1 / 2))
"
whether they guessed too low, too high, or exactly right.	"import random
import math


x = math.floor((random.random() * 10) + 1)
guess = 0
while guess != x:
	guess = int(input(""Guess a number: ""))
	if(guess == x):
        print(""you got It!"")
        print(""Number is "", x)
        break
	elif(guess > x):
        print(""You Guesses too high!"")
	else:
        print(""You guessed too low!"")
"
write a python function that returns the lcm of two numbers	"def lcm(x, y):
	if x > y:
        greater = x
	else:
        greater = y

	while(True):
        if((greater % x == 0) and (greater % y == 0)):
            lcm = greater
            break
        greater += 1

	return lcm
"
'interval' seconds	"def get_btc_price(interval=5):
	import requests
	import json
	from time import sleep

	def getBitcoinPrice():
        URL = ""https://www.bitstamp.net/api/ticker/""
        try:
            r = requests.get(URL)
            priceFloat = float(json.loads(r.text)[""last""])
            return priceFloat
        except requests.ConnectionError:
            print(""Error querying Bitstamp API"")

	while True:
        print(""Bitstamp last price: US $ "" + str(getBitcoinPrice()) + ""/BTC"")
        sleep(interval)
"
write a program to split a string into a list where each line is a list item	"txt = ""Thank you for the music\nWelcome to the jungle""
x = txt.splitlines()
print(x)
"
49 write a python funvtion to print the merge sort algorithm in python	"def mergeSort(myList):
	if len(myList) > 1:
        mid = len(myList) // 2
        left = myList[:mid]
        right = myList[mid:]

        mergeSort(left)
        mergeSort(right)

        i = 0
        j = 0
        k = 0

        while i < len(left) and j < len(right):
            if left[i] < right[j]:
                myList[k] = left[i]
                i += 1
            else:
                myList[k] = right[j]
                j += 1
            k += 1

        while i < len(left):
            myList[k] = left[i]
            i += 1
            k += 1

        while j < len(right):
            myList[k] = right[j]
            j += 1
            k += 1


myList = [54, 26, 93, 17, 77, 31, 44, 55, 20]
mergeSort(myList)
"
and prints it	"hexadecimal_num = 'FF'
decimal_num = int(hexadecimal_num, 16)
print(decimal_num)
"
Write a function to calculate and return the average of input numbers	"

def calc_avg(*args):
	if len(args) > 0:
        return sum(args) / len(args)
	return None
"
the sum of three numbers equal to zero.	"def three_Sum(num):
	if len(num) < 3:
        return []
	num.sort()
	result = []
	for i in range(len(num) - 2):
        left = i + 1
        right = len(num) - 1
        if i != 0 and num[i] == num[i - 1]:
            continue
        while left < right:
            if num[left] + num[right] == -num[i]:
                result.append([num[i], num[left], num[right]])
                left = left + 1
                right = right - 1
                while num[left] == num[left - 1] and left < right:
                    left = left + 1
                while num[right] == num[right + 1] and left < right:
                    right = right - 1
            elif num[left] + num[right] < -num[i]:
                left = left + 1
            else:
                right = right - 1
	return result
"
Generate a random date between given start and end dates	"import random
import time


def getRandomDate(startDate, endDate):
	print(""Printing random date between"", startDate, "" and "", endDate)
	randomGenerator = random.random()
	dateFormat = '%m/%d/%Y'

	startTime = time.mktime(time.strptime(startDate, dateFormat))
	endTime = time.mktime(time.strptime(endDate, dateFormat))

	randomTime = startTime + randomGenerator * (endTime - startTime)
	randomDate = time.strftime(dateFormat, time.localtime(randomTime))
	return randomDate


print(""Random Date = "", getRandomDate(""1/1/2016"", ""12/12/2018""))
"
Write a Python program to print Square root of matrix elements	"mat1 = np.array([[10, 20, 30], [40, 50, 60], [70, 80, 90]])
print(np.sqrt(mat1))
"
Write a Python Program to Swap the First and Last Value of a List	"

a = [2, 3, 8, 9, 2, 4, 6]
n = len(a)
temp = a[0]
a[0] = a[n - 1]
a[n - 1] = temp
print(""New list is:"")
print(a)
"
write a Python program to calculate simple interest	"

p = 10000
t = 6
r = 8
si = (p * t * r) / 100
print(f'Simple interest is {si}')
"
write a python program that converts a binary number to decimal and prints it	"binary_num = '1010101'
decimal_num = int(binary_num, 2)
print(decimal_num)
"
Write a Python program to find the second smallest number in a list	"def second_smallest(numbers):
	a1, a2 = float('inf'), float('inf')
	for x in numbers:
        if x <= a1:
            a1, a2 = x, a1
        elif x < a2:
            a2 = x
	return a2


print(second_smallest([1, 2, -8, -2, 0]))
"
write a function to replace all occurances of a substring in a string	"

str1 = ""Hello! It is a Good thing""
substr1 = ""Good""
substr2 = ""bad""


replaced_str = str1.replace(substr1, substr2)


print(""String after replace :"" + str(replaced_str))
"
temperature value and its unit	"

def temp_converter(value, unit):
	if unit == 'F' and value in range(32, 212):
        converts = (value - 32) * 5.0 / 9.0
        return converts
	elif unit == 'C' and value in range(0, 100):
        converts = (9.0 / 5.0) * value + 32
        return converts
	else:
        raise ValueError
"
78 write a python program to decrement Dictionary value by K	"

test_dict = {'gfg': 1, 'is': 2, 'for': 4, 'CS': 5}
print(""The original dictionary : "" + str(test_dict))
K = 5
for key, value in test_dict.items():
	test_dict.update({key: value - K})
print(test_dict)
"
lowercase letters	"

print(""Input a string: "")
str1 = input()


no_of_ucase, no_of_lcase = 0, 0


for c in str1:
	if c >= 'A' and c <= 'Z':
        no_of_ucase += 1
	if c >= 'a' and c <= 'z':
        no_of_lcase += 1


print(""Input string is: "", str1)
print(""Total number of uppercase letters: "", no_of_ucase)
print(""Total number of lowercase letters: "", no_of_lcase)
"
Write a function to return the perimeter of a rectangle	"def cal_perimeter_rect(length, bredth):
	return 2 * (length + bredth)
"
Write a Python Program to Remove the Given Key from a Dictionary	"

def remove_item_dict(d, key):
	if key in d:
        del d[key]
	else:
        print(""Key not found!"")
        exit(0)
"
70 write a program to display the powers of 2 using anonymous function	"

terms = 10
result = list(map(lambda x: 2 ** x, range(terms)))


print(""The total terms are:"", terms)
for i in range(terms):
	print(""2 raised to power"", i, ""is"", result[i])
"
write a python program to print the character of an ASCII value	"value = 65
print(f'The ASCII value {value} is of the character {chr(value)}')
"
four of the five integers.	"def min_max():
	nums = [int(x) for x in input().strip().split(' ')]
	print(sum(nums) - max(nums), sum(nums) - min(nums))
"
100 and 200 inclusive.	"import random
print(random.sample([i for i in range(100, 201) if i % 2 == 0], 5))
"
67 write a python program to group Strings on Kth character and print it	"
test_list = [""gfg"", ""is"", ""best"", ""for"", ""geeks""]
print(""The original list is : "" + str(test_list))
K = 2
d = {}
for i in test_list:
	d.update({i[K - 1]: [i]})
print(d)
"
Write a function to return the surface area of a sphere	"def cal_area_sphere(radius):
	pi = 3.14
	return 4 * pi * (radius**2)
"
write a python program to extract the file name and extension of a file	"import os
filename, extension = os.path.splitext('/path/to/some/file.ext')
"
89 fibonaaci using generator	"def fibo(n):
	x = 0
	yield x
	y = 1
	yield y
	for i in range(n - 1):
        x, y = y, x + y
        yield y
"
write a python function that returns the square of a given input number	"def square(x):
	return x**2
"
words	"

s1 = input(""Enter string "")
print(""Count of words"", len(s1.split()))
"
Calculate number of days between two given dates	"from datetime import datetime


date_1 = datetime(2020, 2, 25).date()
date_2 = datetime(2020, 9, 17).date()
delta = None
if date_1 > date_2:
	delta = date_1 - date_2
else:
	delta = date_2 - date_1
print(""Difference is"", delta.days, ""days"")
"
write a python program to add an element to a list. Print the final list.	"lst = [""Jon"", ""Kelly"", ""Jessa""]
lst.append(""Scott"")
print(lst)
"
write a function to find all urls in a given string	"

import re


def find_urls(string):

	regex = r""(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\"".,<>?«»“”‘’]))""
	url = re.findall(regex, string)
	return [x[0] for x in url]
"
write a python generator function for generating Fibonacci Numbers	"def fib(limit):
	a, b = 0, 1
	while a < limit:
        yield a
        a, b = b, a + b
"
is achived re	"

def findTargetSumWays(nums, S):
	count = 0

	def calculate(nums, i, sum, S):
        nonlocal count
        if i == len(nums):
            if sum == S:
                count += 1
        else:
            calculate(nums, i + 1, sum + nums[i], S)
            calculate(nums, i + 1, sum - nums[i], S)

	calculate(nums, 0, 0, S)
	return count
"
function needs to print the last 5 elements in the list.	"

import requests


def get_status(url):
	data = requests.get(url)
	return data.status_code
"
Write a function to return the area of a rhombus with diagonals q1 and q2	"def cal_area_rhombus(q1, q2):
	return (q1 * q2) / 2
"
Write a function to convert Kilometers to Miles	"def Kilometers_to_Miles(km):
	conv_fac = 0.621371
	miles = km * conv_fac
	return miles
"
for the below list	"

def heapsort(alist):
	build_max_heap(alist)
	for i in range(len(alist) - 1, 0, -1):
        alist[0], alist[i] = alist[i], alist[0]
        max_heapify(alist, index=0, size=i)


def parent(i):
	return (i - 1) // 2


def left(i):
	return 2 * i + 1


def right(i):
	return 2 * i + 2


def build_max_heap(alist):
	length = len(alist)
	start = parent(length - 1)
	while start >= 0:
        max_heapify(alist, index=start, size=length)
        start = start - 1


def max_heapify(alist, index, size):
	l = left(index)
	r = right(index)
	if (l < size and alist[l] > alist[index]):
        largest = l
	else:
        largest = index
	if (r < size and alist[r] > alist[largest]):
        largest = r
	if (largest != index):
        alist[largest], alist[index] = alist[index], alist[largest]
        max_heapify(alist, largest, size)


alist = [2, 3, 5, 6, 4, 5]
heapsort(alist)
print('Sorted list: ', end='')
print(alist)
"
10 limit decimals to only two decimals in python	"answer = str(round(answer, 2))
"
34 write a program to generate a random number between two ranges	"

import random


def rand_range(low, high):
	return random.randrange(low, high)
"
given data or not	"def check_sha256_hash(hashed, data):
	import hashlib
	return True if hashed == hashlib.sha256(data.encode()).hexdigest() else False
"
write a program to print words frequncy in a given string	"

test_str = ""It is a great meal at a great restaurant on a great day""
print(""Original String: "" + str(test_str))
res = {key: test_str.count(key) for key in test_str.split()}
print(""The words frequency: "" + str(res))
"
Write a Python program to print rank of an array/ matrix	"import numpy as np
A = np.array([[4, 5, 8], [7, 1, 4], [5, 5, 5], [2, 3, 6]])
print(""Rank of the matrix A: "", np.linalg.matrix_rank(A))
"
Keep All items from List But NOT the Duplicates	"x = {""apple"", ""banana"", ""cherry""}
y = {""google"", ""microsoft"", ""apple""}


x.symmetric_difference_update(y)
print(f""Duplicate Value in Two set:{x}"")
"
returns the list and the deleted element	"def delete_last_element(list_to_be_processed):
	deleted_element = list_to_be_processed.pop()
	return list_to_be_processed, deleted_element
"
write a python snippet to convert list into indexed tuple	"test_list = [4, 5, 8, 9, 10]
list(zip(range(len(test_list)), test_list))
"
Prints ten dots	"ten = ""."" * 10
print(f""Ten dots: {ten}"")
"
95  write a program to Split tuple into groups of n and print it	"

ini_tuple = (1, 2, 3, 4, 8, 12, 3, 34,
             67, 45, 1, 1, 43, 65, 9, 10)
n = 4
N = 0
s = tuple()
for i in range(0, len(ini_tuple) // n):
	t = tuple()
	for j in range(N, N + n):
        t += (ini_tuple[j],)
	N = N + n
	s += (t,)
print(s)
"
Write a Python function to compute compound interest	"def compound_interest(principle, rate, time):
	Amount = principle * (pow((1 + rate / 100), time))
	CI = Amount - principle
	return CI
"
32 print current version of python	"import sys
print(sys.version)
"
34 write a python function to convert a string  into xml	"

root = ET.fromstring(country_data_as_string)
"
write a python function to calculate the dot product of two lists	"def dot(l1, l2):
	return sum(x * y for x, y in zip(l1, l2))
"
Fibonacci series up to 100	"n = 100
result = []
a, b = 0, 1
while b < n:
	result. append(b)
	a, b = b, a + b
final = result
print(f""Fibonacci series up to 100:{final}"")
"
47 write a python function to print lcm of n numbers python	"

def LCMofArray(a):
	lcm = a[0]
	for i in range(1, len(a)):
        lcm = lcm * a[i] // math.gcd(lcm, a[i])
	return lcm


arr1 = [1, 2, 3]
print(""LCM of arr1 elements:"", LCMofArray(arr1))
"
Write a python function to remove a newline in Python	"def remove_newline(string):
	return string.strip()
"
list of indexes.	"

def sort_by_indexes(lst, indexes, reverse=False):
	return [val for (_, val) in sorted(zip(indexes, lst), key=lambda x:
                                       x[0], reverse=reverse)]
"
Usage of while	"i = 0
while i < 2:
	print(i)
	i += 1
else:
	print('in else')
"
is the index and the value is the item in the list	"my_list = [1, 8, 1, 2, 2, 9]
my_dict = {key: value for key, value in enumerate(my_list)}
"
write a python program to explain python zip method	"

l1 = [2, 4, 6]
l2 = [-2, -4, -6]
for i in zip(l1, l2):
	print(i)
"
divisible by 7, between a given range 0 and n.	"def putNumbers(n):
	i = 0
	while i < n:
        j = i
        i = i + 1
        if j % 7 == 0:
            yield j


for i in reverse(100):
	print(i)
"
24. Python Program to Find Numbers Divisible by Another Number	"my_list = [12, 65, 54, 39, 102, 339, 221, ]

result = list(filter(lambda x: (x % 13 == 0), my_list))
print(""Numbers divisible by 13 are"", result)
"
write a python function to Check if a Substring is Present in a Given String	"def checksubstring(string, sub_string):
	if(string.find(sub_str) == -1):
        return False
	else:
        return True
"
79 write a program to add an element at specified index in a list	"

list = [10, 20, 30]
print(list)
list.insert(1, ""ABC"")
print(list)
list.insert(3, ""PQR"")
print(list)
"
3 write a program to find the largest number in a list	"list1 = [10, 20, 4, 45, 99]
list1.sort()
print(""Largest element is:"", list1[-1])
"
pythonpython by TheRubberDucky on Nov 06 2020 Donate	"def getBaseTen(binaryVal):
	count = 0

	binaryVal = binaryVal[::-1]

	for i in range(0, len(binaryVal)):
        if(binaryVal[i] == ""1""):
            count += 2**i

	return count
"
Write a function to find the  difference between two times	"def difference(h1, m1, h2, m2):

	t1 = h1 * 60 + m1
	t2 = h2 * 60 + m2
	if (t1 == t2):
        print(""Both are same times"")
        return
	else:
        diff = t2 - t1
	h = (int(diff / 60)) % 24
	m = diff % 60
	print(h, "":"", m)


difference(7, 20, 9, 45)
difference(15, 23, 18, 54)
difference(16, 20, 16, 20)
"
sentence as a dictionary	"

from collections import Counter


def count_tokens(sent):
	sent = list(sent)
	return dict(Counter(sent))
"
similar initial element. Print out the output	"

test_list = [(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)]
print(""The original list is : "" + str(test_list))

res = []
for sub in test_list:
	if res and res[-1][0] == sub[0]:
        res[-1].extend(sub[1:])
	else:
        res.append([ele for ele in sub])
res = list(map(tuple, res))

print(""The extracted elements : "" + str(res))
"
Write a function that returns a list sorted descending	"def descending_sort(l: list):
	sorted(l, reverse=True)
"
write a python program to implement Queue	"

class Queue():

	def __init__(self, max_size=10):

        self._queue = deque(maxlen=max_size)

	def enqueue(self, item):

        self._queue.append(item)

	def dequeue(self):
        return self._queue.pop()
"
write a python program to calculate factorial sum using list comprehensive	"n = 5
print(functools.reduce(lambda x, y: x * y, range(1, n + 1)))
"
sides are given	"def checkValidity(a, b, c):
	if (a + b <= c) or (a + c <= b) or (b + c <= a):
        return False
	else:
        return True
"
43. Python Program to Transpose a Matrix using Nested List Comprehension	"

X = [[12, 7],
     [4, 5],
     [3, 8]]


result = [[X[j][i] for j in range(len(X))] for i in range(len(X[0]))]


for r in result:
	print(r)
"
Write a function to reverse a string	"

def revStr(inp):
	inp = inp[::-1]
	return inp
"
length of the word and print it	"sentence = 'the quick brown fox jumps over the lazy dog'
words = sentence.split(' ')
lengths = [str(len(word)) for word in words]
print(' '.join(lengths))
"
Write a function to compute 5/0 and use try/except to catch the exceptions.	"def throws():
	return 5 / 0


try:
	throws()
except ZeroDivisionError:
	print(""division by zero!"")
except Exception:
	print('Caught an exception')
finally:
	print('In finally block for cleanup')
"
Write a function to return the area of a rectangle	"def cal_area_rect(length, breadth):
	return length * breadth
"
by the given mean and standard deviation	"def shift_and_scale(list_of_nums, mean, std):
	return [(x - mean) / std for x in list_of_nums]
"
lowercase letters in a given string	"str1 = 'TestStringInCamelCase'
no_of_ucase, no_of_lcase = 0, 0
for c in str1:
	if c >= 'A' and c <= 'Z':
        no_of_ucase += 1
	if c >= 'a' and c <= 'z':
        no_of_lcase += 1


print(no_of_lcase)
print(no_of_ucase)
"
99 write a  python function that accepts a string and reverses it	"

def reverse(st):
	return st[::-1]
"
Addition of two vector	"v1 = [1, 2, 3]
v2 = [1, 2, 3]
s1 = [0, 0, 0]


for i in range(len(v1)):
	s1[i] = v1[i] + v2[i]
print(f""New Vector:{s1}"")
"
or tuple or string and returns the new sorted sequence	"def selection_sort(list_to_be_sorted):
	sorted_list = list_to_be_sorted[:]
	for i in range(len(sorted_list)):
        new_min = sorted_list[i]
        new_min_old_place = i
        for j in range(i + 1, len(sorted_list)):
            if new_min > sorted_list[j]:
                new_min = sorted_list[j]
                new_min_old_place = j
        old_val = sorted_list[i]
        sorted_list[i] = new_min
        sorted_list[new_min_old_place] = old_val
	return sorted_list
"
26. Python Program to find Largest and Smallest Number in a List	"

NumList = []
Number = int(input(""Please enter the Total Number of List Elements: ""))
for i in range(1, Number + 1):
	value = int(input(""Please enter the Value of %d Element : "" % i))
	NumList.append(value)


smallest = largest = NumList[0]


for j in range(1, Number):
	if(smallest > NumList[j]):
        smallest = NumList[j]
        min_position = j
	if(largest < NumList[j]):
        largest = NumList[j]
        max_position = j


print(""The Smallest Element in this List is : "", smallest)
print(""The Index position of Smallest Element in this List is : "", min_position)
print(""The Largest Element in this List is : "", largest)
print(""The Index position of Largest Element in this List is : "", max_position)
"
Write a Python Program to Convert Gray Code to Binary	"

def gray_to_binary(n):
	
	n = int(n, 2)

	mask = n
	while mask != 0:
        mask >>= 1
        n ^= mask

	return bin(n)[2:]
"
(including duplicates).	"def permute_string(str):
	if len(str) == 0:
        return ['']
	prev_list = permute_string(str[1:len(str)])
	next_list = []
	for i in range(0, len(prev_list)):
        for j in range(0, len(str)):
            new_str = prev_list[i][0:j] + str[0] + prev_list[i][j:len(str) - 1]
            if new_str not in next_list:
                next_list.append(new_str)
	return next_lis
"
48. Python Program to Illustrate Different Set Operations	"E = {0, 2, 4, 6, 8}
N = {1, 2, 3, 4, 5}
print(""Union of E and N is"", E | N)
print(""Intersection of E and N is"", E & N)
print(""Difference of E and N is"", E - N)
print(""Symmetric difference of E and N is"", E ^ N)
"
Write a function to return the perimeter of a square	"def cal_perimeter_square(side):
	return 4 * side
"
write a python program to make use of maps	"

def square(number):
	return number ** 2


numbers = [1, 2, 3, 4, 5]


squared = map(square, numbers)


print(f'mapped numbers:{list(squared)}')
"
write a python function to calculate simple Interest	"def simple_interest(p, t, r):

	si = (p * t * r) / 100
	return si
"
Write a Python function to calculate factorial of a given no using closer	"

def fact():
	cache = {0: 1, 1: 1}

	def calc_fib(n):
        if n not in cache:
            print(f'Calculating fact({n})')
            cache[n] = calc_fib(n - 1) * n
        return cache[n]
	return calc_fib
"
68 Write a Python function to find the length of the last word.	"def length_of_last_word(s):
	words = s.split()
	if len(words) == 0:
        return 0
	return len(words[-1])
"
for the below list	"

def comb_sort(alist):
	def swap(i, j):
        alist[i], alist[j] = alist[j], alist[i]

	gap = len(alist)
	shrink = 1.3

	no_swap = False
	while not no_swap:
        gap = int(gap / shrink)

        if gap < 1:
            gap = 1
            no_swap = True
        else:
            no_swap = False

        i = 0
        while i + gap < len(alist):
            if alist[i] > alist[i + gap]:
                swap(i, i + gap)
                no_swap = False
            i = i + 1


alist = [2, 3, 5, 6, 4, 5]
comb_sort(alist)
print('Sorted list: ', end='')
print(alist)
"
35 Write a python program to remove duplicate word from sentence and print it	"str1 = ""Good bye bye world world""
l = str1.split("" "")
s = list(set(l))
print("" "".join(i for i in s))
"
missing dates show up with values of previous non-missing date	"import pandas as pd
import numpy as np
ser = pd.Series([1, 10, 3, np.nan], index=pd.to_datetime(
	['2000-01-01', '2000-01-03', '2000-01-06', '2000-01-08']))
print(ser.resample('D').ffill())
"
Calculate the length of dictionary	"thisdict = {
	""brand"": ""Ford"",
	""model"": ""Mustang"",
	""year"": 1964
}


print(f""Length of Dictionary:{len(thisdict)}"")
"
70 write a python program to extract Numerical Dictionary values and print it	"

test_dict = {""Gfg"": [""34"", ""45"", 'geeks'], 'is': [
	""875"", None, ""15""], 'best': [""98"", 'abc', '12k']}

res = []
for a, b, c in zip(*test_dict.values()):

	if a.isdigit():
        res.append((a, b, c))

print(""The Numerical values : "" + str(res))
"
2 write a program to get numbers = 1,3,11,42,12,4001	"highestnumber = -999
for i in numbers:
	if i > highestnumber:
        highestnumber = i
print(numbers.index(highestnumber))
"
Write a function to return the area of triangle by heros formula	"def cal_triangle_area(a: float, b: float, c: float) -> float:
	if a or b or c:
        s = (a + b + c) / 2
        if s > a and s > b and s > c:
            area = (s * (s - a) * (s - b) * (s - c))**(1 / 2)
            return round(area, 2)
        else:
            return None
	return None
"
dictionaries.	"list_of_dicts = [{""key1"": ""val1"", ""Country"": ""India""},
                 {""Country"": ""USA"", ""foo"": ""bar""},
                 {""foo"": ""bar"", ""foo2"": ""bar2""}]
unique_keys = []
for d in list_of_dicts:
	for key in d:
        if key not in unique_keys:
            unique_keys.append(key)
print(f""Number of unique keys: {len(unique_keys)}"")
"
Write a function to convert time from 12 hour to 24 hour format	"def convert24(str1):
	if str1[-2:] == ""AM"" and str1[:2] == ""12"":
        return ""00"" + str1[2:-2]
	elif str1[-2:] == ""AM"":
        return str1[:-2]

	elif str1[-2:] == ""PM"" and str1[:2] == ""12"":
        return str1[:-2]
	else:
        return str(int(str1[:2]) + 12) + str1[2:8]


print(convert24(""08:05:45 PM""))
"
16 how to add list numbers in python	"numbers = [1, 2, 3, 4, 5, 1, 4, 5]
Sum = sum(numbers)
"
numbers divisible by 13 in the list.	"my_list = [12, 65, 54, 39, 102, 339, 221, ]


result = list(filter(lambda x: (x % 13 == 0), my_list))


print(""Numbers divisible by 13 are"", result)
"
write a Python program for Handling missing keys in dictionaries	"

country_code = {'India': '0091',
                'Australia': '0025',
                'Nepal': '00977'}


print(country_code.get('India', 'Not Found'))
print(country_code.get('Japan', 'Not Found'))
"
recursively	"

def check(n):
	if (n < 2):
        return (n % 2 == 0)
	return (check(n - 2))


n = int(input(""Enter number:""))
if(check(n) == True):
	print(""Number is even!"")
else:
	print(""Number is odd!"")
"
Write a Python program to swap two tuples	"tuple1 = (11, 22)
tuple2 = (99, 88)
tuple1, tuple2 = tuple2, tuple1
print(tuple2)
print(tuple1)
"
6. python ReLu function	"def relu_like_activation(l):
	return[0 if x < 0 else x for x in l]
"
write a program to  adds every 5th number in a list	"input_list = [x for x in range(20)]


res = reduce((lambda x, y: x + y),
             [val for idx, val in enumerate(input_list) if (idx + 1) % 5 == 0])
print('Sum of every 5th element in the list is', res)
"
34 write a program to find the least Frequent Character in String	"

test_str = ""helloworld""
print(""The original string is : "" + test_str)
all_freq = {}
for i in test_str:
	if i in all_freq:
        all_freq[i] += 1
	else:
        all_freq[i] = 1
res = min(all_freq, key=all_freq.get)

print(""The minimum of all characters in the given word is : "" + str(res))
"
i-th row and j-th column of the array should be i*	"row_num = int(input(""Input number of rows: ""))
col_num = int(input(""Input number of columns: ""))
multi_list = [[0 for col in range(col_num)] for row in range(row_num)]


for row in range(row_num):
	for col in range(col_num):
        multi_list[row][col] = row * col


print(multi_list)
"
Generators are consumed	"gen = (i for i in range(5))
print('2 in gen,', 2 in gen)
print('3 in gen,', 3 in gen)
print('1 in gen,', 1 in gen)
"
15 function to print all armstrong in a range	"def print_all_armstrong(lower: int, upper: int):
	for num in range(lower, upper + 1):
        sum_ = 0
        temp = num
        while temp > 0:
            digit = temp % 10
            sum_ += digit ** 3
            temp //= 10
            if num == sum_:
                print(num)
"
insert() + pop()	"test_list = [1, 4, 5, 6, 7, 8, 9, 12]
print(""The original list is : "" + str(test_list))
test_list.insert(len(test_list) - 1, test_list.pop(0))
print(""The list after shift is : "" + str(test_list))
"
19 write a program to find the difference between two times	"
def difference(h1, m1, h2, m2):

	t1 = h1 * 60 + m1
	t2 = h2 * 60 + m2

	if (t1 == t2):
        print(""Both are same times"")
        return
	else:
        diff = t2 - t1

	h = (int(diff / 60)) % 24
	m = diff % 60

	print(h, "":"", m)


if __name__ == ""__main__"":

	difference(7, 20, 9, 45)
	difference(15, 23, 18, 54)
	difference(16, 20, 16, 20)
"
and n.	"def Generator(n):
	for i in range(n + 1):
        if i % 7 == 0:
            yield i


n = int(input(""Enter Number: ""))
for i in Generator(n):
	print(i, end="" "")
"
Write a program to print bit wise OR of two numbers	"a = 60
b = 13


c = a | b
print(""OR"", c)
"
write a python lambda function to add three numbers	"def x(a, b, c): return a + b + c


print(x(5, 6, 2))
"
consecutive stations out of n stations	"
def stopping_station(p, n):
	num = 1
	dem = 1
	s = p

	while p != 1:
        dem *= p
        p -= 1

	t = n - s + 1
	while t != (n - 2 * s + 1):
        num *= t
        t -= 1
	if (n - s + 1) >= s:
        return int(num / dem)
	else:

        return -1
"
Generate a Python list of all the even numbers between two given numbers	"num1 = 4
num2 = 30
myval = [i for i in range(num1, num2, 2)]
print(myval)
"
Writing JSON to a file	"import json
person_dict = {""name"": ""Bob"",
               ""languages"": [""English"", ""Fench""],
               ""married"": True,
               ""age"": 32
               }
with open('person.txt', 'w') as json_file:
	json.dump(person_dict, json_file)
"
write a Python program to get the largest number from a list	"

def max_num_in_list(list):
	max = list[0]
	for a in list:
        max = a if a > max else max
	return max


print(f'max_num_in_list [1, 10, -8, 0], Ans:{max_num_in_list([1, 10, -8, 0])}')
"
list2 in reverse order	"list1 = [10, 20, 30, 40]
list2 = [100, 200, 300, 400]


for x, y in zip(list1, list2[::-1]):
	print(x, y)
"
34 Write a python program for printing alternate Strings Concatenation	"

test_list = [""Early"", ""morning"", ""is"", ""good"", ""for"", ""health""]

print(""The original list : "" + str(test_list))
s = []
k = test_list[::2]
a = ["""".join(i for i in k)]
print(a)
l = test_list[1::2]
b = ["""".join(i for i in l)]
print(b)


print(a + b)
"
7 but are not a multiple of 5 between 2000 and 3200 (both included).	"

l = []
for i in range(2000, 3201):
	if (i % 7 == 0) and (i % 5 != 0):
        l.append(str(i))
"
52. python function for finding the hyperbolic tangent value of a number	"def tanh(x):
	

	return math.tanh(x)
"
write a python function to add two user provided numbers and return the sum	"def add_two_numbers(num1, num2):
	sum = num1 + num2
	return sum
"
between the biggest and smallest numbers.	"def difference_max_min(lst):
	return abs(min(lst) - max(lst))
"
Write a program to find common divisors between two numbers in a given pair	"def ngcd(x, y):
	i = 1
	while(i <= x and i <= y):
        if(x % i == 0 and y % i == 0):
            gcd = i
        i += 1
	return gcd


def num_comm_div(x, y):
	n = ngcd(x, y)
	result = 0
	z = int(n**0.5)
	i = 1
	while(i <= z):
        if(n % i == 0):
            result += 2
        if(i == n / i):
            result -= 1
        i += 1
	return result
"
even number between 1 and 20 (both included).	"evenNumbers = filter(lambda x: x % 2 == 0, range(1, 21))
print(evenNumbers)
"
20. Python Program to Check Armstrong Number (for 3 digits)	"num = 1634
order = len(str(num))
sum = 0
temp = num
while temp > 0:
	digit = temp % 10
	sum += digit ** order
	temp //= 10
if num == sum:
	print(num, ""is an Armstrong number"")
else:
	print(num, ""is not an Armstrong number"")
"
Write a python function to extract URLs from a sentence	"

import re


def FindUrls(string):
	regex = r""(?i)\b((?:https?://|www\d{0,3}[.]|[a-z0-9.\-]+[.][a-z]{2,4}/)(?:[^\s()<>]+|\(([^\s()<>]+|(\([^\s()<>]+\)))*\))+(?:\(([^\s()<>]+|(\([^\s()<>]+\)))*\)|[^\s`!()\[\]{};:'\"".,<>?«»“”‘’]))""
	url = re.findall(regex, string)
	return [x[0] for x in url]
"
44 write a  Python function to find intersection of two sorted arrays	"def printIntersection(arr1, arr2, m, n):
	i, j = 0, 0
	while i < m and j < n:
        if arr1[i] < arr2[j]:
            i += 1
        elif arr2[j] < arr1[i]:
            j += 1
        else:
            print(arr2[j])
            j += 1
            i += 1


arr1 = [1, 2, 4, 5, 6]
arr2 = [2, 3, 5, 7]
m = len(arr1)
n = len(arr2)
printIntersection(arr1, arr2, m, n)
"
write a python program to merge two dictionary	"

x = {'a': 1, 'b': 2}
y = {'c': 3, 'd': 4}


z = {**x, **y}
print(z)
"
the output.	"

test_list = [(3, 4), (6, 5), (7, 8)]

res = [(sub[1], sub[0]) for sub in test_list]

print(""The swapped tuple list is : "" + str(res))
"
write a program to remove all duplicate characters from a string	"

str1 = ""what a great day!""
print("""".join(set(str1)))
"
write a python program to use python lambda function	"

def lamb(x): return x ** 3


print(lamb(5))
"
args and sleep	"

def report_arg(my_default=time.time()):
	print(my_default)


report_arg()
time.sleep(5)
report_arg()
"
100 times.	"from timeit import Timer


t = Timer(""for i in range(100):1+1"")
print(t.timeit())
"
2 write a program to get numbers = 1,3,11,42,12,4001	"highestnumber = -999
for i in numbers:
	if i > highestnumber:
        highestnumber = i
print(numbers.index(highestnumber))
"
write a python function to check if a string is a palindrome or not	"def isPalindrome(s):
	return s == s[::-1]
"
write a python program to check Armstrong number of n digits	"num = 1634
order = len(str(num))
sum = 0
temp = num
while temp > 0:
	digit = temp % 10
	sum += digit ** order
	temp //= 10
if num == sum:
	print(num, ""is an Armstrong number"")
else:
	print(num, ""is not an Armstrong number"")
"
Write a function to return the area of a rhombus	"def area(d1, a):
	d2 = (4 * (a**2) - d1**2)**0.5
	area = 0.5 * d1 * d2
	return(area)
"
after sorting them alphabetically.	"

items = [x for x in input().split(',')]
items.sort()
print(','.join(items))
"
arithmetic progression or not.	"def is_arithmetic(l):
	delta = l[1] - l[0]
	for index in range(len(l) - 1):
        if not (l[index + 1] - l[index] == delta):
            return False
	return True
"
Write a program to print inverted star pattern for the given number	"

n = 11


for i in range(n, 0, -1):
	print((n - i) * ' ' + i * '*')
"
write a function to rotate string left by a given length	"
def rotate_left(input, d):

	Lfirst = input[0: d]
	Lsecond = input[d:]
	return (Lsecond + Lfirst)
"
write a Python function to Convert Decimal to Binary	"def convertToBinary(n):
	if n > 1:
        convertToBinary(n // 2)
	print(n % 2, end='')
"
write a program to count characters surrounding vowels	"

str1 = 'week after week the numbers are increasing'

res = 0
vow_list = ['a', 'e', 'i', 'o', 'u']


for idx in range(1, len(str1) - 1):

	if str1[idx] not in vow_list and (
            str1[idx - 1] in vow_list or str1[idx + 1] in vow_list):
        res += 1

if str1[0] not in vow_list and str1[1] in vow_list:
	res += 1

if str1[-1] not in vow_list and str1[-2] in vow_list:
	res += 1


print(""Characters around vowels count : "" + str(res))
"
Write a function to return the volume of a hemi sphere	"def cal_hemisphere_volume(radius: float) -> float:
	pi = 3.14
	return (2 / 3) * pi * (radius**3)
"
Usage of bool class	"print('isinstance(True, int):', isinstance(True, int))
"
93 write a  python program for  removing strings from tuple and printing it	"

test_list = [('Geeks', 1, 2), ('for', 4, 'Geeks'), (45, 'good')]
print(""The original list : "" + str(test_list))


s = []
for i in test_list:
	t = tuple()
	for j in i:
        if not isinstance(j, str):
            t += (j,)
	s.append(t)
print(f'List after removing string from tuple is {s}')
"
38. Python Program to Find Sum of Natural Numbers Using Recursion	"def recur_sum(n):
	if n <= 1:
        return n
	else:
        return n + recur_sum(n - 1)


num = 16
if num < 0:
	print(""Enter a positive number"")
else:
	print(""The sum is"", recur_sum(num))
"
write a python function to count number of vowels in a string	"def count_vowels(text):
	v = set('aeiou')
	for i in v:
        print(f'\n {i} occurs {text.count(i)} times')
"
write a Python program to remove duplicates from a list	"

a = [10, 20, 30, 20, 10, 50, 60, 40, 80, 50, 40]


dup_items = set()
uniq_items = []
for x in a:
	if x not in dup_items:
        uniq_items.append(x)
        dup_items.add(x)


print(f'dup_items:{dup_items}')
"
"bingo"""	"key_val_map = {
	""key1"": ""length1"",
	""key2"": ""len2"",
	""Hello"": ""hi"",
	""bingo"": ""print bingo""}
for key, val in key_val_map.items():
	if len(val) > len(key):
        print(""Bingo!"")
	else:
        print(""no bingo"")
"
write a Python Program to Convert Kilometers to Miles	"

kilometers = 10.0


conv_fac = 0.621371


miles = kilometers * conv_fac
print('%0.2f kilometers is equal to %0.2f miles' % (kilometers, miles))
"
Write a python function to find the area of a circle, whose radius is given	"

def findArea(r):
	PI = 3.142
	return PI * (r * r)
"
Write a Python function to find the Max of three numbers.	"def max_of_two(x, y):
	if x > y:
        return x
	return y


def max_of_three(x, y, z):
	return max_of_two(x, max_of_two(y, z))


print(max_of_three(3, 6, -5))
"
write a python to check two numbers are greater than or equal or less than	"

def maximum(x, y):
	if x > y:
        return x
	elif x == y:
        return 'The numbers are equal'
	else:
        return y


print(maximum(2, 3))
"
Butterfly on Jun 14 2020 Donate	"data = [7, 7, 7, 7]
print(*data, sep='')
"
these matrices together	"

import sys


def MatrixChainOrder(p, i, j):

	if i == j:
        return 0

	_min = sys.maxsize

	for k in range(i, j):

        count = (MatrixChainOrder(p, i, k)
                 + MatrixChainOrder(p, k + 1, j)
                 + p[i - 1] * p[k] * p[j])

        if count < _min:
            _min = count

	return _min
"
write a function to check if a lower case letter exists in a given string	"

def check_lower(str1):

	for char in str1:
        k = char.islower()
        if k == True:
            return True
	if(k != 1):
        return False
"
return the remaining list	"

def remove_even(my_list):
	result = list(filter(lambda x: (x % 2 != 0), my_list))
	return result
"
three points are given	"def checkTriangle(x1, y1, x2, y2, x3, y3):
	a = (x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2))
	if a == 0:
        return False
	else:
        return True
"
in the File	"

def capitalize(fname):
	with open(fname, 'r') as f:
        for line in f:
            l = line.title()
            print(l)
"
Write a python program to Check if a Number is a Strong Number	"sum1 = 0
num = int(input(""Enter a number:""))
temp = num
while(num):
	i = 1
	f = 1
	r = num % 10
	while(i <= r):
        f = f * i
        i = i + 1
        sum1 = sum1 + f
        num = num // 10
        if(sum1 == temp):
            print(""The number is a strong number"")
        else:
            print(""The number is not a strong number"")
"
write a python function to do insertion sort	"

def insertionSort(arr):
	for i in range(1, len(arr)):

        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key

 


lower = 5
upper = 20


print(""Prime numbers between"", lower, ""and"", upper, ""are:"")


for num in range(lower, upper + 1):
	if num > 1:
        for i in range(2, num):
            if (num % i) == 0:
                break
        else:
            print(num)
"
write a python program to swap two numbers	"(x, y) = (1, 2)
print(f'Before swapping: x: {x}, y: {y}')
(y, x) = (x, y)
print(f'After swapping: x: {x}, y: {y}')
"
Write a function to get nth element of the fibonacci series	"def fibonacci_nth(n):
	a = 0
	b = 1

	if n <= 0:
        print(""Incorrect input"")
	elif n == 1:
        return a
	elif n == 1:
        return 1
	else:
        for i in range(2, n):
            c = a + b
            a, b = b, c
        return b
"
14.Write a Python Program to check if a number is prime or not	"

num = 407
if num > 1:
	
	for i in range(2, num):
        if (num % i) == 0:
            print(num, ""is not a prime number"")
            print(i, ""times"", num // i, ""is"", num)
            break
	else:
        print(num, ""is a prime number"")

else:
	print(num, ""is not a prime number"")
"
Write a python fuction to create an empty list	"
def emptylist():
	return list()
"
Remove empty strings from the list of strings	"list1 = [""Mike"", """", ""Emma"", ""Kelly"", """", ""Brad""]
resList = [i for i in (filter(None, list1))]
print(resList)
"
class Student	"class Person:
	def __init__(self, fname, lname):
        self.firstname = fname
        self.lastname = lname

	def printname(self):
        print(self.firstname, self.lastname)


class Student(Person):
	pass
"
Write a Python program to slice a tuple	"tuplex = (2, 4, 3, 5, 4, 6, 7, 8, 6, 1)
_slice = tuplex[3:5]
"
36. Recursive Python function to solve the tower of hanoi	"def TowerOfHanoi(n, source, destination, auxiliary):
	if n == 1:
        print(""Move disk 1 from source"", source, ""to destination"", destination)
        return
	TowerOfHanoi(n - 1, source, auxiliary, destination)
	print(""Move disk"", n, ""from source"", source, ""to destination"", destination)
	TowerOfHanoi(n - 1, auxiliary, destination, source)


n = 4
TowerOfHanoi(n, 'A', 'B', 'C')
"
Remove special symbols/Punctuation from a given string	"import string


str1 = ""/*Jon is @developer & musician""
new_str = str1.translate(str.maketrans('', '', string.punctuation))
print(""New string is "", new_str)
"
Python Program to Display the multiplication Table	"

num = 12
for i in range(1, 11):
	print(num, 'x', i, '=', num * i)
"
write a Python function to Detect if Two Strings are Anagrams	"def check_if_anagram(s1, s2):
	if(sorted(s1) == sorted(s2)):
        return True
	else:
        return False
"
Write a Python function to print whether the given Date is valid or not	"def date_validator(d, m, y):
	import datetime
	try:
        s = datetime.date(y, m, d)
        print(""Date is valid."")
	except ValueError:
        print(""Date is invalid."")
"
list  Using setdefault() + loop	"

test_list = [{'gfg': 2, 'is': 4, 'best': 6},
             {'it': 5, 'is': 7, 'best': 8},
             {'CS': 10}]


print(""The original list is : "" + str(test_list))


res = {}
for sub in test_list:
	for key, val in sub.items():
        res.setdefault(key, []).append(val)


print(""The merged values encapsulated dictionary is : "" + str(res))
"
write a python function to return only even numbers in a list	"def filter_even(nums):
	return list(filter(lambda num: num % 2 == 0, nums))
"
'interval' seconds	"def get_btc_price(interval=5):
	import requests
	import json
	from time import sleep

	def getBitcoinPrice():
        URL = ""https://www.bitstamp.net/api/ticker/""
        try:
            r = requests.get(URL)
            priceFloat = float(json.loads(r.text)[""last""])
            return priceFloat
        except requests.ConnectionError:
            print(""Error querying Bitstamp API"")

	while True:
        print(""Bitstamp last price: US $ "" + str(getBitcoinPrice()) + ""/BTC"")
        sleep(interval)
"
write  a Python Program to Swap Two Variables and print them	"x = 5
y = 10
temp = x
x = y
y = temp
print('The value of x after swapping: {}'.format(x))
print('The value of y after swapping: {}'.format(y))
"
write a python program to print the table of input integer	"

num = int(input(""Please enter a number ""))
for a in range(1, 11):
	print(num, 'x', a, '=', num * a)
"
write a python function to advance the iterator n-steps ahead	"def consume(iterator, n=None):
	import itertools
	from collections import deque
	
	
	if n is None:
        
        deque(iterator, maxlen=0)
	else:
        
        next(itertools.islice(iterator, n, n), None)
"
21. python function for factorial using reduce	"def fact(n):
	from operator import mul
	from functools import reduce
	return reduce(mul, range(1, n + 1))


fact(10)
"
Write a function to Convert Celsius To Fahrenheit	"def Celsius_To_Fahrenheit(c):
	fahrenheit = (c * 1.8) + 32
	return fahrenheit
"
Write a Python Program to Generate Gray Codes using Recursion	"

def get_gray_codes(n):
	
	if n == 0:
        return ['']
	first_half = get_gray_codes(n - 1)
	second_half = first_half.copy()

	first_half = ['0' + code for code in first_half]
	second_half = ['1' + code for code in reversed(second_half)]

	return first_half + second_half
"
write a program to convert date to timestamp and print the result	"import time
import datetime
str1 = ""20/01/2020""
element = datetime.datetime.strptime(str1, ""%d/%m/%Y"")
timestamp = datetime.datetime.timestamp(element)
print(timestamp)
"
variable	"

x = int(input(""Enter the value of x :""))
y = int(input(""Enter the value of y :""))


(x, y) = (y, x)


print('Value of x: ', x, '\nValue of y: ', y, '\nWOO!! Values SWAPPEDDD')
"
Write a Python program to get the frequency of the elements in a list	"import collections
my_list = [10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]
print(""Original List : "", my_list)
ctr = collections.Counter(my_list)
print(""Frequency of the elements in the List : "", ctr)
"
Write a Python program to get the last day of a specified year and month.	"import calendar
year = 2020
month = 12
print(calendar.monthrange(year, month)[1])
"
write a program to extract string of N size and having K distict characters	"

str1 = 'GoodisalwaysGoood'

N = 3

K = 2

res = []


for idx in range(0, len(str1) - N + 1):

	if (len(set(str1[idx: idx + N])) == K):
        res.append(str1[idx: idx + N])

print(""Extracted Strings : "" + str(res))
"
Write a function to return the volume of a sphere	"def cal_sphere_volume(radius: float) -> float:
	pi = 3.14
	return (4 / 3) * pi * (radius**3)
"
write a Python Program to print all the Divisors of an Integer	"n = 20
print(""The divisors of the number are:"")
for i in range(1, n + 1):
	if(n % i == 0):
        print(i)
"
Write a Python program to add member in a set	"color_set = set()
color_set.add(""Red"")
print(color_set)
"
Write a function to Find the size of a Tuple in Python without garbage values	"Tuple = (10, 20)


def sizeOfTuple(tup):
	return f'Size of Tuple: {str(Tuple.__sizeof__())} bytes'
"
write a python program to read and print contents of a file	"

filepath = 'data.txt'
with open(filepath, 'r') as file:
	data = file.read()
	print(f'Data: {data}')
"
last modified date	"import glob
import os
import datetime


def retrieve_files_sort_bydate(src_dir_path):
	if(os.path.exists(src_dir_path) == False):
        print(""Destination Path doesn't exist"")
        return
	files_in_dir = glob.glob(src_dir_path + ""/*.*"")
	if (len(files_in_dir) <= 0):
        print(""No files present in:"", src_dir_path)
        return
	files_in_dir.sort(key=os.path.getmtime)
	return files_in_dir
"
Unicode strings	"import re


def extract_unicode(my_string):
	regex = re.compile(r'[^\W\d_]+', re.UNICODE)
	return regex.findall(my_string)
"
values of dictionary comprising of strings only.	"def mean_key_val_diff(input_dict):
	sum_diff = 0
	for key, val in input_dict.items():
        sum_diff += abs(len(val) - len(key))
	return sum_diff / len(input_dict)
"
reverse a number in Python	"number = 1367891
revs_number = 0
while (number > 0):
	remainder = number % 10
	revs_number = (revs_number * 10) + remainder
	number = number // 10
print(""The reverse number is : {}"".format(revs_number))
"
collection of distinct numbers.	"def permute(nums):
	result_perms = [[]]
	for n in nums:
        new_perms = []
        for perm in result_perms:
            for i in range(len(perm) + 1):
                new_perms.append(perm[:i] + [n] + perm[i:])
                result_perms = new_perms
	return result_perms


my_nums = [1, 2, 3]
print(""Original Collection: "", my_nums)
print(""Collection of distinct numbers:\n"", permute(my_nums))
"
itertools.product(*args, **kwds)	"def random_product(*args, repeat=1):
	import random
	pools = [tuple(pool) for pool in args] * repeat
	return tuple(map(random.choice, pools))
"
write a python program  to convert list of tuples into list	"

lt = [('English', 2), ('Maths', 4), ('Science', '6')]
out = [item for t in lt for item in t]
print(out)
"
of numbers given	"

def longest_increaing_subsequence(myList):

	lis = [1] * len(myList)

	elements = [0] * len(myList)

	for i in range(1, len(myList)):
        for j in range(0, i):
            if myList[i] > myList[j] and lis[i] < lis[j] + 1:
                lis[i] = lis[j] + 1
                elements[i] = j
	idx = 0

	maximum = max(lis)
	idx = lis.index(maximum)

	seq = [myList[idx]]
	while idx != elements[idx]:
        idx = elements[idx]
        seq.append(myList[idx])

	return (maximum, reversed(seq))
"
they are equal or not.	"print(""Enter first number"")
first = input()
print(""Enter second number"")
second = input()
print(first == second)
"
return a dictionary with one as keys and other as values.	"

keys = eval(input(""Enter key list : ""))
values = eval(input(""Enter value list : ""))


def fn(keys, values):
	return {keys[i]: values[i] for i in range(len(keys))}
"
Write a Python program to match key values in two dictionaries.	"x = {'key1': 1, 'key2': 3, 'key3': 2}
y = {'key1': 1, 'key2': 2}
for (key, value) in set(x.items()) & set(y.items()):
	print('%s: %s is present in both x and y' % (key, value))
"
write a python function to get the absolute value of a number	"def get_absolute_value(i):
	return(abs(i))
"
write a python function to implement odd-even sort	"

def oddEvenSort(arr, n):
	isSorted = 0
	while isSorted == 0:
        isSorted = 1
        temp = 0
        for i in range(1, n - 1, 2):
            if arr[i] > arr[i + 1]:
                arr[i], arr[i + 1] = arr[i + 1], arr[i]
                isSorted = 0
            for i in range(0, n - 1, 2):
                if arr[i] > arr[i + 1]:
                    arr[i], arr[i + 1] = arr[i + 1], arr[i]
                    isSorted = 0
	return i
"
Evaluate a string and a number	"print(bool(""Hello""))
print(bool(15))
"
length in a string	"

str1 = ""It is wonderful and sunny day for a picnic in the park""
str_len = 5


res_str = []

text = str1.split("" "")

for x in text:

	if len(x) < str_len:
        res_str.append(x)


print(""Words that are less than "" + str(str_len) + "": "" + str(res_str))
"
write a program to print the nth fibonacci number	"n1 = 1
n2 = 1
n = 5
for _ in range(n):
	n1, n2 = n2, n1 + n2
print(n2)
"
first number is divisible by other	"

num1 = int(input(""Enter first number :""))
num2 = int(input(""Enter second number :""))
remainder = num1 % num2
if remainder == 0:
	print(num1, "" is divisible by "", num2)
else:
	print(num1, "" is not divisible by "", num2)
"
Write a function to return the volume of a sphere	"def cal_sphere_volume(radius: float) -> float:
	pi = 3.14
	return (4 / 3) * pi * (radius**3)
"
write a program to convert all the sentances present in the list to upper	"

mylis = ['this is test', 'another test']
print(f'{[item.upper() for item in mylis]}')
"
check if all char in the string are alphabetic	"word = ""Hello World""
check = word.isalpha()
print(f""All char are alphabetic?:{check}"")
"
Write a Python program to check number either positive , negative or zero	"num = int(input(""Enter Integer Number: ""))
if num == 0:
	print(""Zero Entered"")
elif num > 0:
	print(""Positive Number Entered"")
elif num < 0:
	print(""Negative Number Entered"")
"
write a python program to do chained comparison	"a = 10
print(1 < a < 50)
print(10 == a < 20)
"
given list of file names	"

from collections import Counter


def getFolderNames(names):
	seen, res = Counter(), []
	for name in names:
        if name in seen:
            while True:
                c = f'({seen[name]})'
                if name + c not in seen:
                    name += c
                    break
                else:
                    seen[name] += 1
        seen[name] += 1
        res.append(name)
	return res
"
sorted list for the below list	"

def cocktail_shaker_sort(alist):
	def swap(i, j):
        alist[i], alist[j] = alist[j], alist[i]

	upper = len(alist) - 1
	lower = 0

	no_swap = False
	while (not no_swap and upper - lower > 1):
        no_swap = True
        for j in range(lower, upper):
            if alist[j + 1] < alist[j]:
                swap(j + 1, j)
                no_swap = False
        upper = upper - 1

        for j in range(upper, lower, -1):
            if alist[j - 1] > alist[j]:
                swap(j - 1, j)
                no_swap = False
        lower = lower + 1


alist = [2, 3, 5, 6, 4, 5]
cocktail_shaker_sort(alist)
print('Sorted list: ', end='')
print(alist)
"
Write a function to print all time when angle between hour hand and minute	"def printTime(theta):
	for hh in range(0, 12):
        for mm in range(0, 60):
            if (calcAngle(hh, mm) == theta):
                print(hh, "":"", mm, sep="""")
                return
	print(""Input angle not valid."")
	return


theta = 90.0
printTime(theta)
"
Write a program to find the factorial of a number	"

num = 13
factorial = 1


if num < 0:
	print(""No factorials for negative numbers!"")


elif num == 0:
	print(""The factorial of 0 is 1"")


else:
	for i in range(1, num + 1):
        factorial = factorial * i
	print(f""The factorial of {num} is {factorial}"")
"
the result	"def sub_two_numbers(num1, num2):
	sub = num1 - num2
	return sub
"
length, then the function should print al l strings line by line.	"def printValue(s1, s2):
	len1 = len(s1)
	len2 = len(s2)
	if len1 > len2:
        print(s1)
	elif len2 > len1:
        print(s2)
	else:
        print(s1)
        print(s2)
"
write a python function to strip punctuations from a given string	"def strip_punctuations(s):
	return s.translate(str.maketrans('', '', string.punctuation))
"
Driver Code	"dict = {'a': 100, 'b': 200, 'c': 300}

key = 'b'
checkKey(dict, key)

key = 'w'
checkKey(dict, key)
"
write a python function to print the octal value of a decimal number	"def print_octal(dec):
	print(oct(dec))
"
write a program to find tangent of a number	"import math


num = 45
print(""Tangent"", math.tan(num))
"
41 function to get the current time at GMT	"def current_time():
	import datetime
	print(datetime.datetime.now())
"
of elements in [1,2,3,4,5,6,7,8,9,10].	"li = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
squaredNumbers = map(lambda x: x**2, li)
print(squaredNumbers)
"
letters and digits.	"s = input()
d = {""DIGITS"": 0, ""LETTERS"": 0}
for c in s:
	if c.isdigit():
        d[""DIGITS""] += 1
	elif c.isalpha():
        d[""LETTERS""] += 1
	else:
        pass
print(""LETTERS"", d[""LETTERS""])
print(""DIGITS"", d[""DIGITS""])
"
vale for a radius	"

class CirclePerimeter():
	def __init__(self, radius):
        self.radius = radius

	def perimeter(self):
        return 2 * 3.14 * self.radius


a = 6
obj = CirclePerimeter(a)
print(""Perimeter of rectangle:"", obj.perimeter())
"
write a python function to add numbers in a list	"

def add(list):
	sum = 0
	for i in range(0, len(list)):
        sum += list[i]
	return sum
"
82 function to show how to use f string	"def f_string(msg: ""user message""):
	print(f'This is an f string with user paramter {msg}')
"
write a python program to print the last 3 items in a list	"my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(my_list[-3:])
"
"list Using list comprehension + ""+"" operator"	"test_list = [(5, 6), (2, 4), (5, 7), (2, 5)]
print(""The original list is : "" + str(test_list))
sub_list = [7, 2, 4, 6]
res = [sub + tuple(sub_list) for sub in test_list]
print(""The modified list : "" + str(res))
"
print only those numbers which are divisible of 5	"def findDivisible(numberList):
	for num in numberList:
        if (num % 5 == 0):
            print(num)
"
write a function to sort a list	"raw_list = [-5, -23, 5, 0, 23, -6, 23, 67]
sorted_list = []
while raw_list:
	minimum = raw_list[0]
	for x in raw_list:
        if x < minimum:
            minimum = x
	sorted_list.append(minimum)
	raw_list.remove(minimum)


print(soreted_list)
"
Test if string contains upper case	"word = ""Hello World""
check = word.isupper()
print(f""String contains upper case?:{check}"")
"
write a python function to return the sum of first n numbers	"def sum_of_nums(n):
	if n <= 1:
        return n
	else:
        return n + sum_of_nums(n - 1)
"
Rotate an array of n elements to the right by k steps.	"org = [1, 2, 3, 4, 5, 6, 7]
result = org[:]
steps = 3


for idx, num in enumerate(org):
	if idx + steps < len(org):
        result[idx + steps] = org[idx]
	else:
        result[idx + steps - len(org)] = org[idx]


print(result)
"
dictionary list and print it	"
test_dict = {""Gfg"": 2, ""is"": 1, ""Best"": 3}

print(""The original dictionary is : "" + str(test_dict))

dict_list = [{'for': 3, 'all': 7}, {'geeks': 10}, {'and': 1, 'CS': 9}]


for i in dict_list:
	test_dict.update(i)
print(test_dict)
"
generating a reliable secure random number	"import secrets
print(""Random integer number generated using secrets module is "")
number = secrets.randbelow(30)
print(number)
"
41 write a python function that takes in a string and returns it in uppercase	"

def to_upper(s):
	return s.upper()
"
Calculate volume V	"V = 4. / 3. * math.pi * radius ** 3
print(f""Volume={V}"")
"
sorted dictionary	"test_dict = {'Nikhil': {'roll': 24, 'marks': 17},
             'Akshat': {'roll': 54, 'marks': 12},
             'Akash': {'roll': 12, 'marks': 15}}
sort_key = 'marks'
res = sorted(test_dict.items(), key=lambda x: x[1][sort_key])
print(""The sorted dictionary by marks is : "" + str(res))
"
6. Write a program to strips every vowel from a string provided	"

vowels = ('a', 'e', 'i', 'o', 'u')
input_string = ""hello""


print('Vowel in a string', ' '.join(
	[x for x in input_string.lower() if x not in vowels]))
"
string and numbers	"test_list = [5, 8, ""gfg"", 8, (5, 7), 'is', 2]
res = 1
for ele in test_list:
	try:
        res *= int(ele)
	except:
        pass
print(""Product of integers in list : "" + str(res))
"
write a program to check if a substring is present in a given string	"

string = ""how are you?""
substring = ""are""
if (string.find(substring) == -1):
	print(""NO"")
else:
	print(""YES"")
"
a sentence	"sentence = 'this is my sentence and i will write it my way'
minlength = 3
result = [word for word in sentence.split(' ') if len(word) >= minlength]
"
printing original list	"print(""The original list : "" + str(test_list))
"
write a program to merge two lists into a dictionary	"keys = [1, 2, 3]
values = ['aye', 'bee', 'sea']
dictionary = dict(zip(keys, values))
"
write a python program to iterate an dict and concatenate	"

D = dict(p='san', q='foundry')
print('{p}{q}'.format(**D))
"
sorting them alphanumerically.	"s = raw_input()
words = [word for word in s.split("" "")]
print("" "".join(sorted(list(set(words)))))
"
series in a given list	"def cal_total_res_in_series(res_list: list) -> float:
	return sum(res_list)
"
22 how to check if string is in byte formate pythin	"isinstance(string, bytes)
"
write a python function to return powerset of iterable	"def powerset(iterable):
	
	from itertools import chain, combinations
	s = list(iterable)
	return chain.from_iterable(combinations(s, r) for r in range(len(s) + 1))


list(powerset([1, 2, 3]))
"
Write a function to return the cartisian distance of a point from origin	"def cal_dist_from_orign(x: float, y: float) -> float:
	return (x**2 + y**2)**(1 / 2)
"
equal sides.	"

print(""Input lengths of the triangle sides: "")
x = int(input(""x: ""))
y = int(input(""y: ""))
z = int(input(""z: ""))
if x == y == z:
	print(""Equilateral triangle"")
elif x != y != z:
	print(""Scalene triangle"")
else:
	print(""isosceles triangle"")
"
write a python program to reverse user provided number	"

n = 4562
rev = 0
while(n > 0):
	a = n % 10
	rev = rev * 10 + a
	n = n // 10
print(rev)
"
print it	"from functools import reduce
nums = [1, 2, 3, 4, 5, 10, 20, 30, 40, 50]
total_sum = reduce(lambda a, b: a + b, nums)
print(f'Sum: {total_sum}')
"
and randomly give an output.	"def dice():
	import random
	min = 1
	max = 6
	roll_again = 'y'

	while roll_again == ""yes"" or roll_again == ""y"":
        print(""Rolling the dice..."")
        print(random.randint(min, max))
        roll_again = input(""Roll the dices again?"")


from cryptography.fernet import Fernet
"
write a python function to convert a number from decimal to binary	"
def decToBinary(n):
	binaryNum = [0] * n
	i = 0
	while (n > 0):
        binaryNum[i] = n % 2
        n = int(n / 2)
        i += 1
	for j in range(i - 1, -1, -1):
        print(binaryNum[j], end="""")
"
its ranges.	"input_array = [0, 1, 2, 4, 5, 7]
start = 0
result = []
while start < len(input_array):
	end = start
	while end + 1 < len(input_array) and ((input_array[end + 1] - input_array[end]) == 1):
        end = end + 1
	if end != start:
        result.append(""{0}-->{1}"".format(input_array[start], input_array[end]))
        print(result)
	else:
        result.append(""{0}"".format(input_array[start]))
        print(result)
	start = end + 1


print(result)
"
Write a python function that prints the Contents of a File in Reverse Order	"

def reverse_content(filename):
	for line in reversed(list(open(filename))):
        print(line.rstrip())
"
Write a function that returns cosine value of the input	"def cos(x: float) -> float:
	import math
	return math.cos(x)
"
"write a python program that would print ""Hello World"""	"print(""Hello World"")
"
occurrences of the character 'c' with  (X, c) in the string.	"def compress(text):
	from itertools import groupby
	for k, g in groupby(text):
        print(""({}, {})"".format(len(list(g)), k), end="" "")
"
Write a program to replace a string by a given string #in a sentence	"

string = 'This is beautiful picture'


string.replace('beautiful', 'good')
"
list Using list comprehension + dictionary comprehension	"

test_list = [{'gfg': 2, 'is': 4, 'best': 6},
             {'it': 5, 'is': 7, 'best': 8},
             {'CS': 10}]


print(""The original list is : "" + str(test_list))


res = {key: list({sub[key] for sub in test_list if key in sub})
       for key in {key for sub in test_list for key in sub}}


print(""The merged values encapsulated dictionary is : "" + str(res))
"
two integers.	"def Recurgcd(a, b):
	low = min(a, b)
	high = max(a, b)

	if low == 0:
        return high
	elif low == 1:
        return 1
	else:
        return Recurgcd(low, high % low)
"
"first ""j"" in the list"	"

def firstOccurence(arr, i, j):
	res = 0
	for k in arr:
        if k == j:
            break
        if k == i:
            res += 1
	return res
"
write a python function to return count of number of vowels in a sentence	"def count_vowels(sentence):
	count = 0
	for letter in sentence:
        if letter in ""aeiouAEIOU"":
            count += 1
	return count
"
or fahrenheit to celsius	"def temp_converter(temp, temp_given_in='f'):
	
	if temp_given_in.lower() == 'f':  
        return (temp - 32) * (5 / 9)
	else:  
        return (temp * 9 / 5) + 32
"
write a python function to check if all elements in a list are unique or not	"

def unique(l):
	if len(l) == len(set(l)):
        print(""All elements are unique"")
	else:
        print(""List has duplicates"")
"
write a Python function to Non-Repeating Integers	"def non_repeats(radix):
	count = 0
	for num_digits in range(1, radix + 1):
        product = radix - 1
        for i in range(1, num_digits):
            product *= (radix - i)
        count += product
	return count


print(non_repeats(6))
"
provided number	"

def drop(a, n=1):
	return a[n:]
"
Write a function to return the volume of a cube	"def cal_cube_volume(side: float) -> float:
	return side**3
"
write a python program to concatenate two strings and print	"str1 = 'hello'
str2 = ' world!'
print(str1 + str2)
"
middle of s1 given two strings, s1 and s2	"def appendMiddle(s1, s2):
	middleIndex = int(len(s1) / 2)
	middleThree = s1[:middleIndex:] + s2 + s1[middleIndex:]
	print(""After appending new string in middle"", middleThree)


appendMiddle(""Ault"", ""Kelly"")
"
tuple, , of those  integers. Then compute and print the result of .	"def hashing(num):
	T = tuple([int(i) for i in num.split()])
	return hash(T)


print(hashing(23456))
"
write a python function to convert string in to binary	"def convertstringtobinary(text):
	for chr in text:
        bin = ''
        asciiVal = int(ord(chr))
        while asciiVal > 0:
            if asciiVal % 2 == 0:
                bin = bin + '0'
            else:
                bin = bin + '1'
            asciiVal = int(asciiVal / 2)
        return(bin + "" : "" + bin[::-1])
"
python program to return unique element from a list	"def unique_list(l):
	x1 = []
	for a in l:
        if a not in x1:
            x1.append(a)
	return x1


print(unique_list([1, 2, 3, 3, 3, 3, 4, 5]))
"
step=1	"def slice_a_tuple(a_tuple, start, stop, step=1):
	return a_tuple[start:stop:step]
"
write a python function to Count the Number of Digits in a Number	"def count_digits():
	n = int(input(""Enter number:""))
	count = 0
	while n > 0:
        count = count + 1
        n = n // 10
	return count
"
distance of object and distance of image from lense	"def cal_focal_length_of_lense(u: float, v: float) -> float:
	return (u * v) / (u + v)
"
Write a function to return the volume of a cone	"def cal_cone_volume(height, radius):
	pi = 3.14
	return pi * (radius**2) * height / 3
"
not always true, as we can see in the next example:	"a = float('nan')
print('a is a,', a is a)
print('a == a,', a == a)
"
returns the equivalent in feet	"def inches_to_feet(inches):
	if inches < 12:
        return 0
	return inches / 12
"
unsigned).	"def reverse_Bits(n):
	result = 0
	for i in range(32):
        result <<= 1
        result |= n & 1
        n >>= 1
	return result
"
write a function to convert weight from kgs to pounds	"

def kgs_to_pounds(weight_kg):
	return weight_kg * 2.2
"
check if all char in the string are alphabetic	"word = ""Hello World""
check = word.isalpha()
print(f""All char are alphabetic?:{check}"")
"
18 how to break out of nested loops python	"x_loop_must_break = False


for x in [1, 2, 3]:
	print(f""x is {x}"")
	for y in [1, 2, 3]:
        print(f""y is {y}"")
        if y == 2:
            x_loop_must_break = True
            break
	if x_loop_must_break:
        break
"
write a Python program to find N largest element from given list of integers	"

l = [1000, 298, 3579, 100, 200, -45, 900]
n = 4
l.sort()
print(l[-n:])
"
write a program to convert date to timestamp and print the result	"import time
import datetime
str1 = ""20/01/2020""
element = datetime.datetime.strptime(str1, ""%d/%m/%Y"")
timestamp = datetime.datetime.timestamp(element)
print(timestamp)
"
of upper case letters and lower case letters	"def string_test(s):
	d = {""UPPER_CASE"": 0, ""LOWER_CASE"": 0}
	for c in s:
        if c.isupper():
            d[""UPPER_CASE""] += 1
        elif c.islower():
            d[""LOWER_CASE""] += 1
        else:
            pass


print(""Original String : "", s)
print(""No. of Upper case characters : "", d[""UPPER_CASE""])
print(""No. of Lower case Characters : "", d[""LOWER_CASE""])


string_test('The quick Brow Fox')
"
write a python function to display the Fibonacci series	"def recur_fibo(n):
	if n <= 1:
        return n
	else:
        return(recur_fibo(n - 1) + recur_fibo(n - 2))
"
Write a function to return the volume of a cylinder	"def cal_cylinder_volume(height, radius):
	pi = 3.14
	return pi * (radius**2) * height
"
2020-12	"def get_stock_prices(tickerSymbol='TSLA'):
	import yfinance as yf

	
	tickerData = yf.Ticker(tickerSymbol)

	
	tickerDf = tickerData.history(
        period='1d', start='2015-1-1', end='2020-12-20')

	
	print(tickerDf)
"
of Tuple Values	"test_dict = {'END Program': (5, 6, 1), 'is': (8, 3, 2), 'best': (1, 4, 9)}
prod_list = []
for x in zip(*test_dict.values()):
	res = 1
	for ele in x:
        res *= ele
	prod_list.append(res)
res = tuple(prod_list)
print(""The product from each index is : "" + str(res))
"
Given a list slice it into a 3 equal chunks and revert each list	"sampleList = [11, 45, 8, 23, 14, 12, 78, 45, 89]


length = len(sampleList)
chunkSize = int(length / 3)
start = 0
end = chunkSize
for i in range(1, 4, 1):
	indexes = slice(start, end, 1)
	listChunk = sampleList[indexes]
	mylist = [i for i in listChunk]
	print(""After reversing it "", mylist)
	start = end
	if(i != 2):
        end += chunkSize
	else:
        end += length - chunkSize
"
48 write a program to print all prime numbers between an interval	"

lower = int(input(""Enter lower range: ""))
upper = int(input(""Enter upper range: ""))

for num in range(lower, upper + 1):
	if num > 1:
        for i in range(2, num):
            if (num % i) == 0:
                break
        else:
            print(num)
"
Write a Python function to find the union of two arrays	"def array_union(A, B):
	union = list(set(A) | set(B))
	return union
"
reverse a number in Python	"number = 1367891
revs_number = 0
while (number > 0):
	remainder = number % 10
	revs_number = (revs_number * 10) + remainder
	number = number // 10
print(""The reverse number is : {}"".format(revs_number))
"
string	"

str1 = ""python1234""

total_digits = 0
total_letters = 0

for s in str1:

	if s.isnumeric():
        total_digits += 1
	else:
        total_letters += 1

print(""Total letters found : "", total_letters)
print(""Total digits found : "", total_digits)
"
